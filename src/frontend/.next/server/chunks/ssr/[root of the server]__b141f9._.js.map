{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/src/app/components/charts/BarChart.tsx"],"sourcesContent":["import { BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nconst data = [\r\n  { name: 'Ene', value: 400 },\r\n  { name: 'Feb', value: 300 },\r\n  { name: 'Mar', value: 600 },\r\n  { name: 'Abr', value: 200 },\r\n  { name: 'May', value: 500 },\r\n];\r\n\r\nexport function BarChart() {\r\n  return (\r\n    <RechartsBarChart width={300} height={200} data={data}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Bar dataKey=\"value\" fill=\"#1c1b1a\" />\r\n    </RechartsBarChart>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA,MAAM,OAAO;IACX;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;CAC3B;AAEM,SAAS;IACd,qBACE,8OAAC,oJAAA,CAAA,WAAgB;QAAC,OAAO;QAAK,QAAQ;QAAK,MAAM;;0BAC/C,8OAAC,6JAAA,CAAA,gBAAa;gBAAC,iBAAgB;;;;;;0BAC/B,8OAAC,qJAAA,CAAA,QAAK;gBAAC,SAAQ;;;;;;0BACf,8OAAC,qJAAA,CAAA,QAAK;;;;;0BACN,8OAAC,uJAAA,CAAA,UAAO;;;;;0BACR,8OAAC,mJAAA,CAAA,MAAG;gBAAC,SAAQ;gBAAQ,MAAK;;;;;;;;;;;;AAGhC"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/src/app/components/charts/LineChart.tsx"],"sourcesContent":["import { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nconst data = [\r\n  { name: 'Ene', value: 400 },\r\n  { name: 'Feb', value: 300 },\r\n  { name: 'Mar', value: 600 },\r\n  { name: 'Abr', value: 200 },\r\n  { name: 'May', value: 500 },\r\n];\r\n\r\nexport function LineChart() {\r\n  return (\r\n    <RechartsLineChart width={300} height={200} data={data}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#434141\" />\r\n    </RechartsLineChart>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA,MAAM,OAAO;IACX;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;IAC1B;QAAE,MAAM;QAAO,OAAO;IAAI;CAC3B;AAEM,SAAS;IACd,qBACE,8OAAC,qJAAA,CAAA,YAAiB;QAAC,OAAO;QAAK,QAAQ;QAAK,MAAM;;0BAChD,8OAAC,6JAAA,CAAA,gBAAa;gBAAC,iBAAgB;;;;;;0BAC/B,8OAAC,qJAAA,CAAA,QAAK;gBAAC,SAAQ;;;;;;0BACf,8OAAC,qJAAA,CAAA,QAAK;;;;;0BACN,8OAAC,uJAAA,CAAA,UAAO;;;;;0BACR,8OAAC,oJAAA,CAAA,OAAI;gBAAC,MAAK;gBAAW,SAAQ;gBAAQ,QAAO;;;;;;;;;;;;AAGnD"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/src/app/components/charts/PieChart.tsx"],"sourcesContent":["import { PieChart as RechartsPieChart, Pie, Cell, Tooltip } from 'recharts';\r\n\r\nconst data = [\r\n  { name: 'A', value: 400 },\r\n  { name: 'B', value: 300 },\r\n  { name: 'C', value: 300 },\r\n];\r\n\r\nconst COLORS = ['#1c1b1a', '#282727', '#434141'];\r\n\r\nexport function PieChart() {\r\n  return (\r\n    <RechartsPieChart width={300} height={200}>\r\n      <Pie\r\n        data={data}\r\n        cx={150}\r\n        cy={100}\r\n        innerRadius={60}\r\n        outerRadius={80}\r\n        fill=\"#8884d8\"\r\n        dataKey=\"value\"\r\n      >\r\n        {data.map((entry, index) => (\r\n          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n        ))}\r\n      </Pie>\r\n      <Tooltip />\r\n    </RechartsPieChart>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;;;AAEA,MAAM,OAAO;IACX;QAAE,MAAM;QAAK,OAAO;IAAI;IACxB;QAAE,MAAM;QAAK,OAAO;IAAI;IACxB;QAAE,MAAM;QAAK,OAAO;IAAI;CACzB;AAED,MAAM,SAAS;IAAC;IAAW;IAAW;CAAU;AAEzC,SAAS;IACd,qBACE,8OAAC,oJAAA,CAAA,WAAgB;QAAC,OAAO;QAAK,QAAQ;;0BACpC,8OAAC,+IAAA,CAAA,MAAG;gBACF,MAAM;gBACN,IAAI;gBACJ,IAAI;gBACJ,aAAa;gBACb,aAAa;gBACb,MAAK;gBACL,SAAQ;0BAEP,KAAK,GAAG,CAAC,CAAC,OAAO,sBAChB,8OAAC,oJAAA,CAAA,OAAI;wBAAuB,MAAM,MAAM,CAAC,QAAQ,OAAO,MAAM,CAAC;uBAApD,CAAC,KAAK,EAAE,OAAO;;;;;;;;;;0BAG9B,8OAAC,uJAAA,CAAA,UAAO;;;;;;;;;;;AAGd"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/src/app/components/filters/Calendar.tsx"],"sourcesContent":["import React from 'react';\r\nimport ReactCalendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\ninterface CalendarProps {\r\n  selectedDate: string; // YYYY-MM-DD format\r\n  onChange: (date: string) => void;\r\n  disabledDates?: string[];\r\n}\r\n\r\nexport function Calendar({ selectedDate, onChange, disabledDates = [] }: CalendarProps) {\r\n  const handleDateChange = (date: Date) => {\r\n    // âœ… Convert to local date before setting state\r\n    const adjustedDate = new Date(date.getFullYear(), date.getMonth(), date.getDate()); // Forces local timezone\r\n    const formattedDate = adjustedDate.toISOString().split(\"T\")[0];\r\n\r\n    console.log(\"Calendar Selected Date (Corrected):\", formattedDate);\r\n    onChange(formattedDate);\r\n  };\r\n\r\n  const isTileDisabled = ({ date }: { date: Date }) => {\r\n    // âœ… Disable dates that are not in the availableDates array\r\n    const formattedDate = date.toISOString().split(\"T\")[0];\r\n    return !disabledDates.includes(formattedDate);\r\n  };\r\n\r\n  return (\r\n    <ReactCalendar\r\n      value={new Date(selectedDate + \"T00:00:00\")} // âœ… Ensures correct timezone\r\n      onChange={(date) => handleDateChange(date as Date)}\r\n      tileDisabled={isTileDisabled} // Disable unavailable dates\r\n      className=\"w-full\"\r\n    />\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;;;;AASO,SAAS,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,gBAAgB,EAAE,EAAiB;IACpF,MAAM,mBAAmB,CAAC;QACxB,+CAA+C;QAC/C,MAAM,eAAe,IAAI,KAAK,KAAK,WAAW,IAAI,KAAK,QAAQ,IAAI,KAAK,OAAO,KAAK,wBAAwB;QAC5G,MAAM,gBAAgB,aAAa,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QAE9D,QAAQ,GAAG,CAAC,uCAAuC;QACnD,SAAS;IACX;IAEA,MAAM,iBAAiB,CAAC,EAAE,IAAI,EAAkB;QAC9C,2DAA2D;QAC3D,MAAM,gBAAgB,KAAK,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QACtD,OAAO,CAAC,cAAc,QAAQ,CAAC;IACjC;IAEA,qBACE,8OAAC,yKAAA,CAAA,UAAa;QACZ,OAAO,IAAI,KAAK,eAAe;QAC/B,UAAU,CAAC,OAAS,iBAAiB;QACrC,cAAc;QACd,WAAU;;;;;;AAGhB"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/src/app/components/charts/HeatMap.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport { HeatmapLayer } from '@deck.gl/aggregation-layers';\r\nimport { BitmapLayer, GeoJsonLayer, ArcLayer } from '@deck.gl/layers';\r\nimport { GoogleMapsOverlay } from '@deck.gl/google-maps';\r\n\r\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyALw8hi8WHQy8AuqZXPD2lMkQai1ppnxyM\"; // ðŸ”¹ Replace with your API key\r\nconst API_URL = \"http://localhost:5000/heatmap\";\r\nconst BITMAP_API_URL = \"http://localhost:5000/bitmap\";\r\nconst ARC_DATA_URL = \"http://localhost:5000/arc-data\";\r\nconst ZONES_DATA_URL = \"http://localhost:5000/zones\";\r\n\r\nexport default function HeatMap({ selectedDate, timeRange }: { selectedDate: string; timeRange: [number, number] }) {\r\n  const [data, setData] = useState([]);\r\n  const [bitmapImage, setBitmapImage] = useState<string | null>(null);\r\n  const [arcData, setArcData] = useState([]);\r\n  const [zonesData, setZonesData] = useState([]);\r\n  const [googleMap, setGoogleMap] = useState<google.maps.Map | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [center, setCenter] = useState({ lat: 25.6518, lng: -100.2870 });\r\n\r\n  // âœ… Ensure Google Maps is Initialized\r\n  useEffect(() => {\r\n    if (typeof window !== \"undefined\" && window.google && !googleMap) {\r\n      console.log(\"âœ… Initializing Google Maps...\");\r\n      setGoogleMap(\r\n        new google.maps.Map(document.getElementById(\"map-container\") as HTMLElement, {\r\n          center,\r\n          zoom: 15,\r\n          mapTypeId: \"satellite\",\r\n          disableDefaultUI: true,\r\n        })\r\n      );\r\n    }\r\n  }, [googleMap]);\r\n\r\n  // âœ… Fetch Heatmap Data\r\n  useEffect(() => {\r\n    if (!selectedDate) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    fetch(`${API_URL}?date=${selectedDate}&startHour=${timeRange[0]}&endHour=${timeRange[1]}`)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        if (!json || !json.features) throw new Error(\"Invalid response format from backend.\");\r\n        const processedData = json.features.map((d: any) => ({\r\n          id: d.properties.id,\r\n          id_person: d.properties.id_person,\r\n          lat: parseFloat(d.geometry.coordinates[1]),\r\n          long: parseFloat(d.geometry.coordinates[0]),\r\n          timestamp: d.properties.timestamp\r\n        }));\r\n\r\n        setData(processedData);\r\n        if (processedData.length > 0) {\r\n          setCenter({ lat: processedData[0].lat, lng: processedData[0].long });\r\n        }\r\n      })\r\n      .catch(err => setError(err.message))\r\n      .finally(() => setLoading(false));\r\n  }, [selectedDate, timeRange]);\r\n\r\n  // âœ… Fetch Bitmap Image\r\n  useEffect(() => {\r\n    fetch(BITMAP_API_URL)\r\n      .then(res => res.json())\r\n      .then(json => json.image && setBitmapImage(json.image))\r\n      .catch(err => console.error(\"Error fetching bitmap image:\", err));\r\n  }, []);\r\n\r\n  // âœ… Fetch Arc Data (Filtered by Date and Time Range)\r\n  useEffect(() => {\r\n    if (!selectedDate) return;\r\n\r\n    fetch(`${ARC_DATA_URL}?date=${selectedDate}&startHour=${timeRange[0]}&endHour=${timeRange[1]}`)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        if (!json || !json.arc_data) throw new Error(\"Invalid ArcLayer response.\");\r\n        setArcData(\r\n          json.arc_data.map((d: any) => ({\r\n            origin_lat: parseFloat(d.origin_lat),\r\n            origin_lon: parseFloat(d.origin_lon),\r\n            destination_lat: parseFloat(d.destination_lat),\r\n            destination_lon: parseFloat(d.destination_lon),\r\n            weight: parseFloat(d.weight),\r\n          }))\r\n        );\r\n      })\r\n      .catch(err => console.error(\"Error fetching arc data:\", err));\r\n  }, [selectedDate, timeRange]);\r\n\r\n\r\n  // âœ… Fetch Zone Polygons\r\n  useEffect(() => {\r\n    fetch(ZONES_DATA_URL)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        if (!json || !json.zones) throw new Error(\"Invalid Zones response.\");\r\n        setZonesData(JSON.parse(json.zones));\r\n      })\r\n      .catch(err => console.error(\"Error fetching zones:\", err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!googleMap) return;\r\n\r\n    console.log(\"âœ… Rendering Deck.GL Layers...\");\r\n\r\n    const overlay = new GoogleMapsOverlay({\r\n      layers: [\r\n        bitmapImage && new BitmapLayer({\r\n          id: 'bitmap-layer',\r\n          bounds: [\r\n            [-100.28813684548274, 25.650376387020653],\r\n            [-100.28813684548274, 25.654316647171434],\r\n            [-100.28389981756604, 25.654316647171434],\r\n            [-100.28389981756604, 25.650376387020653]\r\n          ],\r\n          image: bitmapImage,\r\n          opacity: 1,\r\n        }),\r\n\r\n        new GeoJsonLayer({\r\n          id: \"zones-layer\",\r\n          data: zonesData,\r\n          getFillColor: [100, 150, 250, 100],\r\n          getLineColor: [0, 0, 0, 255],\r\n          getLineWidth: 2,\r\n          pickable: true,\r\n        }),\r\n\r\n        new HeatmapLayer({\r\n          id: 'heatmap-layer',\r\n          data,\r\n          getPosition: (d) => [d.long, d.lat],\r\n          getWeight: (d) => 1,\r\n          aggregation: 'SUM',\r\n          radiusPixels: 40,\r\n        }),\r\n\r\n        new ArcLayer({\r\n          id: 'arc-layer',\r\n          data: arcData, // âœ… This now contains filtered data\r\n          getSourcePosition: (d) => [d.origin_lon, d.origin_lat],\r\n          getTargetPosition: (d) => [d.destination_lon, d.destination_lat],\r\n          getWidth: (d) => Math.max(1, d.weight * 0.1), // Adjust line thickness based on weight\r\n          getSourceColor: [0, 0, 255], // Blue for source\r\n          getTargetColor: [255, 0, 0], // Red for target\r\n          pickable: true,\r\n        }),\r\n      ].filter(Boolean)\r\n    });\r\n\r\n    overlay.setMap(googleMap);\r\n  }, [googleMap, data, bitmapImage, zonesData, arcData]);\r\n\r\n  return (\r\n    <div className=\"relative w-full\">\r\n      <div className=\"h-[500px] w-full rounded-lg overflow-hidden border border-gray-300 relative\">\r\n        <div id=\"map-container\" className=\"h-full w-full\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 511, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/src/app/components/filters/RangeSlider.tsx"],"sourcesContent":["import React from 'react';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\ninterface RangeSliderProps {\r\n  value: [number, number];\r\n  onChange: (value: [number, number]) => void;\r\n}\r\n\r\nexport default function RangeSlider({ value, onChange }: RangeSliderProps) {\r\n  return (\r\n    <div className=\"p-4\">\r\n      <Slider\r\n        range\r\n        min={0}\r\n        max={23}\r\n        step={1}\r\n        value={value}\r\n        onChange={(newValue) => onChange(newValue as [number, number])}\r\n      />\r\n      <div className=\"flex justify-between text-sm mt-2\">\r\n        <span>Desde: {String(value[0]).padStart(2, '0')}:00</span>\r\n        <span>Hasta: {String(value[1]).padStart(2, '0')}:00</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AAAA;;;;AAQe,SAAS,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAoB;IACvE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,2JAAA,CAAA,UAAM;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,MAAM;gBACN,OAAO;gBACP,UAAU,CAAC,WAAa,SAAS;;;;;;0BAEnC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;4BAAK;4BAAQ,OAAO,KAAK,CAAC,EAAE,EAAE,QAAQ,CAAC,GAAG;4BAAK;;;;;;;kCAChD,8OAAC;;4BAAK;4BAAQ,OAAO,KAAK,CAAC,EAAE,EAAE,QAAQ,CAAC,GAAG;4BAAK;;;;;;;;;;;;;;;;;;;AAIxD"}},
    {"offset": {"line": 574, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 580, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/src/app/dashboard/setting/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { BarChart } from '@/app/components/charts/BarChart';\r\nimport { LineChart } from '@/app/components/charts/LineChart';\r\nimport { PieChart } from '@/app/components/charts/PieChart';\r\nimport { Calendar } from '@/app/components/filters/Calendar';\r\nimport HeatMap from '@/app/components/charts/HeatMap';\r\nimport RangeSlider from '@/app/components/filters/RangeSlider'; // New component\r\n\r\nconst API_URL = \"http://localhost:5000/available-dates\"; // Flask API\r\n\r\nexport default function DashboardPage() {\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    return today.toISOString().split(\"T\")[0]; // Always format as YYYY-MM-DD\r\n  };\r\n\r\n  const [selectedDate, setSelectedDate] = useState<string>(getTodayDate());\r\n  const [availableDates, setAvailableDates] = useState<string[]>([]);\r\n  const [timeRange, setTimeRange] = useState<[number, number]>([12, 16]); // âœ… Default 12:00 - 16:00\r\n\r\n  useEffect(() => {\r\n    fetch(API_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.available_dates.length > 0) {\r\n          const firstAvailableDate = data.available_dates.includes(getTodayDate())\r\n            ? getTodayDate()\r\n            : data.available_dates[0];\r\n  \r\n          setAvailableDates(data.available_dates);\r\n          setSelectedDate(firstAvailableDate); // âœ… Ensure we select the first available date\r\n        }\r\n      })\r\n      .catch((err) => console.error(\"Error fetching available dates:\", err));\r\n  }, []);\r\n  \r\n\r\n  const handleDateChange = (date: string) => {\r\n    if (availableDates.includes(date)) {\r\n      setSelectedDate(date);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Dashboard</h1>\r\n\r\n      <div className=\"bg-white p-4 rounded-lg shadow\">\r\n        <h2 className=\"text-lg font-semibold mb-4\">Analytics</h2>\r\n        <div className=\"flex flex-wrap justify-between gap-4\">\r\n          <div className=\"flex-1 min-w-[250px]\"><BarChart /></div>\r\n          <div className=\"flex-1 min-w-[250px]\"><LineChart /></div>\r\n          <div className=\"flex-1 min-w-[250px]\"><PieChart /></div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6\">\r\n        <div className=\"bg-white p-4 rounded-lg shadow\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">Filter</h2>\r\n          <Calendar selectedDate={selectedDate} onChange={handleDateChange} disabledDates={availableDates} />\r\n          <RangeSlider value={timeRange} onChange={setTimeRange} />\r\n        </div>\r\n\r\n        <div className=\"bg-white p-4 rounded-lg shadow\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">Map</h2>\r\n          <HeatMap selectedDate={selectedDate} timeRange={timeRange} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+PAAgE,gBAAgB;AARhF;;;;;;;;;AAUA,MAAM,UAAU,yCAAyC,YAAY;AAEtD,SAAS;IACtB,MAAM,eAAe;QACnB,MAAM,QAAQ,IAAI;QAClB,OAAO,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,8BAA8B;IAC1E;IAEA,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACzD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACjE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;QAAC;QAAI;KAAG,GAAG,0BAA0B;IAElG,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,SACH,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,IACtB,IAAI,CAAC,CAAC;YACL,IAAI,KAAK,eAAe,CAAC,MAAM,GAAG,GAAG;gBACnC,MAAM,qBAAqB,KAAK,eAAe,CAAC,QAAQ,CAAC,kBACrD,iBACA,KAAK,eAAe,CAAC,EAAE;gBAE3B,kBAAkB,KAAK,eAAe;gBACtC,gBAAgB,qBAAqB,8CAA8C;YACrF;QACF,GACC,KAAK,CAAC,CAAC,MAAQ,QAAQ,KAAK,CAAC,mCAAmC;IACrE,GAAG,EAAE;IAGL,MAAM,mBAAmB,CAAC;QACxB,IAAI,eAAe,QAAQ,CAAC,OAAO;YACjC,gBAAgB;QAClB;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;0BAExC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CAAuB,cAAA,8OAAC,+IAAA,CAAA,WAAQ;;;;;;;;;;0CAC/C,8OAAC;gCAAI,WAAU;0CAAuB,cAAA,8OAAC,gJAAA,CAAA,YAAS;;;;;;;;;;0CAChD,8OAAC;gCAAI,WAAU;0CAAuB,cAAA,8OAAC,+IAAA,CAAA,WAAQ;;;;;;;;;;;;;;;;;;;;;;0BAKnD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAA6B;;;;;;0CAC3C,8OAAC,gJAAA,CAAA,WAAQ;gCAAC,cAAc;gCAAc,UAAU;gCAAkB,eAAe;;;;;;0CACjF,8OAAC,mJAAA,CAAA,UAAW;gCAAC,OAAO;gCAAW,UAAU;;;;;;;;;;;;kCAG3C,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAA6B;;;;;;0CAC3C,8OAAC,8IAAA,CAAA,UAAO;gCAAC,cAAc;gCAAc,WAAW;;;;;;;;;;;;;;;;;;;;;;;;AAK1D"}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}