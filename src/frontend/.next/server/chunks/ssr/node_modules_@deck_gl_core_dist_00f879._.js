module.exports = {

"[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$log$2f$dist$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@probe.gl/log/dist/log.js [app-ssr] (ecmascript)");
;
const defaultLogger = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$log$2f$dist$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Log"]({
    id: 'deck'
});
const __TURBOPACK__default__export__ = defaultLogger;
 //# sourceMappingURL=log.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Note: The numeric values here are matched by shader code in the
// "project" and "project64" shader modules. Both places need to be
// updated.
__turbopack_esm__({
    "COORDINATE_SYSTEM": (()=>COORDINATE_SYSTEM),
    "EVENT_HANDLERS": (()=>EVENT_HANDLERS),
    "OPERATION": (()=>OPERATION),
    "PROJECTION_MODE": (()=>PROJECTION_MODE),
    "RECOGNIZERS": (()=>RECOGNIZERS),
    "UNIT": (()=>UNIT)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__PanRecognizer__as__Pan$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js [app-ssr] (ecmascript) <export PanRecognizer as Pan>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pinch$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__PinchRecognizer__as__Pinch$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pinch.js [app-ssr] (ecmascript) <export PinchRecognizer as Pinch>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$tap$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__TapRecognizer__as__Tap$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/tap.js [app-ssr] (ecmascript) <export TapRecognizer as Tap>");
;
;
const COORDINATE_SYSTEM = {
    /**
     * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise
     */ DEFAULT: -1,
    /**
     * Positions are interpreted as [longitude, latitude, elevation]
     * longitude/latitude are in degrees, elevation is in meters.
     * Dimensions are in meters.
     */ LNGLAT: 1,
    /**
     * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.
     * Dimensions are in meters.
     */ METER_OFFSETS: 2,
    /**
     * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.
     * deltaLng/deltaLat are in degrees, elevation is in meters.
     * Dimensions are in meters.
     */ LNGLAT_OFFSETS: 3,
    /**
     * Positions and dimensions are in the common units of the viewport.
     */ CARTESIAN: 0
};
// Deprecated
/* eslint-disable accessor-pairs */ Object.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {
    get: ()=>{
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();
        return 0;
    }
});
const PROJECTION_MODE = {
    /**
     * Render geospatial data in Web Mercator projection
     */ WEB_MERCATOR: 1,
    /**
     * Render geospatial data as a 3D globe
     */ GLOBE: 2,
    /**
     * (Internal use only) Web Mercator projection at high zoom
     */ WEB_MERCATOR_AUTO_OFFSET: 4,
    /**
     * No transformation
     */ IDENTITY: 0
};
const UNIT = {
    common: 0,
    meters: 1,
    pixels: 2
};
const EVENT_HANDLERS = {
    click: 'onClick',
    panstart: 'onDragStart',
    panmove: 'onDrag',
    panend: 'onDragEnd'
};
const RECOGNIZERS = {
    multipan: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__PanRecognizer__as__Pan$3e$__["Pan"],
        {
            threshold: 10,
            direction: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Vertical,
            pointers: 2
        }
    ],
    pinch: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pinch$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__PinchRecognizer__as__Pinch$3e$__["Pinch"],
        {},
        null,
        [
            'multipan'
        ]
    ],
    pan: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__PanRecognizer__as__Pan$3e$__["Pan"],
        {
            threshold: 1
        },
        [
            'pinch'
        ],
        [
            'multipan'
        ]
    ],
    dblclick: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$tap$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__TapRecognizer__as__Tap$3e$__["Tap"],
        {
            event: 'dblclick',
            taps: 2
        }
    ],
    click: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$tap$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__TapRecognizer__as__Tap$3e$__["Tap"],
        {
            event: 'click'
        },
        null,
        [
            'dblclick'
        ]
    ]
};
const OPERATION = {
    DRAW: 'draw',
    MASK: 'mask',
    TERRAIN: 'terrain'
}; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/misc/geometry.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
const defines = '#define SMOOTH_EDGE_RADIUS 0.5';
const vs = `
${defines}

struct VertexGeometry {
  vec4 position;
  vec3 worldPosition;
  vec3 worldPositionAlt;
  vec3 normal;
  vec2 uv;
  vec3 pickingColor;
} geometry = VertexGeometry(
  vec4(0.0, 0.0, 1.0, 0.0),
  vec3(0.0),
  vec3(0.0),
  vec3(0.0),
  vec2(0.0),
  vec3(0.0)
);
`;
const fs = `
${defines}

struct FragmentGeometry {
  vec2 uv;
} geometry;

float smoothedge(float edge, float x) {
  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);
}
`;
const __TURBOPACK__default__export__ = {
    name: 'geometry',
    vs,
    fs
};
 //# sourceMappingURL=geometry.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/project/project.glsl.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
;
// We are generating these from the js code in constants.js
const COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"]).map((key)=>`const int COORDINATE_SYSTEM_${key} = ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"][key]};`).join('');
const PROJECTION_MODE_GLSL_CONSTANTS = Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"]).map((key)=>`const int PROJECTION_MODE_${key} = ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"][key]};`).join('');
const UNIT_GLSL_CONSTANTS = Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UNIT"]).map((key)=>`const int UNIT_${key.toUpperCase()} = ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UNIT"][key]};`).join('');
const __TURBOPACK__default__export__ = `\
${COORDINATE_SYSTEM_GLSL_CONSTANTS}
${PROJECTION_MODE_GLSL_CONSTANTS}
${UNIT_GLSL_CONSTANTS}
uniform projectUniforms {
bool wrapLongitude;
int coordinateSystem;
vec3 commonUnitsPerMeter;
int projectionMode;
float scale;
vec3 commonUnitsPerWorldUnit;
vec3 commonUnitsPerWorldUnit2;
vec4 center;
mat4 modelMatrix;
mat4 viewProjectionMatrix;
vec2 viewportSize;
float devicePixelRatio;
float focalDistance;
vec3 cameraPosition;
vec3 coordinateOrigin;
vec3 commonOrigin;
bool pseudoMeters;
} project;
const float TILE_SIZE = 512.0;
const float PI = 3.1415926536;
const float WORLD_SCALE = TILE_SIZE / (PI * 2.0);
const vec3 ZERO_64_LOW = vec3(0.0);
const float EARTH_RADIUS = 6370972.0;
const float GLOBE_RADIUS = 256.0;
float project_size_at_latitude(float lat) {
float y = clamp(lat, -89.9, 89.9);
return 1.0 / cos(radians(y));
}
float project_size() {
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR &&
project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT &&
project.pseudoMeters == false) {
if (geometry.position.w == 0.0) {
return project_size_at_latitude(geometry.worldPosition.y);
}
float y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;
float y2 = y * y;
float y4 = y2 * y2;
float y6 = y4 * y2;
return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;
}
return 1.0;
}
float project_size_at_latitude(float meters, float lat) {
return meters * project.commonUnitsPerMeter.z * project_size_at_latitude(lat);
}
float project_size(float meters) {
return meters * project.commonUnitsPerMeter.z * project_size();
}
vec2 project_size(vec2 meters) {
return meters * project.commonUnitsPerMeter.xy * project_size();
}
vec3 project_size(vec3 meters) {
return meters * project.commonUnitsPerMeter * project_size();
}
vec4 project_size(vec4 meters) {
return vec4(meters.xyz * project.commonUnitsPerMeter, meters.w);
}
mat3 project_get_orientation_matrix(vec3 up) {
vec3 uz = normalize(up);
vec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));
vec3 uy = cross(uz, ux);
return mat3(ux, uy, uz);
}
bool project_needs_rotation(vec3 commonPosition, out mat3 transform) {
if (project.projectionMode == PROJECTION_MODE_GLOBE) {
transform = project_get_orientation_matrix(commonPosition);
return true;
}
return false;
}
vec3 project_normal(vec3 vector) {
vec4 normal_modelspace = project.modelMatrix * vec4(vector, 0.0);
vec3 n = normalize(normal_modelspace.xyz * project.commonUnitsPerMeter);
mat3 rotation;
if (project_needs_rotation(geometry.position.xyz, rotation)) {
n = rotation * n;
}
return n;
}
vec4 project_offset_(vec4 offset) {
float dy = offset.y;
vec3 commonUnitsPerWorldUnit = project.commonUnitsPerWorldUnit + project.commonUnitsPerWorldUnit2 * dy;
return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);
}
vec2 project_mercator_(vec2 lnglat) {
float x = lnglat.x;
if (project.wrapLongitude) {
x = mod(x + 180., 360.0) - 180.;
}
float y = clamp(lnglat.y, -89.9, 89.9);
return vec2(
radians(x) + PI,
PI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))
) * WORLD_SCALE;
}
vec3 project_globe_(vec3 lnglatz) {
float lambda = radians(lnglatz.x);
float phi = radians(lnglatz.y);
float cosPhi = cos(phi);
float D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;
return vec3(
sin(lambda) * cosPhi,
-cos(lambda) * cosPhi,
sin(phi)
) * D;
}
vec4 project_position(vec4 position, vec3 position64Low) {
vec4 position_world = project.modelMatrix * position;
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR) {
if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
return vec4(
project_mercator_(position_world.xy),
project_size_at_latitude(position_world.z, position_world.y),
position_world.w
);
}
if (project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {
position_world.xyz += project.coordinateOrigin;
}
}
if (project.projectionMode == PROJECTION_MODE_GLOBE) {
if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
return vec4(
project_globe_(position_world.xyz),
position_world.w
);
}
}
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
if (abs(position_world.y - project.coordinateOrigin.y) > 0.25) {
return vec4(
project_mercator_(position_world.xy) - project.commonOrigin.xy,
project_size(position_world.z),
position_world.w
);
}
}
}
if (project.projectionMode == PROJECTION_MODE_IDENTITY ||
(project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&
(project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {
position_world.xyz -= project.coordinateOrigin;
}
return project_offset_(position_world) + project_offset_(project.modelMatrix * vec4(position64Low, 0.0));
}
vec4 project_position(vec4 position) {
return project_position(position, ZERO_64_LOW);
}
vec3 project_position(vec3 position, vec3 position64Low) {
vec4 projected_position = project_position(vec4(position, 1.0), position64Low);
return projected_position.xyz;
}
vec3 project_position(vec3 position) {
vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);
return projected_position.xyz;
}
vec2 project_position(vec2 position) {
vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);
return projected_position.xy;
}
vec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {
return viewProjectionMatrix * position + center;
}
vec4 project_common_position_to_clipspace(vec4 position) {
return project_common_position_to_clipspace(position, project.viewProjectionMatrix, project.center);
}
vec2 project_pixel_size_to_clipspace(vec2 pixels) {
vec2 offset = pixels / project.viewportSize * project.devicePixelRatio * 2.0;
return offset * project.focalDistance;
}
float project_size_to_pixel(float meters) {
return project_size(meters) * project.scale;
}
float project_size_to_pixel(float size, int unit) {
if (unit == UNIT_METERS) return project_size_to_pixel(size);
if (unit == UNIT_COMMON) return size * project.scale;
return size;
}
float project_pixel_size(float pixels) {
return pixels / project.scale;
}
vec2 project_pixel_size(vec2 pixels) {
return pixels / project.scale;
}
`;
 //# sourceMappingURL=project.glsl.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/memoize.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>memoize)
});
function isEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (Array.isArray(a)) {
        // Special treatment for arrays: compare 1-level deep
        // This is to support equality of matrix/coordinate props
        const len = a.length;
        if (!b || b.length !== len) {
            return false;
        }
        for(let i = 0; i < len; i++){
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}
function memoize(compute) {
    let cachedArgs = {};
    let cachedResult;
    return (args)=>{
        for(const key in args){
            if (!isEqual(args[key], cachedArgs[key])) {
                cachedResult = compute(args);
                cachedArgs = args;
                break;
            }
        }
        return cachedResult;
    };
} //# sourceMappingURL=memoize.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* eslint-disable complexity, camelcase */ __turbopack_esm__({
    "getOffsetOrigin": (()=>getOffsetOrigin),
    "getUniformsFromViewport": (()=>getUniformsFromViewport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/memoize.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec4$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/gl-matrix/vec4.js [app-ssr] (ecmascript) <export * as vec4>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/gl-matrix/mat4.js [app-ssr] (ecmascript) <export * as mat4>");
;
;
;
// To quickly set a vector to zero
const ZERO_VECTOR = [
    0,
    0,
    0,
    0
];
// 4x4 matrix that drops 4th component of vector
const VECTOR_TO_POINT_MATRIX = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0
];
const IDENTITY_MATRIX = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
];
const DEFAULT_PIXELS_PER_UNIT2 = [
    0,
    0,
    0
];
const DEFAULT_COORDINATE_ORIGIN = [
    0,
    0,
    0
];
const getMemoizedViewportUniforms = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(calculateViewportUniforms);
function getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN) {
    if (coordinateOrigin.length < 3) {
        coordinateOrigin = [
            coordinateOrigin[0],
            coordinateOrigin[1],
            0
        ];
    }
    let shaderCoordinateOrigin = coordinateOrigin;
    let geospatialOrigin;
    let offsetMode = true;
    if (coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT_OFFSETS || coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].METER_OFFSETS) {
        geospatialOrigin = coordinateOrigin;
    } else {
        geospatialOrigin = viewport.isGeospatial ? [
            Math.fround(viewport.longitude),
            Math.fround(viewport.latitude),
            0
        ] : null;
    }
    switch(viewport.projectionMode){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].WEB_MERCATOR:
            if (coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT || coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].CARTESIAN) {
                geospatialOrigin = [
                    0,
                    0,
                    0
                ];
                offsetMode = false;
            }
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].WEB_MERCATOR_AUTO_OFFSET:
            if (coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT) {
                // viewport center in world space
                // @ts-expect-error when using LNGLAT coordinates, we expect the viewport to be geospatial, in which case geospatialOrigin is defined
                shaderCoordinateOrigin = geospatialOrigin;
            } else if (coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].CARTESIAN) {
                // viewport center in common space
                shaderCoordinateOrigin = [
                    Math.fround(viewport.center[0]),
                    Math.fround(viewport.center[1]),
                    0
                ];
                // Geospatial origin (wgs84) must match shaderCoordinateOrigin (common)
                geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);
                shaderCoordinateOrigin[0] -= coordinateOrigin[0];
                shaderCoordinateOrigin[1] -= coordinateOrigin[1];
                shaderCoordinateOrigin[2] -= coordinateOrigin[2];
            }
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].IDENTITY:
            shaderCoordinateOrigin = viewport.position.map(Math.fround);
            shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].GLOBE:
            offsetMode = false;
            geospatialOrigin = null;
            break;
        default:
            // Unknown projection mode
            offsetMode = false;
    }
    return {
        geospatialOrigin,
        shaderCoordinateOrigin,
        offsetMode
    };
}
// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,
// has lower performance but provides error checking.
function calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {
    const { viewMatrixUncentered, projectionMatrix } = viewport;
    let { viewMatrix, viewProjectionMatrix } = viewport;
    let projectionCenter = ZERO_VECTOR;
    let originCommon = ZERO_VECTOR;
    let cameraPosCommon = viewport.cameraPosition;
    const { geospatialOrigin, shaderCoordinateOrigin, offsetMode } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);
    if (offsetMode) {
        // Calculate transformed projectionCenter (using 64 bit precision JS)
        // This is the key to offset mode precision
        // (avoids doing this addition in 32 bit precision in GLSL)
        // @ts-expect-error the 4th component is assigned below
        originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
        cameraPosCommon = [
            cameraPosCommon[0] - originCommon[0],
            cameraPosCommon[1] - originCommon[1],
            cameraPosCommon[2] - originCommon[2]
        ];
        originCommon[3] = 1;
        // projectionCenter = new Matrix4(viewProjectionMatrix)
        //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);
        projectionCenter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec4$3e$__["vec4"].transformMat4([], originCommon, viewProjectionMatrix);
        // Always apply uncentered projection matrix if available (shader adds center)
        viewMatrix = viewMatrixUncentered || viewMatrix;
        // Zero out 4th coordinate ("after" model matrix) - avoids further translations
        // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)
        //   .multiplyRight(VECTOR_TO_POINT_MATRIX);
        viewProjectionMatrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].multiply([], projectionMatrix, viewMatrix);
        viewProjectionMatrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);
    }
    return {
        viewMatrix: viewMatrix,
        viewProjectionMatrix: viewProjectionMatrix,
        projectionCenter,
        originCommon,
        cameraPosCommon,
        shaderCoordinateOrigin,
        geospatialOrigin
    };
}
function getUniformsFromViewport({ viewport, devicePixelRatio = 1, modelMatrix = null, // Match Layer.defaultProps
coordinateSystem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].DEFAULT, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN, autoWrapLongitude = false }) {
    if (coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].DEFAULT) {
        coordinateSystem = viewport.isGeospatial ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].CARTESIAN;
    }
    const uniforms = getMemoizedViewportUniforms({
        viewport,
        devicePixelRatio,
        coordinateSystem,
        coordinateOrigin
    });
    uniforms.wrapLongitude = autoWrapLongitude;
    uniforms.modelMatrix = modelMatrix || IDENTITY_MATRIX;
    return uniforms;
}
function calculateViewportUniforms({ viewport, devicePixelRatio, coordinateSystem, coordinateOrigin }) {
    const { projectionCenter, viewProjectionMatrix, originCommon, cameraPosCommon, shaderCoordinateOrigin, geospatialOrigin } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);
    // Calculate projection pixels per unit
    const distanceScales = viewport.getDistanceScales();
    const viewportSize = [
        viewport.width * devicePixelRatio,
        viewport.height * devicePixelRatio
    ];
    // Distance at which screen pixels are projected.
    // Used to scale sizes in clipspace to match screen pixels.
    // When using Viewport class's default projection matrix, this yields 1 for orthographic
    // and `viewport.focalDistance` for perspective views
    const focalDistance = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec4$3e$__["vec4"].transformMat4([], [
        0,
        0,
        -viewport.focalDistance,
        1
    ], viewport.projectionMatrix)[3] || 1;
    const uniforms = {
        // Projection mode values
        coordinateSystem,
        projectionMode: viewport.projectionMode,
        coordinateOrigin: shaderCoordinateOrigin,
        commonOrigin: originCommon.slice(0, 3),
        center: projectionCenter,
        // Backward compatibility
        // TODO: remove in v9
        // @ts-expect-error _pseudoMeters is only defined on WebMercator viewport
        pseudoMeters: Boolean(viewport._pseudoMeters),
        // Screen size
        viewportSize,
        devicePixelRatio,
        focalDistance,
        commonUnitsPerMeter: distanceScales.unitsPerMeter,
        commonUnitsPerWorldUnit: distanceScales.unitsPerMeter,
        commonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,
        scale: viewport.scale,
        wrapLongitude: false,
        viewProjectionMatrix,
        modelMatrix: IDENTITY_MATRIX,
        // This is for lighting calculations
        cameraPosition: cameraPosCommon
    };
    if (geospatialOrigin) {
        // Get high-precision DistanceScales from geospatial viewport
        // TODO: stricter types in Viewport classes
        const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);
        switch(coordinateSystem){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].METER_OFFSETS:
                uniforms.commonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;
                uniforms.commonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT_OFFSETS:
                // @ts-expect-error _pseudoMeters only exists on WebMercatorView
                if (!viewport._pseudoMeters) {
                    uniforms.commonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;
                }
                uniforms.commonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;
                uniforms.commonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;
                break;
            // a.k.a "preprojected" positions
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].CARTESIAN:
                uniforms.commonUnitsPerWorldUnit = [
                    1,
                    1,
                    distanceScalesAtOrigin.unitsPerMeter[2]
                ];
                uniforms.commonUnitsPerWorldUnit2 = [
                    0,
                    0,
                    distanceScalesAtOrigin.unitsPerMeter2[2]
                ];
                break;
            default:
                break;
        }
    }
    return uniforms;
} //# sourceMappingURL=viewport-uniforms.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/project/project.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$modules$2f$math$2f$fp32$2f$fp32$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/shadertools/dist/modules/math/fp32/fp32.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$misc$2f$geometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/misc/geometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2e$glsl$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/project/project.glsl.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$viewport$2d$uniforms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js [app-ssr] (ecmascript)");
;
;
;
;
const INITIAL_MODULE_OPTIONS = {};
function getUniforms(opts = INITIAL_MODULE_OPTIONS) {
    if ('viewport' in opts) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$viewport$2d$uniforms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUniformsFromViewport"])(opts);
    }
    return {};
}
const __TURBOPACK__default__export__ = {
    name: 'project',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$modules$2f$math$2f$fp32$2f$fp32$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fp32"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$misc$2f$geometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
    ],
    vs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2e$glsl$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    getUniforms,
    uniformTypes: {
        wrapLongitude: 'f32',
        coordinateSystem: 'i32',
        commonUnitsPerMeter: 'vec3<f32>',
        projectionMode: 'i32',
        scale: 'f32',
        commonUnitsPerWorldUnit: 'vec3<f32>',
        commonUnitsPerWorldUnit2: 'vec3<f32>',
        center: 'vec4<f32>',
        modelMatrix: 'mat4x4<f32>',
        viewProjectionMatrix: 'mat4x4<f32>',
        viewportSize: 'vec2<f32>',
        devicePixelRatio: 'f32',
        focalDistance: 'f32',
        cameraPosition: 'vec3<f32>',
        coordinateOrigin: 'vec3<f32>',
        commonOrigin: 'vec3<f32>',
        pseudoMeters: 'f32'
    }
};
 //# sourceMappingURL=project.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/project/project.js [app-ssr] (ecmascript)");
;
const vs = `
vec4 project_position_to_clipspace(
  vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition
) {
  vec3 projectedPosition = project_position(position, position64Low);
  mat3 rotation;
  if (project_needs_rotation(projectedPosition, rotation)) {
    // offset is specified as ENU
    // when in globe projection, rotate offset so that the ground alighs with the surface of the globe
    offset = rotation * offset;
  }
  commonPosition = vec4(projectedPosition + offset, 1.0);
  return project_common_position_to_clipspace(commonPosition);
}

vec4 project_position_to_clipspace(
  vec3 position, vec3 position64Low, vec3 offset
) {
  vec4 commonPosition;
  return project_position_to_clipspace(position, position64Low, offset, commonPosition);
}
`;
const __TURBOPACK__default__export__ = {
    name: 'project32',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
    ],
    vs
};
 //# sourceMappingURL=project32.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js [app-ssr] (ecmascript) <export default as project32>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "project32": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project32$2f$project32$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project32$2f$project32$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$modules$2f$engine$2f$picking$2f$picking$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/shadertools/dist/modules/engine/picking/picking.js [app-ssr] (ecmascript)");
;
const __TURBOPACK__default__export__ = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$modules$2f$engine$2f$picking$2f$picking$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["picking"],
    defaultUniforms: {
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$modules$2f$engine$2f$picking$2f$picking$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["picking"].defaultUniforms,
        useFloatColors: false
    },
    inject: {
        'vs:DECKGL_FILTER_GL_POSITION': `
    // for picking depth values
    picking_setPickingAttribute(position.z / position.w);
  `,
        'vs:DECKGL_FILTER_COLOR': `
  picking_setPickingColor(geometry.pickingColor);
  `,
        'fs:DECKGL_FILTER_COLOR': {
            order: 99,
            injection: `
  // use highlight color if this fragment belongs to the selected object.
  color = picking_filterHighlightColor(color);

  // use picking color if rendering to picking FBO.
  color = picking_filterPickingColor(color);
    `
        }
    }
};
 //# sourceMappingURL=picking.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js [app-ssr] (ecmascript) <export default as picking>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "picking": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$picking$2f$picking$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$picking$2f$picking$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "ASYNC_DEFAULTS_SYMBOL": (()=>ASYNC_DEFAULTS_SYMBOL),
    "ASYNC_ORIGINAL_SYMBOL": (()=>ASYNC_ORIGINAL_SYMBOL),
    "ASYNC_RESOLVED_SYMBOL": (()=>ASYNC_RESOLVED_SYMBOL),
    "COMPONENT_SYMBOL": (()=>COMPONENT_SYMBOL),
    "DEPRECATED_PROPS_SYMBOL": (()=>DEPRECATED_PROPS_SYMBOL),
    "LIFECYCLE": (()=>LIFECYCLE),
    "PROP_TYPES_SYMBOL": (()=>PROP_TYPES_SYMBOL)
});
const LIFECYCLE = {
    NO_STATE: 'Awaiting state',
    MATCHED: 'Matched. State transferred from previous layer',
    INITIALIZED: 'Initialized',
    AWAITING_GC: 'Discarded. Awaiting garbage collection',
    AWAITING_FINALIZATION: 'No longer matched. Awaiting garbage collection',
    FINALIZED: 'Finalized! Awaiting garbage collection'
};
const COMPONENT_SYMBOL = Symbol.for('component');
const PROP_TYPES_SYMBOL = Symbol.for('propTypes');
const DEPRECATED_PROPS_SYMBOL = Symbol.for('deprecatedProps');
const ASYNC_DEFAULTS_SYMBOL = Symbol.for('asyncPropDefaults');
const ASYNC_ORIGINAL_SYMBOL = Symbol.for('asyncPropOriginal');
const ASYNC_RESOLVED_SYMBOL = Symbol.for('asyncPropResolved'); //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/assert.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Replacement for the external assert method to reduce bundle size
// Note: We don't use the second "message" argument in calling code,
// so no need to support it here
__turbopack_esm__({
    "default": (()=>assert)
});
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'deck.gl: assertion failed.');
    }
} //# sourceMappingURL=assert.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/typed-array-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "TypedArrayManager": (()=>TypedArrayManager),
    "default": (()=>__TURBOPACK__default__export__)
});
class TypedArrayManager {
    constructor(options = {}){
        this._pool = [];
        this.opts = {
            overAlloc: 2,
            poolSize: 100
        };
        this.setOptions(options);
    }
    setOptions(options) {
        Object.assign(this.opts, options);
    }
    allocate(typedArray, count, { size = 1, type, padding = 0, copy = false, initialize = false, maxCount }) {
        const Type = type || typedArray && typedArray.constructor || Float32Array;
        const newSize = count * size + padding;
        if (ArrayBuffer.isView(typedArray)) {
            if (newSize <= typedArray.length) {
                return typedArray;
            }
            if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {
                return new Type(typedArray.buffer, 0, newSize);
            }
        }
        let maxSize = Infinity;
        if (maxCount) {
            maxSize = maxCount * size + padding;
        }
        const newArray = this._allocate(Type, newSize, initialize, maxSize);
        if (typedArray && copy) {
            newArray.set(typedArray);
        } else if (!initialize) {
            // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation
            newArray.fill(0, 0, 4);
        }
        this._release(typedArray);
        return newArray;
    }
    release(typedArray) {
        this._release(typedArray);
    }
    _allocate(Type, size, initialize, maxSize) {
        // Allocate at least one element to ensure a valid buffer
        let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);
        // Don't over allocate after certain specified number of elements
        if (sizeToAllocate > maxSize) {
            sizeToAllocate = maxSize;
        }
        // Check if available in pool
        const pool = this._pool;
        const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;
        const i = pool.findIndex((b)=>b.byteLength >= byteLength);
        if (i >= 0) {
            // Create a new array using an existing buffer
            const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);
            if (initialize) {
                // Viewing a buffer with a different type may create NaNs
                array.fill(0);
            }
            return array;
        }
        return new Type(sizeToAllocate);
    }
    _release(typedArray) {
        if (!ArrayBuffer.isView(typedArray)) {
            return;
        }
        const pool = this._pool;
        const { buffer } = typedArray;
        // Save the buffer of the released array into the pool
        // Sort buffers by size
        // TODO - implement binary search?
        const { byteLength } = buffer;
        const i = pool.findIndex((b)=>b.byteLength >= byteLength);
        if (i < 0) {
            pool.push(buffer);
        } else if (i > 0 || pool.length < this.opts.poolSize) {
            pool.splice(i, 0, buffer);
        }
        if (pool.length > this.opts.poolSize) {
            // Drop the smallest one
            pool.shift();
        }
    }
}
const __TURBOPACK__default__export__ = new TypedArrayManager();
 //# sourceMappingURL=typed-array-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/math-utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Extensions to math.gl library. Intended to be folded back.
__turbopack_esm__({
    "createMat4": (()=>createMat4),
    "fp64LowPart": (()=>fp64LowPart),
    "getCameraPosition": (()=>getCameraPosition),
    "getFrustumPlanes": (()=>getFrustumPlanes),
    "mergeBounds": (()=>mergeBounds),
    "mod": (()=>mod),
    "toDoublePrecisionArray": (()=>toDoublePrecisionArray)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/vector3.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/typed-array-manager.js [app-ssr] (ecmascript)");
;
;
function createMat4() {
    return [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
    ];
}
function mod(value, divisor) {
    const modulus = value % divisor;
    return modulus < 0 ? divisor + modulus : modulus;
}
function getCameraPosition(viewMatrixInverse) {
    // Read the translation from the inverse view matrix
    return [
        viewMatrixInverse[12],
        viewMatrixInverse[13],
        viewMatrixInverse[14]
    ];
}
function getFrustumPlanes(viewProjectionMatrix) {
    return {
        left: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[0], viewProjectionMatrix[7] + viewProjectionMatrix[4], viewProjectionMatrix[11] + viewProjectionMatrix[8], viewProjectionMatrix[15] + viewProjectionMatrix[12]),
        right: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[0], viewProjectionMatrix[7] - viewProjectionMatrix[4], viewProjectionMatrix[11] - viewProjectionMatrix[8], viewProjectionMatrix[15] - viewProjectionMatrix[12]),
        bottom: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[1], viewProjectionMatrix[7] + viewProjectionMatrix[5], viewProjectionMatrix[11] + viewProjectionMatrix[9], viewProjectionMatrix[15] + viewProjectionMatrix[13]),
        top: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[1], viewProjectionMatrix[7] - viewProjectionMatrix[5], viewProjectionMatrix[11] - viewProjectionMatrix[9], viewProjectionMatrix[15] - viewProjectionMatrix[13]),
        near: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[2], viewProjectionMatrix[7] + viewProjectionMatrix[6], viewProjectionMatrix[11] + viewProjectionMatrix[10], viewProjectionMatrix[15] + viewProjectionMatrix[14]),
        far: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[2], viewProjectionMatrix[7] - viewProjectionMatrix[6], viewProjectionMatrix[11] - viewProjectionMatrix[10], viewProjectionMatrix[15] - viewProjectionMatrix[14])
    };
}
const scratchVector = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"]();
function getFrustumPlane(a, b, c, d) {
    scratchVector.set(a, b, c);
    const L = scratchVector.len();
    return {
        distance: d / L,
        normal: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"](-a / L, -b / L, -c / L)
    };
}
function fp64LowPart(x) {
    return x - Math.fround(x);
}
let scratchArray;
function toDoublePrecisionArray(typedArray, options) {
    const { size = 1, startIndex = 0 } = options;
    const endIndex = options.endIndex !== undefined ? options.endIndex : typedArray.length;
    const count = (endIndex - startIndex) / size;
    scratchArray = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].allocate(scratchArray, count, {
        type: Float32Array,
        size: size * 2
    });
    let sourceIndex = startIndex;
    let targetIndex = 0;
    while(sourceIndex < endIndex){
        for(let j = 0; j < size; j++){
            const value = typedArray[sourceIndex++];
            scratchArray[targetIndex + j] = value;
            scratchArray[targetIndex + j + size] = fp64LowPart(value);
        }
        targetIndex += size * 2;
    }
    return scratchArray.subarray(0, count * size * 2);
}
function mergeBounds(boundsList) {
    let mergedBounds = null;
    let isMerged = false;
    for (const bounds of boundsList){
        /* eslint-disable-next-line no-continue */ if (!bounds) continue;
        if (!mergedBounds) {
            mergedBounds = bounds;
        } else {
            if (!isMerged) {
                // Copy to avoid mutating input bounds
                mergedBounds = [
                    [
                        mergedBounds[0][0],
                        mergedBounds[0][1]
                    ],
                    [
                        mergedBounds[1][0],
                        mergedBounds[1][1]
                    ]
                ];
                isMerged = true;
            }
            mergedBounds[0][0] = Math.min(mergedBounds[0][0], bounds[0][0]);
            mergedBounds[0][1] = Math.min(mergedBounds[0][1], bounds[0][1]);
            mergedBounds[1][0] = Math.max(mergedBounds[1][0], bounds[1][0]);
            mergedBounds[1][1] = Math.max(mergedBounds[1][1], bounds[1][1]);
        }
    }
    return mergedBounds;
} //# sourceMappingURL=math-utils.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/viewports/viewport.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/lib/common.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/math-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/matrix4.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/vector3.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/gl-matrix/mat4.js [app-ssr] (ecmascript) <export * as mat4>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
;
;
;
;
;
const DEGREES_TO_RADIANS = Math.PI / 180;
const IDENTITY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMat4"])();
const ZERO_VECTOR = [
    0,
    0,
    0
];
const DEFAULT_DISTANCE_SCALES = {
    unitsPerMeter: [
        1,
        1,
        1
    ],
    metersPerUnit: [
        1,
        1,
        1
    ]
};
// / Helpers
function createProjectionMatrix({ width, height, orthographic, fovyRadians, focalDistance, padding, near, far }) {
    const aspect = width / height;
    const matrix = orthographic ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"]().orthographic({
        fovy: fovyRadians,
        aspect,
        focalDistance,
        near,
        far
    }) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"]().perspective({
        fovy: fovyRadians,
        aspect,
        near,
        far
    });
    if (padding) {
        const { left = 0, right = 0, top = 0, bottom = 0 } = padding;
        const offsetX = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])((left + width - right) / 2, 0, width) - width / 2;
        const offsetY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])((top + height - bottom) / 2, 0, height) - height / 2;
        // pixels to clip space
        matrix[8] -= offsetX * 2 / width;
        matrix[9] += offsetY * 2 / height;
    }
    return matrix;
}
/**
 * Manages coordinate system transformations.
 *
 * Note: The Viewport is immutable in the sense that it only has accessors.
 * A new viewport instance should be created if any parameters have changed.
 */ class Viewport {
    // eslint-disable-next-line complexity
    constructor(opts = {}){
        this._frustumPlanes = {};
        // @ts-ignore
        this.id = opts.id || this.constructor.displayName || 'viewport';
        this.x = opts.x || 0;
        this.y = opts.y || 0;
        // Silently allow apps to send in w,h = 0,0
        this.width = opts.width || 1;
        this.height = opts.height || 1;
        this.zoom = opts.zoom || 0;
        this.padding = opts.padding;
        this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;
        this.focalDistance = opts.focalDistance || 1;
        this.position = opts.position || ZERO_VECTOR;
        this.modelMatrix = opts.modelMatrix || null;
        const { longitude, latitude } = opts;
        this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);
        this._initProps(opts);
        this._initMatrices(opts);
        // Bind methods for easy access
        this.equals = this.equals.bind(this);
        this.project = this.project.bind(this);
        this.unproject = this.unproject.bind(this);
        this.projectPosition = this.projectPosition.bind(this);
        this.unprojectPosition = this.unprojectPosition.bind(this);
        this.projectFlat = this.projectFlat.bind(this);
        this.unprojectFlat = this.unprojectFlat.bind(this);
    }
    get subViewports() {
        return null;
    }
    get metersPerPixel() {
        return this.distanceScales.metersPerUnit[2] / this.scale;
    }
    get projectionMode() {
        if (this.isGeospatial) {
            return this.zoom < 12 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].WEB_MERCATOR : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].WEB_MERCATOR_AUTO_OFFSET;
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].IDENTITY;
    }
    // Two viewports are equal if width and height are identical, and if
    // their view and projection matrices are (approximately) equal.
    equals(viewport) {
        if (!(viewport instanceof Viewport)) {
            return false;
        }
        if (this === viewport) {
            return true;
        }
        return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(viewport.projectionMatrix, this.projectionMatrix) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(viewport.viewMatrix, this.viewMatrix);
    // TODO - check distance scales?
    }
    /**
     * Projects xyz (possibly latitude and longitude) to pixel coordinates in window
     * using viewport projection parameters
     * - [longitude, latitude] to [x, y]
     * - [longitude, latitude, Z] => [x, y, z]
     * Note: By default, returns top-left coordinates for canvas/SVG type render
     *
     * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether projected coords are top left
     * @return {Array} - [x, y] or [x, y, z] in top left coords
     */ project(xyz, { topLeft = true } = {}) {
        const worldPosition = this.projectPosition(xyz);
        const coord = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["worldToPixels"])(worldPosition, this.pixelProjectionMatrix);
        const [x, y] = coord;
        const y2 = topLeft ? y : this.height - y;
        return xyz.length === 2 ? [
            x,
            y2
        ] : [
            x,
            y2,
            coord[2]
        ];
    }
    /**
     * Unproject pixel coordinates on screen onto world coordinates,
     * (possibly [lon, lat]) on map.
     * - [x, y] => [lng, lat]
     * - [x, y, z] => [lng, lat, Z]
     * @param {Array} xyz -
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether origin is top left
     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
     */ unproject(xyz, { topLeft = true, targetZ } = {}) {
        const [x, y, z] = xyz;
        const y2 = topLeft ? y : this.height - y;
        const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];
        const coord = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pixelsToWorld"])([
            x,
            y2,
            z
        ], this.pixelUnprojectionMatrix, targetZWorld);
        const [X, Y, Z] = this.unprojectPosition(coord);
        if (Number.isFinite(z)) {
            return [
                X,
                Y,
                Z
            ];
        }
        return Number.isFinite(targetZ) ? [
            X,
            Y,
            targetZ
        ] : [
            X,
            Y
        ];
    }
    // NON_LINEAR PROJECTION HOOKS
    // Used for web meractor projection
    projectPosition(xyz) {
        const [X, Y] = this.projectFlat(xyz);
        const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];
        return [
            X,
            Y,
            Z
        ];
    }
    unprojectPosition(xyz) {
        const [X, Y] = this.unprojectFlat(xyz);
        const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];
        return [
            X,
            Y,
            Z
        ];
    }
    /**
     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.
     * Performs the nonlinear part of the web mercator projection.
     * Remaining projection is done with 4x4 matrices which also handles
     * perspective.
     * @param {Array} lngLat - [lng, lat] coordinates
     *   Specifies a point on the sphere to project onto the map.
     * @return {Array} [x,y] coordinates.
     */ projectFlat(xyz) {
        if (this.isGeospatial) {
            // Shader clamps latitude to +-89.9, see /shaderlib/project/project.glsl.js
            // lngLatToWorld([0, -89.9])[1] = -317.9934163758329
            // lngLatToWorld([0, 89.9])[1] = 829.9934163758271
            const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lngLatToWorld"])(xyz);
            result[1] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])(result[1], -318, 830);
            return result;
        }
        return xyz;
    }
    /**
     * Unproject world point [x,y] on map onto {lat, lon} on sphere
     * @param {object|Vector} xy - object with {x,y} members
     *  representing point on projected map plane
     * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.
     *   Has toArray method if you need a GeoJSON Array.
     *   Per cartographic tradition, lat and lon are specified as degrees.
     */ unprojectFlat(xyz) {
        if (this.isGeospatial) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["worldToLngLat"])(xyz);
        }
        return xyz;
    }
    /**
     * Get bounds of the current viewport
     * @return {Array} - [minX, minY, maxX, maxY]
     */ getBounds(options = {}) {
        const unprojectOption = {
            targetZ: options.z || 0
        };
        const topLeft = this.unproject([
            0,
            0
        ], unprojectOption);
        const topRight = this.unproject([
            this.width,
            0
        ], unprojectOption);
        const bottomLeft = this.unproject([
            0,
            this.height
        ], unprojectOption);
        const bottomRight = this.unproject([
            this.width,
            this.height
        ], unprojectOption);
        return [
            Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),
            Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])
        ];
    }
    getDistanceScales(coordinateOrigin) {
        if (coordinateOrigin && this.isGeospatial) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDistanceScales"])({
                longitude: coordinateOrigin[0],
                latitude: coordinateOrigin[1],
                highPrecision: true
            });
        }
        return this.distanceScales;
    }
    containsPixel({ x, y, width = 1, height = 1 }) {
        return x < this.x + this.width && this.x < x + width && y < this.y + this.height && this.y < y + height;
    }
    // Extract frustum planes in common space
    getFrustumPlanes() {
        if (this._frustumPlanes.near) {
            // @ts-ignore
            return this._frustumPlanes;
        }
        Object.assign(this._frustumPlanes, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFrustumPlanes"])(this.viewProjectionMatrix));
        // @ts-ignore
        return this._frustumPlanes;
    }
    // EXPERIMENTAL METHODS
    /**
     * Needed by panning and linear transition
     * Pan the viewport to place a given world coordinate at screen point [x, y]
     *
     * @param {Array} coords - world coordinates
     * @param {Array} pixel - [x,y] coordinates on screen
     * @return {Object} props of the new viewport
     */ panByPosition(coords, pixel) {
        return null;
    }
    // INTERNAL METHODS
    /* eslint-disable complexity, max-statements */ _initProps(opts) {
        const longitude = opts.longitude;
        const latitude = opts.latitude;
        if (this.isGeospatial) {
            if (!Number.isFinite(opts.zoom)) {
                this.zoom = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getMeterZoom"])({
                    latitude
                }) + Math.log2(this.focalDistance);
            }
            this.distanceScales = opts.distanceScales || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDistanceScales"])({
                latitude,
                longitude
            });
        }
        const scale = Math.pow(2, this.zoom);
        this.scale = scale;
        const { position, modelMatrix } = opts;
        let meterOffset = ZERO_VECTOR;
        if (position) {
            meterOffset = modelMatrix ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"](modelMatrix).transformAsVector(position, []) : position;
        }
        if (this.isGeospatial) {
            // Determine camera center in common space
            const center = this.projectPosition([
                longitude,
                latitude,
                0
            ]);
            this.center = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"](meterOffset)// Convert to pixels in current zoom
            .scale(this.distanceScales.unitsPerMeter).add(center);
        } else {
            this.center = this.projectPosition(meterOffset);
        }
    }
    /* eslint-enable complexity, max-statements */ _initMatrices(opts) {
        const { // View matrix
        viewMatrix = IDENTITY, // Projection matrix
        projectionMatrix = null, // Projection matrix parameters, used if projectionMatrix not supplied
        orthographic = false, fovyRadians, fovy = 75, near = 0.1, far = 1000, padding = null, focalDistance = 1 } = opts;
        this.viewMatrixUncentered = viewMatrix;
        // Make a centered version of the matrix for projection modes without an offset
        this.viewMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"]()// Apply the uncentered view matrix
        .multiplyRight(viewMatrix)// And center it
        .translate(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"](this.center).negate());
        this.projectionMatrix = projectionMatrix || createProjectionMatrix({
            width: this.width,
            height: this.height,
            orthographic,
            fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,
            focalDistance,
            padding,
            near,
            far
        });
        // Note: As usual, matrix operations should be applied in "reverse" order
        // since vectors will be multiplied in from the right during transformation
        const vpm = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMat4"])();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].multiply(vpm, vpm, this.projectionMatrix);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].multiply(vpm, vpm, this.viewMatrix);
        this.viewProjectionMatrix = vpm;
        // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);
        // Calculate inverse view matrix
        this.viewMatrixInverse = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].invert([], this.viewMatrix) || this.viewMatrix;
        // Decompose camera parameters
        this.cameraPosition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getCameraPosition"])(this.viewMatrixInverse);
        /*
         * Builds matrices that converts preprojected lngLats to screen pixels
         * and vice versa.
         * Note: Currently returns bottom-left coordinates!
         * Note: Starts with the GL projection matrix and adds steps to the
         *       scale and translate that matrix onto the window.
         * Note: WebGL controls clip space to screen projection with gl.viewport
         *       and does not need this step.
         */ // matrix for conversion from world location to screen (pixel) coordinates
        const viewportMatrix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMat4"])(); // matrix from NDC to viewport.
        const pixelProjectionMatrix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMat4"])(); // matrix from world space to viewport.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].scale(viewportMatrix, viewportMatrix, [
            this.width / 2,
            -this.height / 2,
            1
        ]);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].translate(viewportMatrix, viewportMatrix, [
            1,
            -1,
            0
        ]);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);
        this.pixelProjectionMatrix = pixelProjectionMatrix;
        this.pixelUnprojectionMatrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$mat4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__mat4$3e$__["mat4"].invert((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMat4"])(), this.pixelProjectionMatrix);
        if (!this.pixelUnprojectionMatrix) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn('Pixel project matrix not invertible')();
        // throw new Error('Pixel project matrix not invertible');
        }
    }
}
Viewport.displayName = 'Viewport';
const __TURBOPACK__default__export__ = Viewport;
 //# sourceMappingURL=viewport.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// View and Projection Matrix calculations for mapbox-js style
// map view properties
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/lib/common.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/matrix4.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec2$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec2$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/gl-matrix/vec2.js [app-ssr] (ecmascript) <export * as vec2>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$get$2d$bounds$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/get-bounds.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$fit$2d$bounds$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/fit-bounds.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/viewports/viewport.js [app-ssr] (ecmascript)");
;
;
;
/**
 * Manages transformations to/from WGS84 coordinates using the Web Mercator Projection.
 */ class WebMercatorViewport extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /* eslint-disable complexity, max-statements */ constructor(opts = {}){
        const { latitude = 0, longitude = 0, zoom = 0, pitch = 0, bearing = 0, nearZMultiplier = 0.1, farZMultiplier = 1.01, nearZ, farZ, orthographic = false, projectionMatrix, repeat = false, worldOffset = 0, position, padding, // backward compatibility
        // TODO: remove in v9
        legacyMeterSizes = false } = opts;
        let { width, height, altitude = 1.5 } = opts;
        const scale = Math.pow(2, zoom);
        // Silently allow apps to send in 0,0 to facilitate isomorphic render etc
        width = width || 1;
        height = height || 1;
        let fovy;
        let projectionParameters = null;
        if (projectionMatrix) {
            altitude = projectionMatrix[5] / 2;
            fovy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["altitudeToFovy"])(altitude);
        } else {
            if (opts.fovy) {
                fovy = opts.fovy;
                altitude = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fovyToAltitude"])(fovy);
            } else {
                fovy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["altitudeToFovy"])(altitude);
            }
            let offset;
            if (padding) {
                const { top = 0, bottom = 0 } = padding;
                offset = [
                    0,
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])((top + height - bottom) / 2, 0, height) - height / 2
                ];
            }
            projectionParameters = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getProjectionParameters"])({
                width,
                height,
                scale,
                center: position && [
                    0,
                    0,
                    position[2] * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unitsPerMeter"])(latitude)
                ],
                offset,
                pitch,
                fovy,
                nearZMultiplier,
                farZMultiplier
            });
            if (Number.isFinite(nearZ)) {
                projectionParameters.near = nearZ;
            }
            if (Number.isFinite(farZ)) {
                projectionParameters.far = farZ;
            }
        }
        // The uncentered matrix allows us two move the center addition to the
        // shader (cheap) which gives a coordinate system that has its center in
        // the layer's center position. This makes rotations and other modelMatrx
        // transforms much more useful.
        let viewMatrixUncentered = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getViewMatrix"])({
            height,
            pitch,
            bearing,
            scale,
            altitude
        });
        if (worldOffset) {
            const viewOffset = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"]().translate([
                512 * worldOffset,
                0,
                0
            ]);
            viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);
        }
        super({
            ...opts,
            // x, y,
            width,
            height,
            // view matrix
            viewMatrix: viewMatrixUncentered,
            longitude,
            latitude,
            zoom,
            // projection matrix parameters
            ...projectionParameters,
            fovy,
            focalDistance: altitude
        });
        // Save parameters
        this.latitude = latitude;
        this.longitude = longitude;
        this.zoom = zoom;
        this.pitch = pitch;
        this.bearing = bearing;
        this.altitude = altitude;
        this.fovy = fovy;
        this.orthographic = orthographic;
        this._subViewports = repeat ? [] : null;
        this._pseudoMeters = legacyMeterSizes;
        Object.freeze(this);
    }
    /* eslint-enable complexity, max-statements */ get subViewports() {
        if (this._subViewports && !this._subViewports.length) {
            // Cache sub viewports so that we only calculate them once
            const bounds = this.getBounds();
            const minOffset = Math.floor((bounds[0] + 180) / 360);
            const maxOffset = Math.ceil((bounds[2] - 180) / 360);
            for(let x = minOffset; x <= maxOffset; x++){
                const offsetViewport = x ? new WebMercatorViewport({
                    ...this,
                    worldOffset: x
                }) : this;
                this._subViewports.push(offsetViewport);
            }
        }
        return this._subViewports;
    }
    projectPosition(xyz) {
        if (this._pseudoMeters) {
            // Backward compatibility
            return super.projectPosition(xyz);
        }
        const [X, Y] = this.projectFlat(xyz);
        const Z = (xyz[2] || 0) * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unitsPerMeter"])(xyz[1]);
        return [
            X,
            Y,
            Z
        ];
    }
    unprojectPosition(xyz) {
        if (this._pseudoMeters) {
            // Backward compatibility
            return super.unprojectPosition(xyz);
        }
        const [X, Y] = this.unprojectFlat(xyz);
        const Z = (xyz[2] || 0) / (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unitsPerMeter"])(Y);
        return [
            X,
            Y,
            Z
        ];
    }
    /**
     * Add a meter delta to a base lnglat coordinate, returning a new lnglat array
     *
     * Note: Uses simple linear approximation around the viewport center
     * Error increases with size of offset (roughly 1% per 100km)
     *
     * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate
     * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas
     * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas
     */ addMetersToLngLat(lngLatZ, xyz) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addMetersToLngLat"])(lngLatZ, xyz);
    }
    panByPosition(coords, pixel) {
        const fromLocation = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pixelsToWorld"])(pixel, this.pixelUnprojectionMatrix);
        const toLocation = this.projectFlat(coords);
        const translate = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec2$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec2$3e$__["vec2"].add([], toLocation, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec2$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec2$3e$__["vec2"].negate([], fromLocation));
        const newCenter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec2$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec2$3e$__["vec2"].add([], this.center, translate);
        const [longitude, latitude] = this.unprojectFlat(newCenter);
        return {
            longitude,
            latitude
        };
    }
    getBounds(options = {}) {
        // @ts-ignore
        const corners = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$get$2d$bounds$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBounds"])(this, options.z || 0);
        return [
            Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
            Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),
            Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
            Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])
        ];
    }
    /**
     * Returns a new viewport that fit around the given rectangle.
     * Only supports non-perspective mode.
     */ fitBounds(/** [[lon, lat], [lon, lat]] */ bounds, options = {}) {
        const { width, height } = this;
        const { longitude, latitude, zoom } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$fit$2d$bounds$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fitBounds"])({
            width,
            height,
            bounds,
            ...options
        });
        return new WebMercatorViewport({
            width,
            height,
            longitude,
            latitude,
            zoom
        });
    }
}
WebMercatorViewport.displayName = 'WebMercatorViewport';
const __TURBOPACK__default__export__ = WebMercatorViewport;
 //# sourceMappingURL=web-mercator-viewport.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/project/project-functions.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Projection utils
 * TODO: move to Viewport class?
 */ __turbopack_esm__({
    "getWorldPosition": (()=>getWorldPosition),
    "projectPosition": (()=>projectPosition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$web$2d$mercator$2d$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec4$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/gl-matrix/vec4.js [app-ssr] (ecmascript) <export * as vec4>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$viewport$2d$uniforms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec3$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/gl-matrix/vec3.js [app-ssr] (ecmascript) <export * as vec3>");
;
;
;
;
;
const DEFAULT_COORDINATE_ORIGIN = [
    0,
    0,
    0
];
// In project.glsl, offset modes calculate z differently from LNG_LAT mode.
// offset modes apply the y adjustment (unitsPerMeter2) when projecting z
// LNG_LAT mode only use the linear scale.
function lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {
    const p = viewport.projectPosition(lngLatZ);
    // TODO - avoid using instanceof
    if (offsetMode && viewport instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$web$2d$mercator$2d$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]) {
        const [longitude, latitude, z = 0] = lngLatZ;
        const distanceScales = viewport.getDistanceScales([
            longitude,
            latitude
        ]);
        p[2] = z * distanceScales.unitsPerMeter[2];
    }
    return p;
}
function normalizeParameters(opts) {
    const { viewport, modelMatrix, coordinateOrigin } = opts;
    let { coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin } = opts;
    if (coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].DEFAULT) {
        coordinateSystem = viewport.isGeospatial ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].CARTESIAN;
    }
    if (fromCoordinateSystem === undefined) {
        fromCoordinateSystem = coordinateSystem;
    }
    if (fromCoordinateOrigin === undefined) {
        fromCoordinateOrigin = coordinateOrigin;
    }
    return {
        viewport,
        coordinateSystem,
        coordinateOrigin,
        modelMatrix,
        fromCoordinateSystem,
        fromCoordinateOrigin
    };
}
function getWorldPosition(position, { viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode }) {
    let [x, y, z = 0] = position;
    if (modelMatrix) {
        [x, y, z] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec4$3e$__["vec4"].transformMat4([], [
            x,
            y,
            z,
            1.0
        ], modelMatrix);
    }
    switch(coordinateSystem){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT:
            return lngLatZToWorldPosition([
                x,
                y,
                z
            ], viewport, offsetMode);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT_OFFSETS:
            return lngLatZToWorldPosition([
                x + coordinateOrigin[0],
                y + coordinateOrigin[1],
                z + (coordinateOrigin[2] || 0)
            ], viewport, offsetMode);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].METER_OFFSETS:
            return lngLatZToWorldPosition((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addMetersToLngLat"])(coordinateOrigin, [
                x,
                y,
                z
            ]), viewport, offsetMode);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].CARTESIAN:
        default:
            return viewport.isGeospatial ? [
                x + coordinateOrigin[0],
                y + coordinateOrigin[1],
                z + coordinateOrigin[2]
            ] : viewport.projectPosition([
                x,
                y,
                z
            ]);
    }
}
function projectPosition(position, params) {
    const { viewport, coordinateSystem, coordinateOrigin, modelMatrix, fromCoordinateSystem, fromCoordinateOrigin } = normalizeParameters(params);
    const { autoOffset = true } = params;
    const { geospatialOrigin = DEFAULT_COORDINATE_ORIGIN, shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN, offsetMode = false } = autoOffset ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$viewport$2d$uniforms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOffsetOrigin"])(viewport, coordinateSystem, coordinateOrigin) : {};
    const worldPosition = getWorldPosition(position, {
        viewport,
        modelMatrix,
        coordinateSystem: fromCoordinateSystem,
        coordinateOrigin: fromCoordinateOrigin,
        offsetMode
    });
    if (offsetMode) {
        const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$gl$2d$matrix$2f$vec3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__vec3$3e$__["vec3"].sub(worldPosition, worldPosition, positionCommonSpace);
    }
    return worldPosition;
} //# sourceMappingURL=project-functions.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/count.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "count": (()=>count)
});
const ERR_NOT_OBJECT = 'count(): argument not an object';
const ERR_NOT_CONTAINER = 'count(): argument not a container';
function count(container) {
    if (!isObject(container)) {
        throw new Error(ERR_NOT_OBJECT);
    }
    // Check if ES6 collection "count" function is available
    if (typeof container.count === 'function') {
        return container.count();
    }
    // Check if ES6 collection "size" attribute is set
    if (Number.isFinite(container.size)) {
        return container.size;
    }
    // Check if array length attribute is set
    // Note: checking this last since some ES6 collections (Immutable.js)
    // emit profuse warnings when trying to access `length` attribute
    if (Number.isFinite(container.length)) {
        return container.length;
    }
    // Note that getting the count of an object is O(N)
    if (isPlainObject(container)) {
        return Object.keys(container).length;
    }
    throw new Error(ERR_NOT_CONTAINER);
}
/**
 * Checks if argument is a plain object (not a class or array etc)
 * @param {*} value - JavaScript value to be tested
 * @return {Boolean} - true if argument is a plain JavaScript object
 */ function isPlainObject(value) {
    return value !== null && typeof value === 'object' && value.constructor === Object;
}
/**
 * Checks if argument is an indexable object (not a primitive value, nor null)
 * @param {*} value - JavaScript value to be tested
 * @return {Boolean} - true if argument is a JavaScript object
 */ function isObject(value) {
    return value !== null && typeof value === 'object';
} //# sourceMappingURL=count.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/shader.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Merge two luma.gl shader descriptors
__turbopack_esm__({
    "mergeShaders": (()=>mergeShaders)
});
function mergeShaders(target, source) {
    if (!source) {
        return target;
    }
    const result = {
        ...target,
        ...source
    };
    if ('defines' in source) {
        result.defines = {
            ...target.defines,
            ...source.defines
        };
    }
    if ('modules' in source) {
        result.modules = (target.modules || []).concat(source.modules);
        // Hack: prject32 and project64 cannot co-exist
        if (source.modules.some((module)=>module.name === 'project64')) {
            const index = result.modules.findIndex((module)=>module.name === 'project32');
            if (index >= 0) {
                result.modules.splice(index, 1);
            }
        }
    }
    if ('inject' in source) {
        if (!target.inject) {
            result.inject = source.inject;
        } else {
            const mergedInjection = {
                ...target.inject
            };
            for(const key in source.inject){
                mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];
            }
            result.inject = mergedInjection;
        }
    }
    return result;
} //# sourceMappingURL=shader.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/debug/loggers.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "getLoggers": (()=>getLoggers)
});
const logState = {
    attributeUpdateStart: -1,
    attributeManagerUpdateStart: -1,
    attributeUpdateMessages: []
};
const LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact
const LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf
const LOG_LEVEL_UPDATE_DETAIL = 3;
const LOG_LEVEL_INFO = 4;
const LOG_LEVEL_DRAW = 2;
const getLoggers = (log)=>({
        /* Layer events */ 'layer.changeFlag': (layer, key, flags)=>{
            log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();
        },
        'layer.initialize': (layer)=>{
            log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();
        },
        'layer.update': (layer, needsUpdate)=>{
            if (needsUpdate) {
                const flags = layer.getChangeFlags();
                log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layer} because: ${Object.keys(flags).filter((key)=>flags[key]).join(', ')}`)();
            } else {
                log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();
            }
        },
        'layer.matched': (layer, changed)=>{
            if (changed) {
                log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();
            }
        },
        'layer.finalize': (layer)=>{
            log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();
        },
        /* CompositeLayer events */ 'compositeLayer.renderLayers': (layer, updated, subLayers)=>{
            if (updated) {
                log.log(LOG_LEVEL_MINOR_UPDATE, `Composite layer rendered new subLayers ${layer}`, subLayers)();
            } else {
                log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();
            }
        },
        /* LayerManager events */ 'layerManager.setLayers': (layerManager, updated, layers)=>{
            if (updated) {
                log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();
            }
        },
        'layerManager.activateViewport': (layerManager, viewport)=>{
            log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();
        },
        /* AttributeManager events */ 'attributeManager.invalidate': (attributeManager, trigger, attributeNames)=>{
            log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}` : `invalidated all attributes for ${attributeManager.id}`)();
        },
        'attributeManager.updateStart': (attributeManager)=>{
            logState.attributeUpdateMessages.length = 0;
            logState.attributeManagerUpdateStart = Date.now();
        },
        'attributeManager.updateEnd': (attributeManager, numInstances)=>{
            const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);
            log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`)();
            for (const updateMessage of logState.attributeUpdateMessages){
                log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();
            }
            log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();
        },
        /* Attribute events */ 'attribute.updateStart': (attribute)=>{
            logState.attributeUpdateStart = Date.now();
        },
        'attribute.allocate': (attribute, numInstances)=>{
            const message = `${attribute.id} allocated ${numInstances}`;
            logState.attributeUpdateMessages.push(message);
        },
        'attribute.updateEnd': (attribute, numInstances)=>{
            const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);
            const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;
            logState.attributeUpdateMessages.push(message);
        },
        /* Render events */ 'deckRenderer.renderLayers': (deckRenderer, renderStats, opts)=>{
            const { pass, redrawReason, stats } = opts;
            for (const status of renderStats){
                const { totalCount, visibleCount, compositeCount, pickableCount } = status;
                const primitiveCount = totalCount - compositeCount;
                const hiddenCount = primitiveCount - visibleCount;
                log.log(LOG_LEVEL_DRAW, `RENDER #${deckRenderer.renderCount} \
  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \
  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`)();
                if (stats) {
                    stats.get('Redraw Layers').add(visibleCount);
                }
            }
        }
    }); //# sourceMappingURL=loggers.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/debug/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>debug),
    "register": (()=>register)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$loggers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/debug/loggers.js [app-ssr] (ecmascript)");
;
;
/* debug utility */ let loggers = {};
// Conditionally load default loggers in development mode
// eslint-disable-next-line
if ("TURBOPACK compile-time truthy", 1) {
    loggers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$loggers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getLoggers"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
}
function register(handlers) {
    loggers = handlers;
}
function debug(eventType, arg1, arg2, arg3) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].level > 0 && loggers[eventType]) {
        // Not using rest parameters to defeat perf hit from array construction
        loggers[eventType].call(null, arg1, arg2, arg3);
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/iterable-utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "createIterable": (()=>createIterable),
    "getAccessorFromBuffer": (()=>getAccessorFromBuffer),
    "isAsyncIterable": (()=>isAsyncIterable)
});
const EMPTY_ARRAY = [];
const placeholderArray = [];
function createIterable(data, startRow = 0, endRow = Infinity) {
    let iterable = EMPTY_ARRAY;
    const objectInfo = {
        index: -1,
        data,
        // visitor can optionally utilize this to avoid constructing a new array for every object
        target: []
    };
    if (!data) {
        iterable = EMPTY_ARRAY;
    } else if (typeof data[Symbol.iterator] === 'function') {
        // data is already an iterable
        iterable = data;
    } else if (data.length > 0) {
        placeholderArray.length = data.length;
        iterable = placeholderArray;
    }
    if (startRow > 0 || Number.isFinite(endRow)) {
        iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);
        objectInfo.index = startRow - 1;
    }
    return {
        iterable,
        objectInfo
    };
}
function isAsyncIterable(data) {
    return data && data[Symbol.asyncIterator];
}
function getAccessorFromBuffer(typedArray, options) {
    const { size, stride, offset, startIndices, nested } = options;
    const bytesPerElement = typedArray.BYTES_PER_ELEMENT;
    const elementStride = stride ? stride / bytesPerElement : size;
    const elementOffset = offset ? offset / bytesPerElement : 0;
    const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);
    return (_, { index, target })=>{
        if (!startIndices) {
            const sourceIndex = index * elementStride + elementOffset;
            for(let j = 0; j < size; j++){
                target[j] = typedArray[sourceIndex + j];
            }
            return target;
        }
        const startIndex = startIndices[index];
        const endIndex = startIndices[index + 1] || vertexCount;
        let result;
        if (nested) {
            result = new Array(endIndex - startIndex);
            for(let i = startIndex; i < endIndex; i++){
                const sourceIndex = i * elementStride + elementOffset;
                target = new Array(size);
                for(let j = 0; j < size; j++){
                    target[j] = typedArray[sourceIndex + j];
                }
                result[i - startIndex] = target;
            }
        } else if (elementStride === size) {
            result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);
        } else {
            result = new typedArray.constructor((endIndex - startIndex) * size);
            let targetIndex = 0;
            for(let i = startIndex; i < endIndex; i++){
                const sourceIndex = i * elementStride + elementOffset;
                for(let j = 0; j < size; j++){
                    result[targetIndex++] = typedArray[sourceIndex + j];
                }
            }
        }
        return result;
    };
} //# sourceMappingURL=iterable-utils.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lifecycle/component-state.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>ComponentState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/iterable-utils.js [app-ssr] (ecmascript)");
;
;
const EMPTY_PROPS = Object.freeze({});
class ComponentState {
    constructor(component){
        this.component = component;
        this.asyncProps = {}; // Prop values that the layer sees
        this.onAsyncPropUpdated = ()=>{};
        this.oldProps = null; // Last props before update
        this.oldAsyncProps = null; // Last props before update, with async values copied.
    }
    finalize() {
        for(const propName in this.asyncProps){
            const asyncProp = this.asyncProps[propName];
            if (asyncProp && asyncProp.type && asyncProp.type.release) {
                // Release any resources created by transforms
                asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);
            }
        }
        this.asyncProps = {};
        this.component = null;
        this.resetOldProps();
    }
    /* Layer-facing props API */ getOldProps() {
        return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;
    }
    resetOldProps() {
        this.oldAsyncProps = null;
        this.oldProps = this.component ? this.component.props : null;
    }
    // Checks if a prop is overridden
    hasAsyncProp(propName) {
        return propName in this.asyncProps;
    }
    // Returns value of an overriden prop
    getAsyncProp(propName) {
        const asyncProp = this.asyncProps[propName];
        return asyncProp && asyncProp.resolvedValue;
    }
    isAsyncPropLoading(propName) {
        if (propName) {
            const asyncProp = this.asyncProps[propName];
            return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);
        }
        for(const key in this.asyncProps){
            if (this.isAsyncPropLoading(key)) {
                return true;
            }
        }
        return false;
    }
    // Without changing the original prop value, swap out the data resolution under the hood
    reloadAsyncProp(propName, value) {
        this._watchPromise(propName, Promise.resolve(value));
    }
    // Updates all async/overridden props (when new props come in)
    // Checks if urls have changed, starts loading, or removes override
    setAsyncProps(props) {
        this.component = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COMPONENT_SYMBOL"]] || this.component;
        // NOTE: prop param and default values are only support for testing
        const resolvedValues = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]] || {};
        const originalValues = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_ORIGINAL_SYMBOL"]] || props;
        const defaultValues = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_DEFAULTS_SYMBOL"]] || {};
        // TODO - use async props from the layer's prop types
        for(const propName in resolvedValues){
            const value = resolvedValues[propName];
            this._createAsyncPropData(propName, defaultValues[propName]);
            this._updateAsyncProp(propName, value);
            // Use transformed value
            resolvedValues[propName] = this.getAsyncProp(propName);
        }
        for(const propName in originalValues){
            const value = originalValues[propName];
            // Makes sure a record exists for this prop
            this._createAsyncPropData(propName, defaultValues[propName]);
            this._updateAsyncProp(propName, value);
        }
    }
    /* Placeholder methods for subclassing */ _fetch(propName, url) {
        return null;
    }
    _onResolve(propName, value) {}
    _onError(propName, error) {}
    // Intercept strings (URLs) and Promises and activates loading and prop rewriting
    _updateAsyncProp(propName, value) {
        if (!this._didAsyncInputValueChange(propName, value)) {
            return;
        }
        // interpret value string as url and start a new load tracked by a promise
        if (typeof value === 'string') {
            value = this._fetch(propName, value);
        }
        // interprets promise and track the "loading"
        if (value instanceof Promise) {
            this._watchPromise(propName, value);
            return;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAsyncIterable"])(value)) {
            this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises
            return;
        }
        // else, normal, non-async value. Just store value for now
        this._setPropValue(propName, value);
    }
    // Whenever async props are changing, we need to make a copy of oldProps
    // otherwise the prop rewriting will affect the value both in props and oldProps.
    // While the copy is relatively expensive, this only happens on load completion.
    _freezeAsyncOldProps() {
        if (!this.oldAsyncProps && this.oldProps) {
            // 1. inherit all synchronous props from oldProps
            // 2. reconfigure the async prop descriptors to fixed values
            this.oldAsyncProps = Object.create(this.oldProps);
            for(const propName in this.asyncProps){
                Object.defineProperty(this.oldAsyncProps, propName, {
                    enumerable: true,
                    value: this.oldProps[propName]
                });
            }
        }
    }
    // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)
    _didAsyncInputValueChange(propName, value) {
        // @ts-ignore
        const asyncProp = this.asyncProps[propName];
        if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {
            return false;
        }
        asyncProp.lastValue = value;
        return true;
    }
    // Set normal, non-async value
    _setPropValue(propName, value) {
        // Save the current value before overwriting so that diffProps can access both
        this._freezeAsyncOldProps();
        const asyncProp = this.asyncProps[propName];
        if (asyncProp) {
            value = this._postProcessValue(asyncProp, value);
            asyncProp.resolvedValue = value;
            asyncProp.pendingLoadCount++;
            asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;
        }
    }
    // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously
    _setAsyncPropValue(propName, value, loadCount) {
        // Only update if loadCount is larger or equal to resolvedLoadCount
        // otherwise a more recent load has already completed
        const asyncProp = this.asyncProps[propName];
        if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {
            // Save the current value before overwriting so that diffProps can access both
            this._freezeAsyncOldProps();
            asyncProp.resolvedValue = value;
            asyncProp.resolvedLoadCount = loadCount;
            // Call callback to inform listener
            this.onAsyncPropUpdated(propName, value);
        }
    }
    // Tracks a promise, sets the prop when loaded, handles load count
    _watchPromise(propName, promise) {
        const asyncProp = this.asyncProps[propName];
        if (asyncProp) {
            asyncProp.pendingLoadCount++;
            const loadCount = asyncProp.pendingLoadCount;
            promise.then((data)=>{
                if (!this.component) {
                    // This component state has been finalized
                    return;
                }
                data = this._postProcessValue(asyncProp, data);
                this._setAsyncPropValue(propName, data, loadCount);
                this._onResolve(propName, data);
            }).catch((error)=>{
                this._onError(propName, error);
            });
        }
    }
    async _resolveAsyncIterable(propName, iterable) {
        if (propName !== 'data') {
            // we only support data as async iterable
            this._setPropValue(propName, iterable);
            return;
        }
        const asyncProp = this.asyncProps[propName];
        if (!asyncProp) {
            return;
        }
        asyncProp.pendingLoadCount++;
        const loadCount = asyncProp.pendingLoadCount;
        let data = [];
        let count = 0;
        for await (const chunk of iterable){
            if (!this.component) {
                // This component state has been finalized
                return;
            }
            // @ts-expect-error (2339) dataTransform is not decared in base component props
            const { dataTransform } = this.component.props;
            if (dataTransform) {
                data = dataTransform(chunk, data);
            } else {
                data = data.concat(chunk);
            }
            // Used by the default _dataDiff function
            Object.defineProperty(data, '__diff', {
                enumerable: false,
                value: [
                    {
                        startRow: count,
                        endRow: data.length
                    }
                ]
            });
            count = data.length;
            this._setAsyncPropValue(propName, data, loadCount);
        }
        this._onResolve(propName, data);
    }
    // Give the app a chance to post process the loaded data
    _postProcessValue(asyncProp, value) {
        const propType = asyncProp.type;
        if (propType && this.component) {
            if (propType.release) {
                propType.release(asyncProp.resolvedValue, propType, this.component);
            }
            if (propType.transform) {
                return propType.transform(value, propType, this.component);
            }
        }
        return value;
    }
    // Creating an asyncProp record if needed
    _createAsyncPropData(propName, defaultValue) {
        const asyncProp = this.asyncProps[propName];
        if (!asyncProp) {
            const propTypes = this.component && this.component.props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]];
            // assert(defaultValue !== undefined);
            this.asyncProps[propName] = {
                type: propTypes && propTypes[propName],
                lastValue: null,
                resolvedValue: defaultValue,
                pendingLoadCount: 0,
                resolvedLoadCount: 0
            };
        }
    }
} //# sourceMappingURL=component-state.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/layer-state.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// deck.gl, MIT license
__turbopack_esm__({
    "default": (()=>LayerState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$component$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/component-state.js [app-ssr] (ecmascript)");
;
class LayerState extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$component$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor({ attributeManager, layer }){
        super(layer);
        this.attributeManager = attributeManager;
        this.needsRedraw = true;
        this.needsUpdate = true;
        this.subLayers = null;
        this.usesPickingColorCache = false;
    }
    get layer() {
        return this.component;
    }
    /* Override base Component methods with Layer-specific handling */ _fetch(propName, url) {
        const layer = this.layer;
        const fetch = layer?.props.fetch;
        if (fetch) {
            return fetch(url, {
                propName,
                layer
            });
        }
        return super._fetch(propName, url);
    }
    _onResolve(propName, value) {
        const layer = this.layer;
        if (layer) {
            const onDataLoad = layer.props.onDataLoad;
            if (propName === 'data' && onDataLoad) {
                onDataLoad(value, {
                    propName,
                    layer
                });
            }
        }
    }
    _onError(propName, error) {
        const layer = this.layer;
        if (layer) {
            layer.raiseError(error, `loading ${propName} of ${this.layer}`);
        }
    }
} //# sourceMappingURL=layer-state.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/transition.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>Transition)
});
class Transition {
    /**
     * @params timeline {Timeline}
     */ constructor(timeline){
        this._inProgress = false;
        this._handle = null;
        this.time = 0;
        // @ts-expect-error
        this.settings = {
            duration: 0
        };
        this._timeline = timeline;
    }
    /* Public API */ get inProgress() {
        return this._inProgress;
    }
    /**
     * (re)start this transition.
     * @params props {object} - optional overriding props. see constructor
     */ start(settings) {
        this.cancel();
        // @ts-expect-error
        this.settings = settings;
        this._inProgress = true;
        this.settings.onStart?.(this);
    }
    /**
     * end this transition if it is in progress.
     */ end() {
        if (this._inProgress) {
            this._timeline.removeChannel(this._handle);
            this._handle = null;
            this._inProgress = false;
            this.settings.onEnd?.(this);
        }
    }
    /**
     * cancel this transition if it is in progress.
     */ cancel() {
        if (this._inProgress) {
            this.settings.onInterrupt?.(this);
            this._timeline.removeChannel(this._handle);
            this._handle = null;
            this._inProgress = false;
        }
    }
    /**
     * update this transition. Returns `true` if updated.
     */ update() {
        if (!this._inProgress) {
            return false;
        }
        // It is important to initialize the handle during `update` instead of `start`.
        // The CPU time that the `start` frame takes should not be counted towards the duration.
        // On the other hand, `update` always happens during a render cycle. The clock starts when the
        // transition is rendered for the first time.
        if (this._handle === null) {
            const { _timeline: timeline, settings } = this;
            this._handle = timeline.addChannel({
                delay: timeline.getTime(),
                duration: settings.duration
            });
        }
        this.time = this._timeline.getTime(this._handle);
        // Call subclass method
        this._onUpdate();
        // Call user callback
        this.settings.onUpdate?.(this);
        // This only works if `settings.duration` is set
        // Spring transition must call `end` manually
        if (this._timeline.isFinished(this._handle)) {
            this.end();
        }
        return true;
    }
    /* Private API */ _onUpdate() {
    // for subclass override
    }
} //# sourceMappingURL=transition.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/cpu-interpolation-transition.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>CPUInterpolationTransition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/lib/common.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/transition.js [app-ssr] (ecmascript)");
;
;
class CPUInterpolationTransition extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    get value() {
        return this._value;
    }
    _onUpdate() {
        const { time, settings: { fromValue, toValue, duration, easing } } = this;
        const t = easing(time / duration);
        this._value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lerp"])(fromValue, toValue, t);
    }
} //# sourceMappingURL=cpu-interpolation-transition.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/cpu-spring-transition.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>CPUSpringTransition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/transition.js [app-ssr] (ecmascript)");
;
const EPSILON = 1e-5;
/*
 * Calculate the next value in the spring transition
 * @param prev {Number} - previous value
 * @param cur {Number} - current value
 * @param dest {Number} - destination value
 * @param damping {Number}
 * @param stiffness {Number}
 */ function updateSpringElement(prev, cur, dest, damping, stiffness) {
    const velocity = cur - prev;
    const delta = dest - cur;
    const spring = delta * stiffness;
    const damper = -velocity * damping;
    return spring + damper + velocity + cur;
}
function updateSpring(prev, cur, dest, damping, stiffness) {
    if (Array.isArray(dest)) {
        const next = [];
        for(let i = 0; i < dest.length; i++){
            next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);
        }
        return next;
    }
    return updateSpringElement(prev, cur, dest, damping, stiffness);
}
/*
 * Calculate the distance between two numbers or two vectors
 */ function distance(value1, value2) {
    if (Array.isArray(value1)) {
        let distanceSquare = 0;
        for(let i = 0; i < value1.length; i++){
            const d = value1[i] - value2[i];
            distanceSquare += d * d;
        }
        return Math.sqrt(distanceSquare);
    }
    return Math.abs(value1 - value2);
}
class CPUSpringTransition extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    get value() {
        return this._currValue;
    }
    _onUpdate() {
        // TODO - use timeline
        // const {time} = this;
        const { fromValue, toValue, damping, stiffness } = this.settings;
        const { _prevValue = fromValue, _currValue = fromValue } = this;
        let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);
        const delta = distance(nextValue, toValue);
        const velocity = distance(nextValue, _currValue);
        if (delta < EPSILON && velocity < EPSILON) {
            nextValue = toValue;
            this.end();
        }
        this._prevValue = _currValue;
        this._currValue = nextValue;
    }
} //# sourceMappingURL=cpu-spring-transition.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "normalizeTransitionSettings": (()=>normalizeTransitionSettings)
});
const DEFAULT_TRANSITION_SETTINGS = {
    interpolation: {
        duration: 0,
        easing: (t)=>t
    },
    spring: {
        stiffness: 0.05,
        damping: 0.5
    }
};
function normalizeTransitionSettings(userSettings, layerSettings) {
    if (!userSettings) {
        return null;
    }
    if (Number.isFinite(userSettings)) {
        userSettings = {
            type: 'interpolation',
            duration: userSettings
        };
    }
    const type = userSettings.type || 'interpolation';
    return {
        ...DEFAULT_TRANSITION_SETTINGS[type],
        ...layerSettings,
        ...userSettings,
        type
    };
} //# sourceMappingURL=transition-settings.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/uniform-transition-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>UniformTransitionManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$cpu$2d$interpolation$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/cpu-interpolation-transition.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$cpu$2d$spring$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/cpu-spring-transition.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$transition$2d$settings$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
;
;
;
;
const TRANSITION_TYPES = {
    interpolation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$cpu$2d$interpolation$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    spring: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$cpu$2d$spring$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
};
class UniformTransitionManager {
    constructor(timeline){
        this.transitions = new Map();
        this.timeline = timeline;
    }
    get active() {
        return this.transitions.size > 0;
    }
    add(key, fromValue, toValue, settings) {
        const { transitions } = this;
        if (transitions.has(key)) {
            const transition = transitions.get(key);
            // value may not be available if `update()` has not been called. Fallback to `fromValue`
            const { value = transition.settings.fromValue } = transition;
            // start from interrupted position
            fromValue = value;
            this.remove(key);
        }
        settings = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$transition$2d$settings$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["normalizeTransitionSettings"])(settings);
        if (!settings) {
            return;
        }
        const TransitionType = TRANSITION_TYPES[settings.type];
        if (!TransitionType) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].error(`unsupported transition type '${settings.type}'`)();
            return;
        }
        const transition = new TransitionType(this.timeline);
        transition.start({
            ...settings,
            fromValue,
            toValue
        });
        transitions.set(key, transition);
    }
    remove(key) {
        const { transitions } = this;
        if (transitions.has(key)) {
            transitions.get(key).cancel();
            transitions.delete(key);
        }
    }
    update() {
        const propsInTransition = {};
        for (const [key, transition] of this.transitions){
            transition.update();
            propsInTransition[key] = transition.value;
            if (!transition.inProgress) {
                // transition ended
                this.remove(key);
            }
        }
        return propsInTransition;
    }
    clear() {
        for (const key of this.transitions.keys()){
            this.remove(key);
        }
    }
} //# sourceMappingURL=uniform-transition-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lifecycle/props.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "compareProps": (()=>compareProps),
    "diffProps": (()=>diffProps),
    "validateProps": (()=>validateProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)");
;
function validateProps(props) {
    const propTypes = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]];
    for(const propName in propTypes){
        const propType = propTypes[propName];
        const { validate } = propType;
        if (validate && !validate(props[propName], propType)) {
            throw new Error(`Invalid prop ${propName}: ${props[propName]}`);
        }
    }
}
function diffProps(props, oldProps) {
    // First check if any props have changed (ignore props that will be examined separately)
    const propsChangedReason = compareProps({
        newProps: props,
        oldProps,
        propTypes: props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]],
        ignoreProps: {
            data: null,
            updateTriggers: null,
            extensions: null,
            transitions: null
        }
    });
    // Now check if any data related props have changed
    const dataChangedReason = diffDataProps(props, oldProps);
    // Check update triggers to determine if any attributes need regeneration
    // Note - if data has changed, all attributes will need regeneration, so skip this step
    let updateTriggersChangedReason = false;
    if (!dataChangedReason) {
        updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);
    }
    return {
        dataChanged: dataChangedReason,
        propsChanged: propsChangedReason,
        updateTriggersChanged: updateTriggersChangedReason,
        extensionsChanged: diffExtensions(props, oldProps),
        transitionsChanged: diffTransitions(props, oldProps)
    };
}
function diffTransitions(props, oldProps) {
    if (!props.transitions) {
        return false;
    }
    const result = {};
    const propTypes = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]];
    let changed = false;
    for(const key in props.transitions){
        const propType = propTypes[key];
        const type = propType && propType.type;
        const isTransitionable = type === 'number' || type === 'color' || type === 'array';
        if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {
            result[key] = true;
            changed = true;
        }
    }
    return changed ? result : false;
}
function compareProps({ newProps, oldProps, ignoreProps = {}, propTypes = {}, triggerName = 'props' }) {
    // shallow equality => deep equality
    if (oldProps === newProps) {
        return false;
    }
    // TODO - do we need these checks? Should never happen...
    if (typeof newProps !== 'object' || newProps === null) {
        return `${triggerName} changed shallowly`;
    }
    if (typeof oldProps !== 'object' || oldProps === null) {
        return `${triggerName} changed shallowly`;
    }
    // Compare explicitly defined new props against old/default values
    for (const key of Object.keys(newProps)){
        if (!(key in ignoreProps)) {
            if (!(key in oldProps)) {
                return `${triggerName}.${key} added`;
            }
            const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
            if (changed) {
                return `${triggerName}.${key} ${changed}`;
            }
        }
    }
    // Test if any old props have been dropped
    for (const key of Object.keys(oldProps)){
        if (!(key in ignoreProps)) {
            if (!(key in newProps)) {
                return `${triggerName}.${key} dropped`;
            }
            if (!Object.hasOwnProperty.call(newProps, key)) {
                // Compare dropped old prop against default value
                const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
                if (changed) {
                    return `${triggerName}.${key} ${changed}`;
                }
            }
        }
    }
    return false;
}
/* eslint-enable max-statements, max-depth, complexity */ // HELPERS
function comparePropValues(newProp, oldProp, propType) {
    // If prop type has an equal function, invoke it
    let equal = propType && propType.equal;
    if (equal && !equal(newProp, oldProp, propType)) {
        return 'changed deeply';
    }
    if (!equal) {
        // If object has an equals function, invoke it
        equal = newProp && oldProp && newProp.equals;
        if (equal && !equal.call(newProp, oldProp)) {
            return 'changed deeply';
        }
    }
    if (!equal && oldProp !== newProp) {
        return 'changed shallowly';
    }
    return null;
}
// The comparison of the data prop requires special handling
// the dataComparator should be used if supplied
function diffDataProps(props, oldProps) {
    if (oldProps === null) {
        return 'oldProps is null, initial diff';
    }
    let dataChanged = false;
    // Support optional app defined comparison of data
    const { dataComparator, _dataDiff } = props;
    if (dataComparator) {
        if (!dataComparator(props.data, oldProps.data)) {
            dataChanged = 'Data comparator detected a change';
        }
    // Otherwise, do a shallow equal on props
    } else if (props.data !== oldProps.data) {
        dataChanged = 'A new data container was supplied';
    }
    if (dataChanged && _dataDiff) {
        dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;
    }
    return dataChanged;
}
// Checks if any update triggers have changed
// also calls callback to invalidate attributes accordingly.
function diffUpdateTriggers(props, oldProps) {
    if (oldProps === null) {
        return {
            all: true
        };
    }
    // If the 'all' updateTrigger fires, ignore testing others
    if ('all' in props.updateTriggers) {
        const diffReason = diffUpdateTrigger(props, oldProps, 'all');
        if (diffReason) {
            return {
                all: true
            };
        }
    }
    const reason = {};
    let changed = false;
    // If the 'all' updateTrigger didn't fire, need to check all others
    for(const triggerName in props.updateTriggers){
        if (triggerName !== 'all') {
            const diffReason = diffUpdateTrigger(props, oldProps, triggerName);
            if (diffReason) {
                reason[triggerName] = true;
                changed = true;
            }
        }
    }
    return changed ? reason : false;
}
// Returns true if any extensions have changed
function diffExtensions(props, oldProps) {
    if (oldProps === null) {
        return true;
    }
    const oldExtensions = oldProps.extensions;
    const { extensions } = props;
    if (extensions === oldExtensions) {
        return false;
    }
    if (!oldExtensions || !extensions) {
        return true;
    }
    if (extensions.length !== oldExtensions.length) {
        return true;
    }
    for(let i = 0; i < extensions.length; i++){
        if (!extensions[i].equals(oldExtensions[i])) {
            return true;
        }
    }
    return false;
}
function diffUpdateTrigger(props, oldProps, triggerName) {
    let newTriggers = props.updateTriggers[triggerName];
    newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;
    let oldTriggers = oldProps.updateTriggers[triggerName];
    oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;
    const diffReason = compareProps({
        oldProps: oldTriggers,
        newProps: newTriggers,
        triggerName
    });
    return diffReason;
} //# sourceMappingURL=props.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/range.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/*
 * range (Array)
 *   + start (Number) - the start index (incl.)
 *   + end (Number) - the end index (excl.)
 * rangeList (Array) - array of sorted, combined ranges
 */ __turbopack_esm__({
    "EMPTY": (()=>EMPTY),
    "FULL": (()=>FULL),
    "add": (()=>add)
});
const EMPTY = [];
const FULL = [
    [
        0,
        Infinity
    ]
];
function add(rangeList, range) {
    // Noop if range collection already covers all
    if (rangeList === FULL) {
        return rangeList;
    }
    // Validate the input range
    if (range[0] < 0) {
        range[0] = 0;
    }
    if (range[0] >= range[1]) {
        return rangeList;
    }
    // TODO - split off to tree-shakable Range class
    const newRangeList = [];
    const len = rangeList.length;
    let insertPosition = 0;
    for(let i = 0; i < len; i++){
        const range0 = rangeList[i];
        if (range0[1] < range[0]) {
            // the current range is to the left of the new range
            newRangeList.push(range0);
            insertPosition = i + 1;
        } else if (range0[0] > range[1]) {
            // the current range is to the right of the new range
            newRangeList.push(range0);
        } else {
            range = [
                Math.min(range0[0], range[0]),
                Math.max(range0[1], range[1])
            ];
        }
    }
    newRangeList.splice(insertPosition, 0, range);
    return newRangeList;
} //# sourceMappingURL=range.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "bufferLayoutEqual": (()=>bufferLayoutEqual),
    "dataTypeFromTypedArray": (()=>dataTypeFromTypedArray),
    "getBufferAttributeLayout": (()=>getBufferAttributeLayout),
    "getStride": (()=>getStride),
    "typedArrayFromDataType": (()=>typedArrayFromDataType)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$gpu$2d$type$2d$utils$2f$vertex$2d$format$2d$from$2d$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/core/dist/gpu-type-utils/vertex-format-from-attribute.js [app-ssr] (ecmascript)");
;
function typedArrayFromDataType(type) {
    // Sorted in some order of likelihood to reduce amount of comparisons
    switch(type){
        case 'float64':
            return Float64Array;
        case 'uint8':
        case 'unorm8':
            return Uint8ClampedArray;
        default:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$gpu$2d$type$2d$utils$2f$vertex$2d$format$2d$from$2d$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTypedArrayFromDataType"])(type);
    }
}
const dataTypeFromTypedArray = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$gpu$2d$type$2d$utils$2f$vertex$2d$format$2d$from$2d$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDataTypeFromTypedArray"];
function getBufferAttributeLayout(name, accessor) {
    return {
        attribute: name,
        // @ts-expect-error Not all combinations are valid vertex formats; it's up to DataColumn to ensure
        format: accessor.size > 1 ? `${accessor.type}x${accessor.size}` : accessor.type,
        byteOffset: accessor.offset || 0
    };
}
function getStride(accessor) {
    return accessor.stride || accessor.size * accessor.bytesPerElement;
}
function bufferLayoutEqual(accessor1, accessor2) {
    return accessor1.type === accessor2.type && accessor1.size === accessor2.size && getStride(accessor1) === getStride(accessor2) && (accessor1.offset || 0) === (accessor2.offset || 0);
} //# sourceMappingURL=gl-utils.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/flatten.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Flattens a nested array into a single level array,
 * or a single value into an array with one value
 * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]
 * @example flatten(1) => [1]
 * @param array The array to flatten.
 * @param filter= - Optional predicate called on each `value` to
 *   determine if it should be included (pushed onto) the resulting array.
 * @return Returns the new flattened array (new array or `result` if provided)
 */ __turbopack_esm__({
    "fillArray": (()=>fillArray),
    "flatten": (()=>flatten)
});
function flatten(array, filter = ()=>true) {
    // Wrap single object in array
    if (!Array.isArray(array)) {
        return filter(array) ? [
            array
        ] : [];
    }
    // Deep flatten and filter the array
    return flattenArray(array, filter, []);
}
/** Deep flattens an array. Helper to `flatten`, see its parameters */ function flattenArray(array, filter, result) {
    let index = -1;
    while(++index < array.length){
        const value = array[index];
        if (Array.isArray(value)) {
            flattenArray(value, filter, result);
        } else if (filter(value)) {
            result.push(value);
        }
    }
    return result;
}
function fillArray({ target, source, start = 0, count = 1 }) {
    const length = source.length;
    const total = count * length;
    let copied = 0;
    for(let i = start; copied < length; copied++){
        target[i++] = source[copied];
    }
    while(copied < total){
        // If we have copied less than half, copy everything we got
        // else copy remaining in one operation
        if (copied < total - copied) {
            target.copyWithin(start + copied, start, start + copied);
            copied *= 2;
        } else {
            target.copyWithin(start + copied, start, start + total - copied);
            copied = total;
        }
    }
    return target;
} //# sourceMappingURL=flatten.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/attribute/data-column.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>DataColumn)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/typed-array-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/math-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
;
;
;
;
;
function resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {
    if (shaderAttributeOptions.offset) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();
    }
    // All shader attributes share the parent's stride
    const stride = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStride"])(baseAccessor);
    // `vertexOffset` is used to access the neighboring vertex's value
    // e.g. `nextPositions` in polygon
    const vertexOffset = shaderAttributeOptions.vertexOffset !== undefined ? shaderAttributeOptions.vertexOffset : baseAccessor.vertexOffset || 0;
    // `elementOffset` is defined when shader attribute's size is smaller than the parent's
    // e.g. `translations` in transform matrix
    const elementOffset = shaderAttributeOptions.elementOffset || 0;
    const offset = // offsets defined by the attribute
    vertexOffset * stride + elementOffset * baseAccessor.bytesPerElement + // offsets defined by external buffers if any
    (baseAccessor.offset || 0);
    return {
        ...shaderAttributeOptions,
        offset,
        stride
    };
}
function resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {
    const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);
    return {
        high: resolvedOptions,
        low: {
            ...resolvedOptions,
            offset: resolvedOptions.offset + baseAccessor.size * 4
        }
    };
}
class DataColumn {
    /* eslint-disable max-statements */ constructor(device, opts, state){
        this._buffer = null;
        this.device = device;
        this.id = opts.id || '';
        this.size = opts.size || 1;
        const logicalType = opts.logicalType || opts.type;
        const doublePrecision = logicalType === 'float64';
        let { defaultValue } = opts;
        defaultValue = Number.isFinite(defaultValue) ? [
            defaultValue
        ] : defaultValue || new Array(this.size).fill(0);
        let bufferType;
        if (doublePrecision) {
            bufferType = 'float32';
        } else if (!logicalType && opts.isIndexed) {
            bufferType = 'uint32';
        } else {
            bufferType = logicalType || 'float32';
        }
        // This is the attribute type defined by the layer
        // If an external buffer is provided, this.type may be overwritten
        // But we always want to use defaultType for allocation
        let defaultType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["typedArrayFromDataType"])(logicalType || bufferType);
        this.doublePrecision = doublePrecision;
        // `fp64: false` tells a double-precision attribute to allocate Float32Arrays
        // by default when using auto-packing. This is more efficient in use cases where
        // high precision is unnecessary, but the `64Low` attribute is still required
        // by the shader.
        if (doublePrecision && opts.fp64 === false) {
            defaultType = Float32Array;
        }
        this.value = null;
        this.settings = {
            ...opts,
            defaultType,
            defaultValue: defaultValue,
            logicalType,
            type: bufferType,
            normalized: bufferType.includes('norm'),
            size: this.size,
            bytesPerElement: defaultType.BYTES_PER_ELEMENT
        };
        this.state = {
            ...state,
            externalBuffer: null,
            bufferAccessor: this.settings,
            allocatedValue: null,
            numInstances: 0,
            bounds: null,
            constant: false
        };
    }
    /* eslint-enable max-statements */ get isConstant() {
        return this.state.constant;
    }
    get buffer() {
        return this._buffer;
    }
    get byteOffset() {
        const accessor = this.getAccessor();
        if (accessor.vertexOffset) {
            return accessor.vertexOffset * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStride"])(accessor);
        }
        return 0;
    }
    get numInstances() {
        return this.state.numInstances;
    }
    set numInstances(n) {
        this.state.numInstances = n;
    }
    delete() {
        if (this._buffer) {
            this._buffer.delete();
            this._buffer = null;
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].release(this.state.allocatedValue);
    }
    getBuffer() {
        if (this.state.constant) {
            return null;
        }
        return this.state.externalBuffer || this._buffer;
    }
    getValue(attributeName = this.id, options = null) {
        const result = {};
        if (this.state.constant) {
            const value = this.value;
            if (options) {
                const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);
                const offset = shaderAttributeDef.offset / value.BYTES_PER_ELEMENT;
                const size = shaderAttributeDef.size || this.size;
                result[attributeName] = value.subarray(offset, offset + size);
            } else {
                result[attributeName] = value;
            }
        } else {
            result[attributeName] = this.getBuffer();
        }
        if (this.doublePrecision) {
            if (this.value instanceof Float64Array) {
                result[`${attributeName}64Low`] = result[attributeName];
            } else {
                // Disable fp64 low part
                result[`${attributeName}64Low`] = new Float32Array(this.size);
            }
        }
        return result;
    }
    _getBufferLayout(attributeName = this.id, options = null) {
        const accessor = this.getAccessor();
        const attributes = [];
        const result = {
            name: this.id,
            byteStride: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStride"])(accessor),
            attributes
        };
        if (this.doublePrecision) {
            const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(accessor, options || {});
            attributes.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBufferAttributeLayout"])(attributeName, {
                ...accessor,
                ...doubleShaderAttributeDefs.high
            }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBufferAttributeLayout"])(`${attributeName}64Low`, {
                ...accessor,
                ...doubleShaderAttributeDefs.low
            }));
        } else if (options) {
            const shaderAttributeDef = resolveShaderAttribute(accessor, options);
            attributes.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBufferAttributeLayout"])(attributeName, {
                ...accessor,
                ...shaderAttributeDef
            }));
        } else {
            attributes.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBufferAttributeLayout"])(attributeName, accessor));
        }
        return result;
    }
    setAccessor(accessor) {
        this.state.bufferAccessor = accessor;
    }
    getAccessor() {
        return this.state.bufferAccessor;
    }
    // Returns [min: Array(size), max: Array(size)]
    /* eslint-disable max-depth */ getBounds() {
        if (this.state.bounds) {
            return this.state.bounds;
        }
        let result = null;
        if (this.state.constant && this.value) {
            const min = Array.from(this.value);
            result = [
                min,
                min
            ];
        } else {
            const { value, numInstances, size } = this;
            const len = numInstances * size;
            if (value && len && value.length >= len) {
                const min = new Array(size).fill(Infinity);
                const max = new Array(size).fill(-Infinity);
                for(let i = 0; i < len;){
                    for(let j = 0; j < size; j++){
                        const v = value[i++];
                        if (v < min[j]) min[j] = v;
                        if (v > max[j]) max[j] = v;
                    }
                }
                result = [
                    min,
                    max
                ];
            }
        }
        this.state.bounds = result;
        return result;
    }
    // returns true if success
    // eslint-disable-next-line max-statements
    setData(data) {
        const { state } = this;
        let opts;
        if (ArrayBuffer.isView(data)) {
            opts = {
                value: data
            };
        } else if (data instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Buffer"]) {
            opts = {
                buffer: data
            };
        } else {
            opts = data;
        }
        const accessor = {
            ...this.settings,
            ...opts
        };
        if (ArrayBuffer.isView(opts.value)) {
            if (!opts.type) {
                // Deduce data type
                const is64Bit = this.doublePrecision && opts.value instanceof Float64Array;
                if (is64Bit) {
                    accessor.type = 'float32';
                } else {
                    const type = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["dataTypeFromTypedArray"])(opts.value);
                    accessor.type = accessor.normalized ? type.replace('int', 'norm') : type;
                }
            }
            accessor.bytesPerElement = opts.value.BYTES_PER_ELEMENT;
            accessor.stride = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStride"])(accessor);
        }
        state.bounds = null; // clear cached bounds
        if (opts.constant) {
            // set constant
            let value = opts.value;
            value = this._normalizeValue(value, [], 0);
            if (this.settings.normalized) {
                value = this.normalizeConstant(value);
            }
            const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);
            if (!hasChanged) {
                return false;
            }
            state.externalBuffer = null;
            state.constant = true;
            this.value = ArrayBuffer.isView(value) ? value : new Float32Array(value);
        } else if (opts.buffer) {
            const buffer = opts.buffer;
            state.externalBuffer = buffer;
            state.constant = false;
            this.value = opts.value || null;
        } else if (opts.value) {
            this._checkExternalBuffer(opts);
            let value = opts.value;
            state.externalBuffer = null;
            state.constant = false;
            this.value = value;
            let { buffer } = this;
            const stride = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStride"])(accessor);
            const byteOffset = (accessor.vertexOffset || 0) * stride;
            if (this.doublePrecision && value instanceof Float64Array) {
                value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toDoublePrecisionArray"])(value, accessor);
            }
            if (this.settings.isIndexed) {
                const ArrayType = this.settings.defaultType;
                if (value.constructor !== ArrayType) {
                    // Cast the index buffer to expected type
                    value = new ArrayType(value);
                }
            }
            // A small over allocation is used as safety margin
            // Shader attributes may try to access this buffer with bigger offsets
            const requiredBufferSize = value.byteLength + byteOffset + stride * 2;
            if (!buffer || buffer.byteLength < requiredBufferSize) {
                buffer = this._createBuffer(requiredBufferSize);
            }
            buffer.write(value, byteOffset);
        }
        this.setAccessor(accessor);
        return true;
    }
    updateSubBuffer(opts = {}) {
        this.state.bounds = null; // clear cached bounds
        const value = this.value;
        const { startOffset = 0, endOffset } = opts;
        this.buffer.write(this.doublePrecision && value instanceof Float64Array ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toDoublePrecisionArray"])(value, {
            size: this.size,
            startIndex: startOffset,
            endIndex: endOffset
        }) : value.subarray(startOffset, endOffset), startOffset * value.BYTES_PER_ELEMENT + this.byteOffset);
    }
    allocate(numInstances, copy = false) {
        const { state } = this;
        const oldValue = state.allocatedValue;
        // Allocate at least one element to ensure a valid buffer
        const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].allocate(oldValue, numInstances + 1, {
            size: this.size,
            type: this.settings.defaultType,
            copy
        });
        this.value = value;
        const { byteOffset } = this;
        let { buffer } = this;
        if (!buffer || buffer.byteLength < value.byteLength + byteOffset) {
            buffer = this._createBuffer(value.byteLength + byteOffset);
            if (copy && oldValue) {
                // Upload the full existing attribute value to the GPU, so that updateBuffer
                // can choose to only update a partial range.
                // TODO - copy old buffer to new buffer on the GPU
                buffer.write(oldValue instanceof Float64Array ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toDoublePrecisionArray"])(oldValue, this) : oldValue, byteOffset);
            }
        }
        state.allocatedValue = value;
        state.constant = false;
        state.externalBuffer = null;
        this.setAccessor(this.settings);
        return true;
    }
    // PRIVATE HELPER METHODS
    _checkExternalBuffer(opts) {
        const { value } = opts;
        if (!ArrayBuffer.isView(value)) {
            throw new Error(`Attribute ${this.id} value is not TypedArray`);
        }
        const ArrayType = this.settings.defaultType;
        let illegalArrayType = false;
        if (this.doublePrecision) {
            // not 32bit or 64bit
            illegalArrayType = value.BYTES_PER_ELEMENT < 4;
        }
        if (illegalArrayType) {
            throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);
        }
        if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn(`Attribute ${this.id} is normalized`)();
        }
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer
    normalizeConstant(value) {
        /* eslint-disable complexity */ switch(this.settings.type){
            case 'snorm8':
                // normalize [-128, 127] to [-1, 1]
                return new Float32Array(value).map((x)=>(x + 128) / 255 * 2 - 1);
            case 'snorm16':
                // normalize [-32768, 32767] to [-1, 1]
                return new Float32Array(value).map((x)=>(x + 32768) / 65535 * 2 - 1);
            case 'unorm8':
                // normalize [0, 255] to [0, 1]
                return new Float32Array(value).map((x)=>x / 255);
            case 'unorm16':
                // normalize [0, 65535] to [0, 1]
                return new Float32Array(value).map((x)=>x / 65535);
            default:
                // No normalization for gl.FLOAT and gl.HALF_FLOAT
                return value;
        }
    }
    /* check user supplied values and apply fallback */ _normalizeValue(value, out, start) {
        const { defaultValue, size } = this.settings;
        if (Number.isFinite(value)) {
            out[start] = value;
            return out;
        }
        if (!value) {
            let i = size;
            while(--i >= 0){
                out[start + i] = defaultValue[i];
            }
            return out;
        }
        // Important - switch cases are 5x more performant than a for loop!
        /* eslint-disable no-fallthrough, default-case */ switch(size){
            case 4:
                out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];
            case 3:
                out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];
            case 2:
                out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];
            case 1:
                out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];
                break;
            default:
                // In the rare case where the attribute size > 4, do it the slow way
                // This is used for e.g. transform matrices
                let i = size;
                while(--i >= 0){
                    out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];
                }
        }
        return out;
    }
    _areValuesEqual(value1, value2) {
        if (!value1 || !value2) {
            return false;
        }
        const { size } = this;
        for(let i = 0; i < size; i++){
            if (value1[i] !== value2[i]) {
                return false;
            }
        }
        return true;
    }
    _createBuffer(byteLength) {
        if (this._buffer) {
            this._buffer.destroy();
        }
        const { isIndexed, type } = this.settings;
        this._buffer = this.device.createBuffer({
            ...this._buffer?.props,
            id: this.id,
            usage: isIndexed ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Buffer"].INDEX : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Buffer"].VERTEX,
            indexType: isIndexed ? type : undefined,
            byteLength
        });
        return this._buffer;
    }
} //# sourceMappingURL=data-column.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* eslint-disable complexity */ __turbopack_esm__({
    "default": (()=>Attribute)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$range$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/range.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$transition$2d$settings$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/assert.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/iterable-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/flatten.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$data$2d$column$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/data-column.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
class Attribute extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$data$2d$column$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(device, opts){
        super(device, opts, {
            startIndices: null,
            lastExternalBuffer: null,
            binaryValue: null,
            binaryAccessor: null,
            needsUpdate: true,
            needsRedraw: false,
            layoutChanged: false,
            updateRanges: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$range$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.FULL
        });
        /** Legacy approach to set attribute value - read `isConstant` instead for attribute state */ this.constant = false;
        // eslint-disable-next-line
        this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);
        Object.seal(this.settings);
        Object.seal(this.state);
        // Check all fields and generate helpful error messages
        this._validateAttributeUpdaters();
    }
    get startIndices() {
        return this.state.startIndices;
    }
    set startIndices(layout) {
        this.state.startIndices = layout;
    }
    needsUpdate() {
        return this.state.needsUpdate;
    }
    needsRedraw({ clearChangedFlags = false } = {}) {
        const needsRedraw = this.state.needsRedraw;
        this.state.needsRedraw = needsRedraw && !clearChangedFlags;
        return needsRedraw;
    }
    layoutChanged() {
        return this.state.layoutChanged;
    }
    setAccessor(accessor) {
        var _a;
        (_a = this.state).layoutChanged || (_a.layoutChanged = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$gl$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bufferLayoutEqual"])(accessor, this.getAccessor()));
        super.setAccessor(accessor);
    }
    getUpdateTriggers() {
        const { accessor } = this.settings;
        // Backards compatibility: allow attribute name to be used as update trigger key
        return [
            this.id
        ].concat(typeof accessor !== 'function' && accessor || []);
    }
    supportsTransition() {
        return Boolean(this.settings.transition);
    }
    // Resolve transition settings object if transition is enabled, otherwise `null`
    getTransitionSetting(opts) {
        if (!opts || !this.supportsTransition()) {
            return null;
        }
        const { accessor } = this.settings;
        // TODO: have the layer resolve these transition settings itself?
        const layerSettings = this.settings.transition;
        // these are the transition settings passed in by the user
        const userSettings = Array.isArray(accessor) ? opts[accessor.find((a)=>opts[a])] : opts[accessor];
        // Shorthand: use duration instead of parameter object
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$transition$2d$settings$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["normalizeTransitionSettings"])(userSettings, layerSettings);
    }
    setNeedsUpdate(reason = this.id, dataRange) {
        this.state.needsUpdate = this.state.needsUpdate || reason;
        this.setNeedsRedraw(reason);
        if (dataRange) {
            const { startRow = 0, endRow = Infinity } = dataRange;
            this.state.updateRanges = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$range$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.add(this.state.updateRanges, [
                startRow,
                endRow
            ]);
        } else {
            this.state.updateRanges = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$range$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.FULL;
        }
    }
    clearNeedsUpdate() {
        this.state.needsUpdate = false;
        this.state.updateRanges = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$range$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.EMPTY;
    }
    setNeedsRedraw(reason = this.id) {
        this.state.needsRedraw = this.state.needsRedraw || reason;
    }
    allocate(numInstances) {
        const { state, settings } = this;
        if (settings.noAlloc) {
            // Data is provided through a Buffer object.
            return false;
        }
        if (settings.update) {
            super.allocate(numInstances, state.updateRanges !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$range$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.FULL);
            return true;
        }
        return false;
    }
    updateBuffer({ numInstances, data, props, context }) {
        if (!this.needsUpdate()) {
            return false;
        }
        const { state: { updateRanges }, settings: { update, noAlloc } } = this;
        let updated = true;
        if (update) {
            // Custom updater - typically for non-instanced layers
            for (const [startRow, endRow] of updateRanges){
                update.call(context, this, {
                    data,
                    startRow,
                    endRow,
                    props,
                    numInstances
                });
            }
            if (!this.value) {
            // no value was assigned during update
            } else if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {
                this.setData({
                    value: this.value,
                    constant: this.constant
                });
                // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle
                // Respect it here but reset after use
                this.constant = false;
            } else {
                for (const [startRow, endRow] of updateRanges){
                    const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;
                    const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;
                    super.updateSubBuffer({
                        startOffset,
                        endOffset
                    });
                }
            }
            this._checkAttributeArray();
        } else {
            updated = false;
        }
        this.clearNeedsUpdate();
        this.setNeedsRedraw();
        return updated;
    }
    // Use generic value
    // Returns true if successful
    setConstantValue(value) {
        if (value === undefined || typeof value === 'function') {
            return false;
        }
        const hasChanged = this.setData({
            constant: true,
            value
        });
        if (hasChanged) {
            this.setNeedsRedraw();
        }
        this.clearNeedsUpdate();
        return true;
    }
    // Use external buffer
    // Returns true if successful
    // eslint-disable-next-line max-statements
    setExternalBuffer(buffer) {
        const { state } = this;
        if (!buffer) {
            state.lastExternalBuffer = null;
            return false;
        }
        this.clearNeedsUpdate();
        if (state.lastExternalBuffer === buffer) {
            return true;
        }
        state.lastExternalBuffer = buffer;
        this.setNeedsRedraw();
        this.setData(buffer);
        return true;
    }
    // Binary value is a typed array packed from mapping the source data with the accessor
    // If the returned value from the accessor is the same as the attribute value, set it directly
    // Otherwise use the auto updater for transform/normalization
    setBinaryValue(buffer, startIndices = null) {
        const { state, settings } = this;
        if (!buffer) {
            state.binaryValue = null;
            state.binaryAccessor = null;
            return false;
        }
        if (settings.noAlloc) {
            // Let the layer handle this
            return false;
        }
        if (state.binaryValue === buffer) {
            this.clearNeedsUpdate();
            return true;
        }
        state.binaryValue = buffer;
        this.setNeedsRedraw();
        const needsUpdate = settings.transform || startIndices !== this.startIndices;
        if (needsUpdate) {
            if (ArrayBuffer.isView(buffer)) {
                buffer = {
                    value: buffer
                };
            }
            const binaryValue = buffer;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(ArrayBuffer.isView(binaryValue.value), `invalid ${settings.accessor}`);
            const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;
            state.binaryAccessor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccessorFromBuffer"])(binaryValue.value, {
                size: binaryValue.size || this.size,
                stride: binaryValue.stride,
                offset: binaryValue.offset,
                startIndices: startIndices,
                nested: needsNormalize
            });
            // Fall through to auto updater
            return false;
        }
        this.clearNeedsUpdate();
        this.setData(buffer);
        return true;
    }
    getVertexOffset(row) {
        const { startIndices } = this;
        const vertexIndex = startIndices ? row < startIndices.length ? startIndices[row] : this.numInstances : row;
        return vertexIndex * this.size;
    }
    getValue() {
        const shaderAttributeDefs = this.settings.shaderAttributes;
        const result = super.getValue();
        if (!shaderAttributeDefs) {
            return result;
        }
        for(const shaderAttributeName in shaderAttributeDefs){
            Object.assign(result, super.getValue(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));
        }
        return result;
    }
    /** Generate WebGPU-style buffer layout descriptor from this attribute */ getBufferLayout(/** A luma.gl Model-shaped object that supplies additional hint to attribute resolution */ modelInfo) {
        // Clear change flag
        this.state.layoutChanged = false;
        const shaderAttributeDefs = this.settings.shaderAttributes;
        const result = super._getBufferLayout();
        const { stepMode } = this.settings;
        if (stepMode === 'dynamic') {
            // If model info is provided, use isInstanced flag to determine step mode
            // If no model info is provided, assume it's an instanced model (most common use case)
            result.stepMode = modelInfo ? modelInfo.isInstanced ? 'instance' : 'vertex' : 'instance';
        } else {
            result.stepMode = stepMode ?? 'vertex';
        }
        if (!shaderAttributeDefs) {
            return result;
        }
        for(const shaderAttributeName in shaderAttributeDefs){
            const map = super._getBufferLayout(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]);
            // @ts-ignore
            result.attributes.push(...map.attributes);
        }
        return result;
    }
    /* eslint-disable max-depth, max-statements */ _autoUpdater(attribute, { data, startRow, endRow, props, numInstances }) {
        if (attribute.constant) {
            return;
        }
        const { settings, state, value, size, startIndices } = attribute;
        const { accessor, transform } = settings;
        const accessorFunc = state.binaryAccessor || // @ts-ignore
        (typeof accessor === 'function' ? accessor : props[accessor]);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(typeof accessorFunc === 'function', `accessor "${accessor}" is not a function`);
        let i = attribute.getVertexOffset(startRow);
        const { iterable, objectInfo } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createIterable"])(data, startRow, endRow);
        for (const object of iterable){
            objectInfo.index++;
            let objectValue = accessorFunc(object, objectInfo);
            if (transform) {
                // transform callbacks could be bound to a particular layer instance.
                // always point `this` to the current layer.
                objectValue = transform.call(this, objectValue);
            }
            if (startIndices) {
                const numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];
                if (objectValue && Array.isArray(objectValue[0])) {
                    let startIndex = i;
                    for (const item of objectValue){
                        attribute._normalizeValue(item, value, startIndex);
                        startIndex += size;
                    }
                } else if (objectValue && objectValue.length > size) {
                    value.set(objectValue, i);
                } else {
                    attribute._normalizeValue(objectValue, objectInfo.target, 0);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fillArray"])({
                        target: value,
                        source: objectInfo.target,
                        start: i,
                        count: numVertices
                    });
                }
                i += numVertices * size;
            } else {
                attribute._normalizeValue(objectValue, value, i);
                i += size;
            }
        }
    }
    /* eslint-enable max-depth, max-statements */ // Validate deck.gl level fields
    _validateAttributeUpdaters() {
        const { settings } = this;
        // Check that 'update' is a valid function
        const hasUpdater = settings.noAlloc || typeof settings.update === 'function';
        if (!hasUpdater) {
            throw new Error(`Attribute ${this.id} missing update or accessor`);
        }
    }
    // check that the first few elements of the attribute are reasonable
    /* eslint-disable no-fallthrough */ _checkAttributeArray() {
        const { value } = this;
        const limit = Math.min(4, this.size);
        if (value && value.length >= limit) {
            let valid = true;
            switch(limit){
                case 4:
                    valid = valid && Number.isFinite(value[3]);
                case 3:
                    valid = valid && Number.isFinite(value[2]);
                case 2:
                    valid = valid && Number.isFinite(value[1]);
                case 1:
                    valid = valid && Number.isFinite(value[0]);
                    break;
                default:
                    valid = false;
            }
            if (!valid) {
                throw new Error(`Illegal attribute generated for ${this.id}`);
            }
        }
    }
} //# sourceMappingURL=attribute.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/array-utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/*
 * Helper function for padArray
 */ __turbopack_esm__({
    "padArray": (()=>padArray)
});
function padArrayChunk(options) {
    const { source, target, start = 0, size, getData } = options;
    const end = options.end || target.length;
    const sourceLength = source.length;
    const targetLength = end - start;
    if (sourceLength > targetLength) {
        target.set(source.subarray(0, targetLength), start);
        return;
    }
    target.set(source, start);
    if (!getData) {
        return;
    }
    // source is not large enough to fill target space, call `getData` to get filler data
    let i = sourceLength;
    while(i < targetLength){
        const datum = getData(i, source);
        for(let j = 0; j < size; j++){
            target[start + i] = datum[j] || 0;
            i++;
        }
    }
}
function padArray({ source, target, size, getData, sourceStartIndices, targetStartIndices }) {
    if (!sourceStartIndices || !targetStartIndices) {
        // Flat arrays
        padArrayChunk({
            source,
            target,
            size,
            getData
        });
        return target;
    }
    // Arrays have internal structure
    let sourceIndex = 0;
    let targetIndex = 0;
    const getChunkData = getData && ((i, chunk)=>getData(i + targetIndex, chunk));
    const n = Math.min(sourceStartIndices.length, targetStartIndices.length);
    for(let i = 1; i < n; i++){
        const nextSourceIndex = sourceStartIndices[i] * size;
        const nextTargetIndex = targetStartIndices[i] * size;
        padArrayChunk({
            source: source.subarray(sourceIndex, nextSourceIndex),
            target,
            start: targetIndex,
            end: nextTargetIndex,
            size,
            getData: getChunkData
        });
        sourceIndex = nextSourceIndex;
        targetIndex = nextTargetIndex;
    }
    if (targetIndex < target.length) {
        padArrayChunk({
            // @ts-ignore
            source: [],
            target,
            start: targetIndex,
            size,
            getData: getChunkData
        });
    }
    return target;
} //# sourceMappingURL=array-utils.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "cloneAttribute": (()=>cloneAttribute),
    "cycleBuffers": (()=>cycleBuffers),
    "getAttributeBufferLength": (()=>getAttributeBufferLength),
    "getAttributeTypeFromSize": (()=>getAttributeTypeFromSize),
    "getFloat32VertexFormat": (()=>getFloat32VertexFormat),
    "matchBuffer": (()=>matchBuffer),
    "padBuffer": (()=>padBuffer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$array$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/array-utils.js [app-ssr] (ecmascript)");
;
;
;
function cloneAttribute(attribute) {
    // `attribute.settings` is the original options passed when constructing the attribute.
    // This ensures that we set the proper `doublePrecision` flag and shader attributes.
    const { device, settings, value } = attribute;
    const newAttribute = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](device, settings);
    // Placeholder value - necessary for generating the correct buffer layout
    newAttribute.setData({
        value: value instanceof Float64Array ? new Float64Array(0) : new Float32Array(0),
        normalized: settings.normalized
    });
    return newAttribute;
}
function getAttributeTypeFromSize(size) {
    switch(size){
        case 1:
            return 'float';
        case 2:
            return 'vec2';
        case 3:
            return 'vec3';
        case 4:
            return 'vec4';
        default:
            throw new Error(`No defined attribute type for size "${size}"`);
    }
}
function getFloat32VertexFormat(size) {
    switch(size){
        case 1:
            return 'float32';
        case 2:
            return 'float32x2';
        case 3:
            return 'float32x3';
        case 4:
            return 'float32x4';
        default:
            throw new Error('invalid type size');
    }
}
function cycleBuffers(buffers) {
    buffers.push(buffers.shift());
}
function getAttributeBufferLength(attribute, numInstances) {
    const { doublePrecision, settings, value, size } = attribute;
    const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;
    let maxVertexOffset = 0;
    const { shaderAttributes } = attribute.settings;
    if (shaderAttributes) {
        for (const shaderAttribute of Object.values(shaderAttributes)){
            maxVertexOffset = Math.max(maxVertexOffset, shaderAttribute.vertexOffset ?? 0);
        }
    }
    return (settings.noAlloc ? value.length : (numInstances + maxVertexOffset) * size) * multiplier;
}
function matchBuffer({ device, source, target }) {
    if (!target || target.byteLength < source.byteLength) {
        target?.destroy();
        target = device.createBuffer({
            byteLength: source.byteLength,
            usage: source.usage
        });
    }
    return target;
}
function padBuffer({ device, buffer, attribute, fromLength, toLength, fromStartIndices, getData = (x)=>x }) {
    // TODO: move the precisionMultiplier logic to the attribute when retrieving
    // its `size` and `elementOffset`?
    const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;
    const size = attribute.size * precisionMultiplier;
    const byteOffset = attribute.byteOffset;
    // Transform feedback can only write to float varyings
    // Attributes of format unorm8/uint8 (1 byte per element) etc will be padded to float32 (4 bytes per element)
    const targetByteOffset = attribute.settings.bytesPerElement < 4 ? byteOffset / attribute.settings.bytesPerElement * 4 : byteOffset;
    const toStartIndices = attribute.startIndices;
    const hasStartIndices = fromStartIndices && toStartIndices;
    const isConstant = attribute.isConstant;
    // check if buffer needs to be padded
    if (!hasStartIndices && buffer && fromLength >= toLength) {
        return buffer;
    }
    const ArrayType = attribute.value instanceof Float64Array ? Float32Array : attribute.value.constructor;
    const toData = isConstant ? attribute.value : new ArrayType(attribute.getBuffer().readSyncWebGL(byteOffset, toLength * ArrayType.BYTES_PER_ELEMENT).buffer);
    if (attribute.settings.normalized && !isConstant) {
        const getter = getData;
        getData = (value, chunk)=>attribute.normalizeConstant(getter(value, chunk));
    }
    const getMissingData = isConstant ? (i, chunk)=>getData(toData, chunk) : (i, chunk)=>getData(toData.subarray(i + byteOffset, i + byteOffset + size), chunk);
    // TODO(v9.1): Avoid non-portable synchronous reads.
    const source = buffer ? new Float32Array(buffer.readSyncWebGL(targetByteOffset, fromLength * 4).buffer) : new Float32Array(0);
    const target = new Float32Array(toLength);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$array$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["padArray"])({
        source,
        target,
        sourceStartIndices: fromStartIndices,
        targetStartIndices: toStartIndices,
        size,
        getData: getMissingData
    });
    if (!buffer || buffer.byteLength < target.byteLength + targetByteOffset) {
        buffer?.destroy();
        buffer = device.createBuffer({
            byteLength: target.byteLength + targetByteOffset,
            usage: 35050
        });
    }
    buffer.write(target, targetByteOffset);
    return buffer;
} //# sourceMappingURL=gpu-transition-utils.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/gpu-transition.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "GPUTransitionBase": (()=>GPUTransitionBase)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/transition.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js [app-ssr] (ecmascript)");
;
;
class GPUTransitionBase {
    constructor({ device, attribute, timeline }){
        this.buffers = [];
        /** The vertex count of the last buffer.
         * Buffer may be larger than the actual length we want to use
         * because we only reallocate buffers when they grow, not when they shrink,
         * due to performance costs */ this.currentLength = 0;
        this.device = device;
        this.transition = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](timeline);
        this.attribute = attribute;
        this.attributeInTransition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cloneAttribute"])(attribute);
        this.currentStartIndices = attribute.startIndices;
    }
    get inProgress() {
        return this.transition.inProgress;
    }
    start(transitionSettings, numInstances, duration = Infinity) {
        this.settings = transitionSettings;
        this.currentStartIndices = this.attribute.startIndices;
        this.currentLength = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAttributeBufferLength"])(this.attribute, numInstances);
        this.transition.start({
            ...transitionSettings,
            duration
        });
    }
    update() {
        const updated = this.transition.update();
        if (updated) {
            this.onUpdate();
        }
        return updated;
    }
    setBuffer(buffer) {
        this.attributeInTransition.setData({
            buffer,
            normalized: this.attribute.settings.normalized,
            // Retain placeholder value to generate correct shader layout
            value: this.attributeInTransition.value
        });
    }
    cancel() {
        this.transition.cancel();
    }
    delete() {
        this.cancel();
        for (const buffer of this.buffers){
            buffer.destroy();
        }
        this.buffers.length = 0;
    }
} //# sourceMappingURL=gpu-transition.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/gpu-interpolation-transition.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>GPUInterpolationTransition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/gpu-transition.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$compute$2f$buffer$2d$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/engine/dist/compute/buffer-transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$modules$2f$math$2f$fp64$2f$fp64$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64.js [app-ssr] (ecmascript) <locals>");
;
;
;
;
;
class GPUInterpolationTransition extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["GPUTransitionBase"] {
    constructor({ device, attribute, timeline }){
        super({
            device,
            attribute,
            timeline
        });
        this.type = 'interpolation';
        this.transform = getTransform(device, attribute);
    }
    start(transitionSettings, numInstances) {
        const prevLength = this.currentLength;
        const prevStartIndices = this.currentStartIndices;
        super.start(transitionSettings, numInstances, transitionSettings.duration);
        if (transitionSettings.duration <= 0) {
            this.transition.cancel();
            return;
        }
        const { buffers, attribute } = this;
        // Alternate between two buffers when new transitions start.
        // Last destination buffer is used as an attribute (from state),
        // And the other buffer is now the current buffer.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cycleBuffers"])(buffers);
        buffers[0] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["padBuffer"])({
            device: this.device,
            buffer: buffers[0],
            attribute,
            fromLength: prevLength,
            toLength: this.currentLength,
            fromStartIndices: prevStartIndices,
            getData: transitionSettings.enter
        });
        buffers[1] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["matchBuffer"])({
            device: this.device,
            source: buffers[0],
            target: buffers[1]
        });
        this.setBuffer(buffers[1]);
        const { transform } = this;
        const model = transform.model;
        let vertexCount = Math.floor(this.currentLength / attribute.size);
        if (useFp64(attribute)) {
            vertexCount /= 2;
        }
        model.setVertexCount(vertexCount);
        if (attribute.isConstant) {
            model.setAttributes({
                aFrom: buffers[0]
            });
            model.setConstantAttributes({
                aTo: attribute.value
            });
        } else {
            model.setAttributes({
                aFrom: buffers[0],
                aTo: attribute.getBuffer()
            });
        }
        transform.transformFeedback.setBuffers({
            vCurrent: buffers[1]
        });
    }
    onUpdate() {
        const { duration, easing } = this.settings;
        const { time } = this.transition;
        let t = time / duration;
        if (easing) {
            t = easing(t);
        }
        const { model } = this.transform;
        const interpolationProps = {
            time: t
        };
        model.shaderInputs.setProps({
            interpolation: interpolationProps
        });
        this.transform.run({
            discard: true
        });
    }
    delete() {
        super.delete();
        this.transform.destroy();
    }
}
const uniformBlock = `\
uniform interpolationUniforms {
  float time;
} interpolation;
`;
const interpolationUniforms = {
    name: 'interpolation',
    vs: uniformBlock,
    uniformTypes: {
        time: 'f32'
    }
};
const vs = `\
#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vCurrent;

void main(void) {
  vCurrent = mix(aFrom, aTo, interpolation.time);
  gl_Position = vec4(0.0);
}
`;
const vs64 = `\
#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aFrom64Low;
in ATTRIBUTE_TYPE aTo;
in ATTRIBUTE_TYPE aTo64Low;
out ATTRIBUTE_TYPE vCurrent;
out ATTRIBUTE_TYPE vCurrent64Low;

vec2 mix_fp64(vec2 a, vec2 b, float x) {
  vec2 range = sub_fp64(b, a);
  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}

void main(void) {
  for (int i=0; i<ATTRIBUTE_SIZE; i++) {
    vec2 value = mix_fp64(vec2(aFrom[i], aFrom64Low[i]), vec2(aTo[i], aTo64Low[i]), interpolation.time);
    vCurrent[i] = value.x;
    vCurrent64Low[i] = value.y;
  }
  gl_Position = vec4(0.0);
}
`;
function useFp64(attribute) {
    return attribute.doublePrecision && attribute.value instanceof Float64Array;
}
function getTransform(device, attribute) {
    const attributeSize = attribute.size;
    const attributeType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAttributeTypeFromSize"])(attributeSize);
    const inputFormat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFloat32VertexFormat"])(attributeSize);
    const bufferLayout = attribute.getBufferLayout();
    if (useFp64(attribute)) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$compute$2f$buffer$2d$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferTransform"](device, {
            vs: vs64,
            bufferLayout: [
                {
                    name: 'aFrom',
                    byteStride: 8 * attributeSize,
                    attributes: [
                        {
                            attribute: 'aFrom',
                            format: inputFormat,
                            byteOffset: 0
                        },
                        {
                            attribute: 'aFrom64Low',
                            format: inputFormat,
                            byteOffset: 4 * attributeSize
                        }
                    ]
                },
                {
                    name: 'aTo',
                    byteStride: 8 * attributeSize,
                    attributes: [
                        {
                            attribute: 'aTo',
                            format: inputFormat,
                            byteOffset: 0
                        },
                        {
                            attribute: 'aTo64Low',
                            format: inputFormat,
                            byteOffset: 4 * attributeSize
                        }
                    ]
                }
            ],
            // @ts-expect-error fp64 module only sets ONE uniform via defaultUniforms
            modules: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$modules$2f$math$2f$fp64$2f$fp64$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fp64arithmetic"],
                interpolationUniforms
            ],
            defines: {
                ATTRIBUTE_TYPE: attributeType,
                ATTRIBUTE_SIZE: attributeSize
            },
            // Default uniforms are not set without this
            moduleSettings: {},
            varyings: [
                'vCurrent',
                'vCurrent64Low'
            ],
            bufferMode: 35980,
            disableWarnings: true
        });
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$compute$2f$buffer$2d$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferTransform"](device, {
        vs,
        bufferLayout: [
            {
                name: 'aFrom',
                format: inputFormat
            },
            {
                name: 'aTo',
                format: bufferLayout.attributes[0].format
            }
        ],
        modules: [
            interpolationUniforms
        ],
        defines: {
            ATTRIBUTE_TYPE: attributeType
        },
        varyings: [
            'vCurrent'
        ],
        // TODO investigate why this is needed
        disableWarnings: true
    });
} //# sourceMappingURL=gpu-interpolation-transition.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/gpu-spring-transition.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>GPUSpringTransition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/gpu-transition.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$compute$2f$buffer$2d$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/engine/dist/compute/buffer-transform.js [app-ssr] (ecmascript)");
;
;
;
class GPUSpringTransition extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["GPUTransitionBase"] {
    constructor({ device, attribute, timeline }){
        super({
            device,
            attribute,
            timeline
        });
        this.type = 'spring';
        this.texture = getTexture(device);
        this.framebuffer = getFramebuffer(device, this.texture);
        this.transform = getTransform(device, attribute);
    }
    start(transitionSettings, numInstances) {
        const prevLength = this.currentLength;
        const prevStartIndices = this.currentStartIndices;
        super.start(transitionSettings, numInstances);
        const { buffers, attribute } = this;
        for(let i = 0; i < 2; i++){
            buffers[i] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["padBuffer"])({
                device: this.device,
                buffer: buffers[i],
                attribute,
                fromLength: prevLength,
                toLength: this.currentLength,
                fromStartIndices: prevStartIndices,
                getData: transitionSettings.enter
            });
        }
        buffers[2] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["matchBuffer"])({
            device: this.device,
            source: buffers[0],
            target: buffers[2]
        });
        this.setBuffer(buffers[1]);
        const { model } = this.transform;
        model.setVertexCount(Math.floor(this.currentLength / attribute.size));
        if (attribute.isConstant) {
            model.setConstantAttributes({
                aTo: attribute.value
            });
        } else {
            model.setAttributes({
                aTo: attribute.getBuffer()
            });
        }
    }
    onUpdate() {
        const { buffers, transform, framebuffer, transition } = this;
        const settings = this.settings;
        transform.model.setAttributes({
            aPrev: buffers[0],
            aCur: buffers[1]
        });
        transform.transformFeedback.setBuffers({
            vNext: buffers[2]
        });
        const springProps = {
            stiffness: settings.stiffness,
            damping: settings.damping
        };
        transform.model.shaderInputs.setProps({
            spring: springProps
        });
        transform.run({
            framebuffer,
            discard: false,
            parameters: {
                viewport: [
                    0,
                    0,
                    1,
                    1
                ]
            },
            clearColor: [
                0,
                0,
                0,
                0
            ]
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cycleBuffers"])(buffers);
        this.setBuffer(buffers[1]);
        const isTransitioning = this.device.readPixelsToArrayWebGL(framebuffer)[0] > 0;
        if (!isTransitioning) {
            transition.end();
        }
    }
    delete() {
        super.delete();
        this.transform.destroy();
        this.texture.destroy();
        this.framebuffer.destroy();
    }
}
const uniformBlock = `\
uniform springUniforms {
  float damping;
  float stiffness;
} spring;
`;
const springUniforms = {
    name: 'spring',
    vs: uniformBlock,
    uniformTypes: {
        damping: 'f32',
        stiffness: 'f32'
    }
};
const vs = `\
#version 300 es
#define SHADER_NAME spring-transition-vertex-shader

#define EPSILON 0.00001

in ATTRIBUTE_TYPE aPrev;
in ATTRIBUTE_TYPE aCur;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vNext;
out float vIsTransitioningFlag;

ATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {
  ATTRIBUTE_TYPE velocity = cur - prev;
  ATTRIBUTE_TYPE delta = dest - cur;
  ATTRIBUTE_TYPE force = delta * spring.stiffness;
  ATTRIBUTE_TYPE resistance = velocity * spring.damping;
  return force - resistance + velocity + cur;
}

void main(void) {
  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;
  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;

  vNext = getNextValue(aCur, aPrev, aTo);
  gl_Position = vec4(0, 0, 0, 1);
  gl_PointSize = 100.0;
}
`;
const fs = `\
#version 300 es
#define SHADER_NAME spring-transition-is-transitioning-fragment-shader

in float vIsTransitioningFlag;

out vec4 fragColor;

void main(void) {
  if (vIsTransitioningFlag == 0.0) {
    discard;
  }
  fragColor = vec4(1.0);
}`;
function getTransform(device, attribute) {
    const attributeType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAttributeTypeFromSize"])(attribute.size);
    const format = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$transition$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFloat32VertexFormat"])(attribute.size);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$compute$2f$buffer$2d$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferTransform"](device, {
        vs,
        fs,
        bufferLayout: [
            {
                name: 'aPrev',
                format
            },
            {
                name: 'aCur',
                format
            },
            {
                name: 'aTo',
                format: attribute.getBufferLayout().attributes[0].format
            }
        ],
        varyings: [
            'vNext'
        ],
        modules: [
            springUniforms
        ],
        defines: {
            ATTRIBUTE_TYPE: attributeType
        },
        parameters: {
            depthCompare: 'always',
            blendColorOperation: 'max',
            blendColorSrcFactor: 'one',
            blendColorDstFactor: 'one',
            blendAlphaOperation: 'max',
            blendAlphaSrcFactor: 'one',
            blendAlphaDstFactor: 'one'
        }
    });
}
function getTexture(device) {
    return device.createTexture({
        data: new Uint8Array(4),
        format: 'rgba8unorm',
        mipmaps: false,
        width: 1,
        height: 1
    });
}
function getFramebuffer(device, texture) {
    return device.createFramebuffer({
        id: 'spring-transition-is-transitioning-framebuffer',
        width: 1,
        height: 1,
        colorAttachments: [
            texture
        ]
    });
} //# sourceMappingURL=gpu-spring-transition.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute-transition-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// deck.gl, MIT license
__turbopack_esm__({
    "default": (()=>AttributeTransitionManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$interpolation$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/gpu-interpolation-transition.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$spring$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/gpu-spring-transition.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
;
;
;
const TRANSITION_TYPES = {
    interpolation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$interpolation$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
    spring: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$gpu$2d$spring$2d$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
};
class AttributeTransitionManager {
    constructor(device, { id, timeline }){
        if (!device) throw new Error('AttributeTransitionManager is constructed without device');
        this.id = id;
        this.device = device;
        this.timeline = timeline;
        this.transitions = {};
        this.needsRedraw = false;
        this.numInstances = 1;
    }
    finalize() {
        for(const attributeName in this.transitions){
            this._removeTransition(attributeName);
        }
    }
    /* Public methods */ // Called when attribute manager updates
    // Check the latest attributes for updates.
    update({ attributes, transitions, numInstances }) {
        // Transform class will crash if elementCount is 0
        this.numInstances = numInstances || 1;
        for(const attributeName in attributes){
            const attribute = attributes[attributeName];
            const settings = attribute.getTransitionSetting(transitions);
            // this attribute might not support transitions?
            if (!settings) continue; // eslint-disable-line no-continue
            this._updateAttribute(attributeName, attribute, settings);
        }
        for(const attributeName in this.transitions){
            const attribute = attributes[attributeName];
            if (!attribute || !attribute.getTransitionSetting(transitions)) {
                // Animated attribute has been removed
                this._removeTransition(attributeName);
            }
        }
    }
    // Returns `true` if attribute is transition-enabled
    hasAttribute(attributeName) {
        const transition = this.transitions[attributeName];
        return transition && transition.inProgress;
    }
    // Get all the animated attributes
    getAttributes() {
        const animatedAttributes = {};
        for(const attributeName in this.transitions){
            const transition = this.transitions[attributeName];
            if (transition.inProgress) {
                animatedAttributes[attributeName] = transition.attributeInTransition;
            }
        }
        return animatedAttributes;
    }
    /* eslint-disable max-statements */ // Called every render cycle, run transform feedback
    // Returns `true` if anything changes
    run() {
        if (this.numInstances === 0) {
            return false;
        }
        for(const attributeName in this.transitions){
            const updated = this.transitions[attributeName].update();
            if (updated) {
                this.needsRedraw = true;
            }
        }
        const needsRedraw = this.needsRedraw;
        this.needsRedraw = false;
        return needsRedraw;
    }
    /* eslint-enable max-statements */ /* Private methods */ _removeTransition(attributeName) {
        this.transitions[attributeName].delete();
        delete this.transitions[attributeName];
    }
    // Check an attributes for updates
    // Returns a transition object if a new transition is triggered.
    _updateAttribute(attributeName, attribute, settings) {
        const transition = this.transitions[attributeName];
        // an attribute can change transition type when it updates
        // let's remove the transition when that happens so we can create the new transition type
        // TODO: when switching transition types, make sure to carry over the attribute's
        // previous buffers, currentLength, startIndices, etc, to be used as the starting point
        // for the next transition
        let isNew = !transition || transition.type !== settings.type;
        if (isNew) {
            if (transition) {
                this._removeTransition(attributeName);
            }
            const TransitionType = TRANSITION_TYPES[settings.type];
            if (TransitionType) {
                this.transitions[attributeName] = new TransitionType({
                    attribute,
                    timeline: this.timeline,
                    device: this.device
                });
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].error(`unsupported transition type '${settings.type}'`)();
                isNew = false;
            }
        }
        if (isNew || attribute.needsRedraw()) {
            this.needsRedraw = true;
            this.transitions[attributeName].start(settings, this.numInstances);
        }
    }
} //# sourceMappingURL=attribute-transition-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* eslint-disable guard-for-in */ __turbopack_esm__({
    "default": (()=>AttributeManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/memoize.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/math-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2d$transition$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute-transition-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/debug/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
const TRACE_INVALIDATE = 'attributeManager.invalidate';
const TRACE_UPDATE_START = 'attributeManager.updateStart';
const TRACE_UPDATE_END = 'attributeManager.updateEnd';
const TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';
const TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';
const TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';
class AttributeManager {
    constructor(device, { id = 'attribute-manager', stats, timeline } = {}){
        this.mergeBoundsMemoized = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$math$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["mergeBounds"]);
        this.id = id;
        this.device = device;
        this.attributes = {};
        this.updateTriggers = {};
        this.needsRedraw = true;
        this.userData = {};
        this.stats = stats;
        this.attributeTransitionManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2d$transition$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](device, {
            id: `${id}-transitions`,
            timeline
        });
        // For debugging sanity, prevent uninitialized members
        Object.seal(this);
    }
    finalize() {
        for(const attributeName in this.attributes){
            this.attributes[attributeName].delete();
        }
        this.attributeTransitionManager.finalize();
    }
    // Returns the redraw flag, optionally clearing it.
    // Redraw flag will be set if any attributes attributes changed since
    // flag was last cleared.
    //
    // @param {String} [clearRedrawFlags=false] - whether to clear the flag
    // @return {false|String} - reason a redraw is needed.
    getNeedsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this.needsRedraw;
        this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;
        return redraw && this.id;
    }
    // Sets the redraw flag.
    // @param {Boolean} redraw=true
    setNeedsRedraw() {
        this.needsRedraw = true;
    }
    // Adds attributes
    add(attributes) {
        this._add(attributes);
    }
    // Adds attributes
    addInstanced(attributes) {
        this._add(attributes, {
            stepMode: 'instance'
        });
    }
    /**
     * Removes attributes
     * Takes an array of attribute names and delete them from
     * the attribute map if they exists
     *
     * @example
     * attributeManager.remove(['position']);
     *
     * @param {Object} attributeNameArray - attribute name array (see above)
     */ remove(attributeNameArray) {
        for (const name of attributeNameArray){
            if (this.attributes[name] !== undefined) {
                this.attributes[name].delete();
                delete this.attributes[name];
            }
        }
    }
    // Marks an attribute for update
    invalidate(triggerName, dataRange) {
        const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);
        // For performance tuning
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);
    }
    invalidateAll(dataRange) {
        for(const attributeName in this.attributes){
            this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);
        }
        // For performance tuning
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_INVALIDATE, this, 'all');
    }
    // Ensure all attribute buffers are updated from props or data.
    // eslint-disable-next-line complexity
    update({ data, numInstances, startIndices = null, transitions, props = {}, buffers = {}, context = {} }) {
        // keep track of whether some attributes are updated
        let updated = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_UPDATE_START, this);
        if (this.stats) {
            this.stats.get('Update Attributes').timeStart();
        }
        for(const attributeName in this.attributes){
            const attribute = this.attributes[attributeName];
            const accessorName = attribute.settings.accessor;
            attribute.startIndices = startIndices;
            attribute.numInstances = numInstances;
            if (props[attributeName]) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();
            }
            if (attribute.setExternalBuffer(buffers[attributeName])) {
            // Step 1: try update attribute directly from external buffers
            } else if (attribute.setBinaryValue(typeof accessorName === 'string' ? buffers[accessorName] : undefined, data.startIndices)) {
            // Step 2: try set packed value from external typed array
            } else if (typeof accessorName === 'string' && !buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {
            // Step 3: try set constant value from props
            // Note: if buffers[accessorName] is supplied, ignore props[accessorName]
            // This may happen when setBinaryValue falls through to use the auto updater
            } else if (attribute.needsUpdate()) {
                // Step 4: update via updater callback
                updated = true;
                this._updateAttribute({
                    attribute,
                    numInstances,
                    data,
                    props,
                    context
                });
            }
            this.needsRedraw = this.needsRedraw || attribute.needsRedraw();
        }
        if (updated) {
            // Only initiate alloc/update (and logging) if actually needed
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_UPDATE_END, this, numInstances);
        }
        if (this.stats) {
            this.stats.get('Update Attributes').timeEnd();
        }
        this.attributeTransitionManager.update({
            attributes: this.attributes,
            numInstances,
            transitions
        });
    }
    // Update attribute transition to the current timestamp
    // Returns `true` if any transition is in progress
    updateTransition() {
        const { attributeTransitionManager } = this;
        const transitionUpdated = attributeTransitionManager.run();
        this.needsRedraw = this.needsRedraw || transitionUpdated;
        return transitionUpdated;
    }
    /**
     * Returns all attribute descriptors
     * Note: Format matches luma.gl Model/Program.setAttributes()
     * @return {Object} attributes - descriptors
     */ getAttributes() {
        return {
            ...this.attributes,
            ...this.attributeTransitionManager.getAttributes()
        };
    }
    /**
     * Computes the spatial bounds of a given set of attributes
     */ getBounds(attributeNames) {
        const bounds = attributeNames.map((attributeName)=>this.attributes[attributeName]?.getBounds());
        return this.mergeBoundsMemoized(bounds);
    }
    /**
     * Returns changed attribute descriptors
     * This indicates which WebGLBuffers need to be updated
     * @return {Object} attributes - descriptors
     */ getChangedAttributes(opts = {
        clearChangedFlags: false
    }) {
        const { attributes, attributeTransitionManager } = this;
        const changedAttributes = {
            ...attributeTransitionManager.getAttributes()
        };
        for(const attributeName in attributes){
            const attribute = attributes[attributeName];
            if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {
                changedAttributes[attributeName] = attribute;
            }
        }
        return changedAttributes;
    }
    /** Generate WebGPU-style buffer layout descriptors from all attributes */ getBufferLayouts(/** A luma.gl Model-shaped object that supplies additional hint to attribute resolution */ modelInfo) {
        return Object.values(this.getAttributes()).map((attribute)=>attribute.getBufferLayout(modelInfo));
    }
    // PRIVATE METHODS
    /** Register new attributes */ _add(/** A map from attribute name to attribute descriptors */ attributes, /** Additional attribute settings to pass to all attributes */ overrideOptions) {
        for(const attributeName in attributes){
            const attribute = attributes[attributeName];
            const props = {
                ...attribute,
                id: attributeName,
                size: attribute.isIndexed && 1 || attribute.size || 1,
                ...overrideOptions
            };
            // Initialize the attribute descriptor, with WebGL and metadata fields
            this.attributes[attributeName] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](this.device, props);
        }
        this._mapUpdateTriggersToAttributes();
    }
    // build updateTrigger name to attribute name mapping
    _mapUpdateTriggersToAttributes() {
        const triggers = {};
        for(const attributeName in this.attributes){
            const attribute = this.attributes[attributeName];
            attribute.getUpdateTriggers().forEach((triggerName)=>{
                if (!triggers[triggerName]) {
                    triggers[triggerName] = [];
                }
                triggers[triggerName].push(attributeName);
            });
        }
        this.updateTriggers = triggers;
    }
    _invalidateTrigger(triggerName, dataRange) {
        const { attributes, updateTriggers } = this;
        const invalidatedAttributes = updateTriggers[triggerName];
        if (invalidatedAttributes) {
            invalidatedAttributes.forEach((name)=>{
                const attribute = attributes[name];
                if (attribute) {
                    attribute.setNeedsUpdate(attribute.id, dataRange);
                }
            });
        }
        return invalidatedAttributes;
    }
    _updateAttribute(opts) {
        const { attribute, numInstances } = opts;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_ATTRIBUTE_UPDATE_START, attribute);
        if (attribute.constant) {
            // The attribute is flagged as constant outside of an update cycle
            // Skip allocation and updater call
            // @ts-ignore value can be set to an array by user but always cast to typed array during attribute update
            attribute.setConstantValue(attribute.value);
            return;
        }
        if (attribute.allocate(numInstances)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);
        }
        // Calls update on any buffers that need update
        const updated = attribute.updateBuffer(opts);
        if (updated) {
            this.needsRedraw = true;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);
        }
    }
} //# sourceMappingURL=attribute-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Fast partial deep equal for prop.
 *
 * @param a Prop
 * @param b Prop to compare against `a`
 * @param depth Depth to which to recurse in nested Objects/Arrays. Use 0 (default) for shallow comparison, -1 for infinite depth
 */ /* eslint-disable complexity */ __turbopack_esm__({
    "deepEqual": (()=>deepEqual)
});
function deepEqual(a, b, depth) {
    if (a === b) {
        return true;
    }
    if (!depth || !a || !b) {
        return false;
    }
    if (Array.isArray(a)) {
        if (!Array.isArray(b) || a.length !== b.length) {
            return false;
        }
        for(let i = 0; i < a.length; i++){
            if (!deepEqual(a[i], b[i], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    if (Array.isArray(b)) {
        return false;
    }
    if (typeof a === 'object' && typeof b === 'object') {
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
            return false;
        }
        for (const key of aKeys){
            if (!b.hasOwnProperty(key)) {
                return false;
            }
            if (!deepEqual(a[key], b[key], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    return false;
} //# sourceMappingURL=deep-equal.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/texture.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "createTexture": (()=>createTexture),
    "destroyTexture": (()=>destroyTexture)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$texture$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/core/dist/adapter/resources/texture.js [app-ssr] (ecmascript)");
;
const DEFAULT_TEXTURE_PARAMETERS = {
    minFilter: 'linear',
    mipmapFilter: 'linear',
    magFilter: 'linear',
    addressModeU: 'clamp-to-edge',
    addressModeV: 'clamp-to-edge'
};
// Track the textures that are created by us. They need to be released when they are no longer used.
const internalTextures = {};
function createTexture(owner, device, image, sampler) {
    if (image instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$texture$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Texture"]) {
        return image;
    } else if (image.constructor && image.constructor.name !== 'Object') {
        // Browser object
        image = {
            data: image
        };
    }
    let samplerParameters = null;
    if (image.compressed) {
        samplerParameters = {
            minFilter: 'linear',
            mipmapFilter: image.data.length > 1 ? 'nearest' : 'linear'
        };
    }
    const texture = device.createTexture({
        ...image,
        sampler: {
            ...DEFAULT_TEXTURE_PARAMETERS,
            ...samplerParameters,
            ...sampler
        },
        mipmaps: true
    });
    // Track this texture
    internalTextures[texture.id] = owner;
    return texture;
}
function destroyTexture(owner, texture) {
    if (!texture || !(texture instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$texture$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Texture"])) {
        return;
    }
    // Only delete the texture if requested by the same layer that created it
    if (internalTextures[texture.id] === owner) {
        texture.delete();
        delete internalTextures[texture.id];
    }
} //# sourceMappingURL=texture.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lifecycle/prop-types.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "parsePropTypes": (()=>parsePropTypes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$texture$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/texture.js [app-ssr] (ecmascript)");
;
;
const TYPE_DEFINITIONS = {
    boolean: {
        validate (value, propType) {
            return true;
        },
        equal (value1, value2, propType) {
            return Boolean(value1) === Boolean(value2);
        }
    },
    number: {
        validate (value, propType) {
            return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);
        }
    },
    color: {
        validate (value, propType) {
            return propType.optional && !value || isArray(value) && (value.length === 3 || value.length === 4);
        },
        equal (value1, value2, propType) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(value1, value2, 1);
        }
    },
    accessor: {
        validate (value, propType) {
            const valueType = getTypeOf(value);
            return valueType === 'function' || valueType === getTypeOf(propType.value);
        },
        equal (value1, value2, propType) {
            if (typeof value2 === 'function') {
                return true;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(value1, value2, 1);
        }
    },
    array: {
        validate (value, propType) {
            return propType.optional && !value || isArray(value);
        },
        equal (value1, value2, propType) {
            const { compare } = propType;
            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
            return compare ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(value1, value2, depth) : value1 === value2;
        }
    },
    object: {
        equal (value1, value2, propType) {
            if (propType.ignore) {
                return true;
            }
            const { compare } = propType;
            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
            return compare ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(value1, value2, depth) : value1 === value2;
        }
    },
    function: {
        validate (value, propType) {
            return propType.optional && !value || typeof value === 'function';
        },
        equal (value1, value2, propType) {
            // Backward compatibility - {compare: true} and {ignore: false} are equivalent
            const shouldIgnore = !propType.compare && propType.ignore !== false;
            return shouldIgnore || value1 === value2;
        }
    },
    data: {
        transform: (value, propType, component)=>{
            if (!value) {
                return value;
            }
            const { dataTransform } = component.props;
            if (dataTransform) {
                return dataTransform(value);
            }
            // Detect loaders.gl v4 table format
            if (typeof value.shape === 'string' && value.shape.endsWith('-table') && Array.isArray(value.data)) {
                return value.data;
            }
            return value;
        }
    },
    image: {
        transform: (value, propType, component)=>{
            const context = component.context;
            if (!context || !context.device) {
                return null;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$texture$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createTexture"])(component.id, context.device, value, {
                ...propType.parameters,
                ...component.props.textureParameters
            });
        },
        release: (value, propType, component)=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$texture$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["destroyTexture"])(component.id, value);
        }
    }
};
function parsePropTypes(propDefs) {
    const propTypes = {};
    const defaultProps = {};
    const deprecatedProps = {};
    for (const [propName, propDef] of Object.entries(propDefs)){
        const deprecated = propDef?.deprecatedFor;
        if (deprecated) {
            deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [
                deprecated
            ];
        } else {
            const propType = parsePropType(propName, propDef);
            propTypes[propName] = propType;
            defaultProps[propName] = propType.value;
        }
    }
    return {
        propTypes,
        defaultProps,
        deprecatedProps
    };
}
// Parses one property definition entry. Either contains:
// * a valid prop type object ({type, ...})
// * or just a default value, in which case type and name inference is used
function parsePropType(name, propDef) {
    switch(getTypeOf(propDef)){
        case 'object':
            return normalizePropDefinition(name, propDef);
        case 'array':
            return normalizePropDefinition(name, {
                type: 'array',
                value: propDef,
                compare: false
            });
        case 'boolean':
            return normalizePropDefinition(name, {
                type: 'boolean',
                value: propDef
            });
        case 'number':
            return normalizePropDefinition(name, {
                type: 'number',
                value: propDef
            });
        case 'function':
            // return guessFunctionType(name, propDef);
            return normalizePropDefinition(name, {
                type: 'function',
                value: propDef,
                compare: true
            });
        default:
            return {
                name,
                type: 'unknown',
                value: propDef
            };
    }
}
function normalizePropDefinition(name, propDef) {
    if (!('type' in propDef)) {
        if (!('value' in propDef)) {
            // If no type and value this object is likely the value
            return {
                name,
                type: 'object',
                value: propDef
            };
        }
        return {
            name,
            type: getTypeOf(propDef.value),
            ...propDef
        };
    }
    return {
        name,
        ...TYPE_DEFINITIONS[propDef.type],
        ...propDef
    };
}
function isArray(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value);
}
// improved version of javascript typeof that can distinguish arrays and null values
function getTypeOf(value) {
    if (isArray(value)) {
        return 'array';
    }
    if (value === null) {
        return 'null';
    }
    return typeof value;
} //# sourceMappingURL=prop-types.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lifecycle/create-props.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "createProps": (()=>createProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$component$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/component.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$prop$2d$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/prop-types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/iterable-utils.js [app-ssr] (ecmascript)");
;
;
;
;
;
function createProps(component, propObjects) {
    // Resolve extension value
    let extensions;
    for(let i = propObjects.length - 1; i >= 0; i--){
        const props = propObjects[i];
        if ('extensions' in props) {
            // @ts-expect-error TS(2339) extensions not defined
            extensions = props.extensions;
        }
    }
    // Create a new prop object with empty default props object
    const propsPrototype = getPropsPrototype(component.constructor, extensions);
    // The true default props object will be found later
    const propsInstance = Object.create(propsPrototype);
    // Props need a back pointer to the owning component
    propsInstance[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COMPONENT_SYMBOL"]] = component;
    // The supplied (original) values for those async props that are set to url strings or Promises.
    // In this case, the actual (i.e. resolved) values are looked up from component.internalState
    propsInstance[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_ORIGINAL_SYMBOL"]] = {};
    // Note: the actual (resolved) values for props that are NOT set to urls or Promises.
    // in this case the values are served directly from this map
    propsInstance[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]] = {};
    // "Copy" all sync props
    for(let i = 0; i < propObjects.length; ++i){
        const props = propObjects[i];
        // Do not use Object.assign here to avoid Symbols in props overwriting our private fields
        // This might happen if one of the arguments is another props instance
        for(const key in props){
            propsInstance[key] = props[key];
        }
    }
    // Props must be immutable
    Object.freeze(propsInstance);
    return propsInstance;
}
const MergedDefaultPropsCacheKey = '_mergedDefaultProps';
// Return precalculated defaultProps and propType objects if available
// build them if needed
function getPropsPrototype(componentClass, extensions) {
    // Bail out if we're not looking at a component - for two reasons:
    // 1. There's no reason for an ancestor of component to have props
    // 2. If we don't bail out, we'll follow the prototype chain all the way back to the global
    // function prototype and add _mergedDefaultProps to it, which may break other frameworks
    // (e.g. the react-three-fiber reconciler)
    if (!(componentClass instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$component$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].constructor)) return {};
    // A string that uniquely identifies the extensions involved
    let cacheKey = MergedDefaultPropsCacheKey;
    if (extensions) {
        for (const extension of extensions){
            const ExtensionClass = extension.constructor;
            if (ExtensionClass) {
                cacheKey += `:${ExtensionClass.extensionName || ExtensionClass.name}`;
            }
        }
    }
    const defaultProps = getOwnProperty(componentClass, cacheKey);
    if (!defaultProps) {
        return componentClass[cacheKey] = createPropsPrototypeAndTypes(componentClass, extensions || []);
    }
    return defaultProps;
}
// Build defaultProps and propType objects by walking component prototype chain
function createPropsPrototypeAndTypes(componentClass, extensions) {
    const parent = componentClass.prototype;
    if (!parent) {
        return null;
    }
    const parentClass = Object.getPrototypeOf(componentClass);
    const parentDefaultProps = getPropsPrototype(parentClass);
    // Parse propTypes from Component.defaultProps
    const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};
    const componentPropDefs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$prop$2d$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePropTypes"])(componentDefaultProps);
    // Merged default props object. Order: parent, self, extensions
    const defaultProps = Object.assign(Object.create(null), parentDefaultProps, componentPropDefs.defaultProps);
    // Merged prop type definitions. Order: parent, self, extensions
    const propTypes = Object.assign(Object.create(null), parentDefaultProps?.[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]], componentPropDefs.propTypes);
    // Merged deprecation list. Order: parent, self, extensions
    const deprecatedProps = Object.assign(Object.create(null), parentDefaultProps?.[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEPRECATED_PROPS_SYMBOL"]], componentPropDefs.deprecatedProps);
    for (const extension of extensions){
        const extensionDefaultProps = getPropsPrototype(extension.constructor);
        if (extensionDefaultProps) {
            Object.assign(defaultProps, extensionDefaultProps);
            Object.assign(propTypes, extensionDefaultProps[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]]);
            Object.assign(deprecatedProps, extensionDefaultProps[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEPRECATED_PROPS_SYMBOL"]]);
        }
    }
    // Create any necessary property descriptors and create the default prop object
    // Assign merged default props
    createPropsPrototype(defaultProps, componentClass);
    // Add getters/setters for async props
    addAsyncPropsToPropPrototype(defaultProps, propTypes);
    // Add setters for deprecated props
    addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);
    // Store the precalculated props
    defaultProps[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]] = propTypes;
    defaultProps[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEPRECATED_PROPS_SYMBOL"]] = deprecatedProps;
    // Backwards compatibility
    // TODO: remove access of hidden property from the rest of the code base
    if (extensions.length === 0 && !hasOwnProperty(componentClass, '_propTypes')) {
        componentClass._propTypes = propTypes;
    }
    return defaultProps;
}
// Builds a pre-merged default props object that component props can inherit from
function createPropsPrototype(defaultProps, componentClass) {
    // Avoid freezing `id` prop
    const id = getComponentName(componentClass);
    Object.defineProperties(defaultProps, {
        // `id` is treated specially because layer might need to override it
        id: {
            writable: true,
            value: id
        }
    });
}
function addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {
    for(const propName in deprecatedProps){
        /* eslint-disable accessor-pairs */ Object.defineProperty(defaultProps, propName, {
            enumerable: false,
            set (newValue) {
                const nameStr = `${this.id}: ${propName}`;
                for (const newPropName of deprecatedProps[propName]){
                    if (!hasOwnProperty(this, newPropName)) {
                        this[newPropName] = newValue;
                    }
                }
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].deprecated(nameStr, deprecatedProps[propName].join('/'))();
            }
        });
    /* eslint-enable accessor-pairs */ }
}
// Create descriptors for overridable props
function addAsyncPropsToPropPrototype(defaultProps, propTypes) {
    const defaultValues = {};
    const descriptors = {};
    // Move async props into shadow values
    for(const propName in propTypes){
        const propType = propTypes[propName];
        const { name, value } = propType;
        // Note: async is ES7 keyword, can't destructure
        if (propType.async) {
            defaultValues[name] = value;
            descriptors[name] = getDescriptorForAsyncProp(name);
        }
    }
    // Default "resolved" values for async props, returned if value not yet resolved/set.
    defaultProps[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_DEFAULTS_SYMBOL"]] = defaultValues;
    // Shadowed object, just to make sure "early indexing" into the instance does not fail
    defaultProps[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_ORIGINAL_SYMBOL"]] = {};
    Object.defineProperties(defaultProps, descriptors);
}
// Helper: Configures getter and setter for one async prop
function getDescriptorForAsyncProp(name) {
    return {
        enumerable: true,
        // Save the provided value for async props in a special map
        set (newValue) {
            if (typeof newValue === 'string' || newValue instanceof Promise || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAsyncIterable"])(newValue)) {
                this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_ORIGINAL_SYMBOL"]][name] = newValue;
            } else {
                this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]][name] = newValue;
            }
        },
        // Only the component's state knows the true value of async prop
        get () {
            if (this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]]) {
                // Prop value isn't async, so just return it
                if (name in this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]]) {
                    const value = this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]][name];
                    return value || this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_DEFAULTS_SYMBOL"]][name];
                }
                if (name in this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_ORIGINAL_SYMBOL"]]) {
                    // It's an async prop value: look into component state
                    const state = this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COMPONENT_SYMBOL"]] && this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COMPONENT_SYMBOL"]].internalState;
                    if (state && state.hasAsyncProp(name)) {
                        return state.getAsyncProp(name) || this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_DEFAULTS_SYMBOL"]][name];
                    }
                }
            }
            // the prop is not supplied, or
            // component not yet initialized/matched, return the component's default value for the prop
            return this[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_DEFAULTS_SYMBOL"]][name];
        }
    };
}
// HELPER METHODS
function hasOwnProperty(object, prop) {
    return Object.prototype.hasOwnProperty.call(object, prop);
}
// Constructors have their super class constructors as prototypes
function getOwnProperty(object, prop) {
    return hasOwnProperty(object, prop) && object[prop];
}
function getComponentName(componentClass) {
    const componentName = componentClass.componentName;
    if (!componentName) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn(`${componentClass.name}.componentName not specified`)();
    }
    return componentName || componentClass.name;
} //# sourceMappingURL=create-props.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lifecycle/component.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$create$2d$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/create-props.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)");
;
;
let counter = 0;
class Component {
    constructor(...propObjects){
        // Merge supplied props with default props and freeze them.
        /* eslint-disable prefer-spread */ this.props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$create$2d$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createProps"])(this, propObjects);
        /* eslint-enable prefer-spread */ this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle
        this.count = counter++; // Keep track of how many layer instances you are generating
    }
    // clone this layer with modified props
    clone(newProps) {
        const { props } = this;
        // Async props cannot be copied with Object.assign, copy them separately
        const asyncProps = {};
        // See async props definition in create-props.js
        for(const key in props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_DEFAULTS_SYMBOL"]]){
            if (key in props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]]) {
                asyncProps[key] = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_RESOLVED_SYMBOL"]][key];
            } else if (key in props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_ORIGINAL_SYMBOL"]]) {
                asyncProps[key] = props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ASYNC_ORIGINAL_SYMBOL"]][key];
            }
        }
        // Some custom layer implementation may not support multiple arguments in the constructor
        // @ts-ignore
        return new this.constructor({
            ...props,
            ...asyncProps,
            ...newProps
        });
    }
}
Component.componentName = 'Component';
Component.defaultProps = {};
const __TURBOPACK__default__export__ = Component;
 //# sourceMappingURL=component.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/layer.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* eslint-disable react/no-direct-mutation-state */ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/memoize.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$load$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@loaders.gl/core/dist/lib/api/load.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/assert.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2d$functions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/project/project-functions.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$count$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/count.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$shader$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/shader.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/typed-array-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/debug/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/layer-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$uniform$2d$transition$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/uniform-transition-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$device$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/props.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$component$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/component.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const TRACE_CHANGE_FLAG = 'layer.changeFlag';
const TRACE_INITIALIZE = 'layer.initialize';
const TRACE_UPDATE = 'layer.update';
const TRACE_FINALIZE = 'layer.finalize';
const TRACE_MATCHED = 'layer.matched';
const MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;
const EMPTY_ARRAY = Object.freeze([]);
// Only compare the same two viewports once
const areViewportsEqual = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(({ oldViewport, viewport })=>{
    return oldViewport.equals(viewport);
});
let pickingColorCache = new Uint8ClampedArray(0);
const defaultProps = {
    // data: Special handling for null, see below
    data: {
        type: 'data',
        value: EMPTY_ARRAY,
        async: true
    },
    dataComparator: {
        type: 'function',
        value: null,
        optional: true
    },
    _dataDiff: {
        type: 'function',
        // @ts-ignore __diff is not defined on data
        value: (data)=>data && data.__diff,
        optional: true
    },
    dataTransform: {
        type: 'function',
        value: null,
        optional: true
    },
    onDataLoad: {
        type: 'function',
        value: null,
        optional: true
    },
    onError: {
        type: 'function',
        value: null,
        optional: true
    },
    fetch: {
        type: 'function',
        value: (url, { propName, layer, loaders, loadOptions, signal })=>{
            const { resourceManager } = layer.context;
            loadOptions = loadOptions || layer.getLoadOptions();
            loaders = loaders || layer.props.loaders;
            if (signal) {
                loadOptions = {
                    ...loadOptions,
                    fetch: {
                        ...loadOptions?.fetch,
                        signal
                    }
                };
            }
            let inResourceManager = resourceManager.contains(url);
            if (!inResourceManager && !loadOptions) {
                // If there is no layer-specific load options, then attempt to cache this resource in the data manager
                resourceManager.add({
                    resourceId: url,
                    data: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$load$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["load"])(url, loaders),
                    persistent: false
                });
                inResourceManager = true;
            }
            if (inResourceManager) {
                return resourceManager.subscribe({
                    resourceId: url,
                    onChange: (data)=>layer.internalState?.reloadAsyncProp(propName, data),
                    consumerId: layer.id,
                    requestId: propName
                });
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$load$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["load"])(url, loaders, loadOptions);
        }
    },
    updateTriggers: {},
    visible: true,
    pickable: false,
    opacity: {
        type: 'number',
        min: 0,
        max: 1,
        value: 1
    },
    operation: 'draw',
    onHover: {
        type: 'function',
        value: null,
        optional: true
    },
    onClick: {
        type: 'function',
        value: null,
        optional: true
    },
    onDragStart: {
        type: 'function',
        value: null,
        optional: true
    },
    onDrag: {
        type: 'function',
        value: null,
        optional: true
    },
    onDragEnd: {
        type: 'function',
        value: null,
        optional: true
    },
    coordinateSystem: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].DEFAULT,
    coordinateOrigin: {
        type: 'array',
        value: [
            0,
            0,
            0
        ],
        compare: true
    },
    modelMatrix: {
        type: 'array',
        value: null,
        compare: true,
        optional: true
    },
    wrapLongitude: false,
    positionFormat: 'XYZ',
    colorFormat: 'RGBA',
    parameters: {
        type: 'object',
        value: {},
        optional: true,
        compare: 2
    },
    loadOptions: {
        type: 'object',
        value: null,
        optional: true,
        ignore: true
    },
    transitions: null,
    extensions: [],
    loaders: {
        type: 'array',
        value: [],
        optional: true,
        ignore: true
    },
    // Offset depth based on layer index to avoid z-fighting.
    // Negative values pull layer towards the camera
    // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm
    getPolygonOffset: {
        type: 'function',
        value: ({ layerIndex })=>[
                0,
                -layerIndex * 100
            ]
    },
    // Selection/Highlighting
    highlightedObjectIndex: null,
    autoHighlight: false,
    highlightColor: {
        type: 'accessor',
        value: [
            0,
            0,
            128,
            128
        ]
    }
};
class Layer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$component$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(){
        super(...arguments);
        this.internalState = null;
        this.lifecycle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LIFECYCLE"].NO_STATE; // Helps track and debug the life cycle of the layers
        this.parent = null;
    }
    static get componentName() {
        return Object.prototype.hasOwnProperty.call(this, 'layerName') ? this.layerName : '';
    }
    get root() {
        // eslint-disable-next-line
        let layer = this;
        while(layer.parent){
            layer = layer.parent;
        }
        return layer;
    }
    toString() {
        const className = this.constructor.layerName || this.constructor.name;
        return `${className}({id: '${this.props.id}'})`;
    }
    // Public API for users
    /** Projects a point with current view state from the current layer's coordinate system to screen */ project(xyz) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        const worldPosition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2d$functions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWorldPosition"])(xyz, {
            viewport,
            modelMatrix: this.props.modelMatrix,
            coordinateOrigin: this.props.coordinateOrigin,
            coordinateSystem: this.props.coordinateSystem
        });
        const [x, y, z] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["worldToPixels"])(worldPosition, viewport.pixelProjectionMatrix);
        return xyz.length === 2 ? [
            x,
            y
        ] : [
            x,
            y,
            z
        ];
    }
    /** Unprojects a screen pixel to the current view's default coordinate system
        Note: this does not reverse `project`. */ unproject(xy) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        return viewport.unproject(xy);
    }
    /** Projects a point with current view state from the current layer's coordinate system to the world space */ projectPosition(xyz, params) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2d$functions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["projectPosition"])(xyz, {
            viewport,
            modelMatrix: this.props.modelMatrix,
            coordinateOrigin: this.props.coordinateOrigin,
            coordinateSystem: this.props.coordinateSystem,
            ...params
        });
    }
    // Public API for custom layer implementation
    /** `true` if this layer renders other layers */ get isComposite() {
        return false;
    }
    /** `true` if the layer renders to screen */ get isDrawable() {
        return true;
    }
    /** Updates selected state members and marks the layer for redraw */ setState(partialState) {
        this.setChangeFlags({
            stateChanged: true
        });
        Object.assign(this.state, partialState);
        this.setNeedsRedraw();
    }
    /** Sets the redraw flag for this layer, will trigger a redraw next animation frame */ setNeedsRedraw() {
        if (this.internalState) {
            this.internalState.needsRedraw = true;
        }
    }
    /** Mark this layer as needs a deep update */ setNeedsUpdate() {
        if (this.internalState) {
            this.context.layerManager.setNeedsUpdate(String(this));
            this.internalState.needsUpdate = true;
        }
    }
    /** Returns true if all async resources are loaded */ get isLoaded() {
        return this.internalState ? !this.internalState.isAsyncPropLoading() : false;
    }
    /** Returns true if using shader-based WGS84 longitude wrapping */ get wrapLongitude() {
        return this.props.wrapLongitude;
    }
    /** @deprecated Returns true if the layer is visible in the picking pass */ isPickable() {
        return this.props.pickable && this.props.visible;
    }
    /** Returns an array of models used by this layer, can be overriden by layer subclass */ getModels() {
        const state = this.state;
        return state && (state.models || state.model && [
            state.model
        ]) || [];
    }
    /** Update shader input parameters */ setShaderModuleProps(...props) {
        for (const model of this.getModels()){
            model.shaderInputs.setProps(...props);
        }
    }
    /** Returns the attribute manager of this layer */ getAttributeManager() {
        return this.internalState && this.internalState.attributeManager;
    }
    /** Returns the most recent layer that matched to this state
      (When reacting to an async event, this layer may no longer be the latest) */ getCurrentLayer() {
        return this.internalState && this.internalState.layer;
    }
    /** Returns the default parse options for async props */ getLoadOptions() {
        return this.props.loadOptions;
    }
    use64bitPositions() {
        const { coordinateSystem } = this.props;
        return coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].DEFAULT || coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT || coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].CARTESIAN;
    }
    // Event handling
    onHover(info, pickingEvent) {
        if (this.props.onHover) {
            return this.props.onHover(info, pickingEvent) || false;
        }
        return false;
    }
    onClick(info, pickingEvent) {
        if (this.props.onClick) {
            return this.props.onClick(info, pickingEvent) || false;
        }
        return false;
    }
    // Returns the picking color that doesn't match any subfeature
    // Use if some graphics do not belong to any pickable subfeature
    // @return {Array} - a black color
    nullPickingColor() {
        return [
            0,
            0,
            0
        ];
    }
    // Returns the picking color that doesn't match any subfeature
    // Use if some graphics do not belong to any pickable subfeature
    encodePickingColor(i, target = []) {
        target[0] = i + 1 & 255;
        target[1] = i + 1 >> 8 & 255;
        target[2] = i + 1 >> 8 >> 8 & 255;
        return target;
    }
    // Returns the index corresponding to a picking color that doesn't match any subfeature
    // @param {Uint8Array} color - color array to be decoded
    // @return {Array} - the decoded picking color
    decodePickingColor(color) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(color instanceof Uint8Array);
        const [i1, i2, i3] = color;
        // 1 was added to seperate from no selection
        const index = i1 + i2 * 256 + i3 * 65536 - 1;
        return index;
    }
    /** Deduces number of instances. Intention is to support:
      - Explicit setting of numInstances
      - Auto-deduction for ES6 containers that define a size member
      - Auto-deduction for Classic Arrays via the built-in length attribute
      - Auto-deduction via arrays */ getNumInstances() {
        // First Check if app has provided an explicit value
        if (Number.isFinite(this.props.numInstances)) {
            return this.props.numInstances;
        }
        // Second check if the layer has set its own value
        if (this.state && this.state.numInstances !== undefined) {
            return this.state.numInstances;
        }
        // Use container library to get a count for any ES6 container or object
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$count$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["count"])(this.props.data);
    }
    /** Buffer layout describes how many attribute values are packed for each data object
        The default (null) is one value each object.
        Some data formats (e.g. paths, polygons) have various length. Their buffer layout
        is in the form of [L0, L1, L2, ...] */ getStartIndices() {
        // First Check if startIndices is provided as an explicit value
        if (this.props.startIndices) {
            return this.props.startIndices;
        }
        // Second check if the layer has set its own value
        if (this.state && this.state.startIndices) {
            return this.state.startIndices;
        }
        return null;
    }
    // Default implementation
    getBounds() {
        return this.getAttributeManager()?.getBounds([
            'positions',
            'instancePositions'
        ]);
    }
    getShaders(shaders) {
        shaders = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$shader$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["mergeShaders"])(shaders, {
            disableWarnings: true,
            modules: this.context.defaultShaderModules
        });
        for (const extension of this.props.extensions){
            shaders = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$shader$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["mergeShaders"])(shaders, extension.getShaders.call(this, extension));
        }
        return shaders;
    }
    /** Controls if updateState should be called. By default returns true if any prop has changed */ shouldUpdateState(params) {
        return params.changeFlags.propsOrDataChanged;
    }
    /** Default implementation, all attributes will be invalidated and updated when data changes */ // eslint-disable-next-line complexity
    updateState(params) {
        const attributeManager = this.getAttributeManager();
        const { dataChanged } = params.changeFlags;
        if (dataChanged && attributeManager) {
            if (Array.isArray(dataChanged)) {
                // is partial update
                for (const dataRange of dataChanged){
                    attributeManager.invalidateAll(dataRange);
                }
            } else {
                attributeManager.invalidateAll();
            }
        }
        // Enable/disable picking buffer
        if (attributeManager) {
            const { props } = params;
            const hasPickingBuffer = this.internalState.hasPickingBuffer;
            const needsPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable || props.extensions.some((extension)=>extension.getNeedsPickingBuffer.call(this, extension));
            // Only generate picking buffer if needed
            if (hasPickingBuffer !== needsPickingBuffer) {
                this.internalState.hasPickingBuffer = needsPickingBuffer;
                const { pickingColors, instancePickingColors } = attributeManager.attributes;
                const pickingColorsAttribute = pickingColors || instancePickingColors;
                if (pickingColorsAttribute) {
                    if (needsPickingBuffer && pickingColorsAttribute.constant) {
                        pickingColorsAttribute.constant = false;
                        attributeManager.invalidate(pickingColorsAttribute.id);
                    }
                    if (!pickingColorsAttribute.value && !needsPickingBuffer) {
                        pickingColorsAttribute.constant = true;
                        pickingColorsAttribute.value = [
                            0,
                            0,
                            0
                        ];
                    }
                }
            }
        }
    }
    /** Called once when layer is no longer matched and state will be discarded. Layers can destroy WebGL resources here. */ finalizeState(context) {
        for (const model of this.getModels()){
            model.destroy();
        }
        const attributeManager = this.getAttributeManager();
        if (attributeManager) {
            attributeManager.finalize();
        }
        if (this.context) {
            this.context.resourceManager.unsubscribe({
                consumerId: this.id
            });
        }
        if (this.internalState) {
            this.internalState.uniformTransitions.clear();
            this.internalState.finalize();
        }
    }
    // If state has a model, draw it with supplied uniforms
    draw(opts) {
        for (const model of this.getModels()){
            model.draw(opts.renderPass);
        }
    }
    // called to populate the info object that is passed to the event handler
    // @return null to cancel event
    getPickingInfo({ info, mode, sourceLayer }) {
        const { index } = info;
        if (index >= 0) {
            // If props.data is an indexable array, get the object
            if (Array.isArray(this.props.data)) {
                info.object = this.props.data[index];
            }
        }
        return info;
    }
    // END LIFECYCLE METHODS
    // / INTERNAL METHODS - called by LayerManager, DeckRenderer and DeckPicker
    /** (Internal) Propagate an error event through the system */ raiseError(error, message) {
        if (message) {
            // Duplicating error message for backward compatibility, see #7986
            // TODO - revisit in v9
            error = new Error(`${message}: ${error.message}`, {
                cause: error
            });
        }
        if (!this.props.onError?.(error)) {
            this.context?.onError?.(error, this);
        }
    }
    /** (Internal) Checks if this layer needs redraw */ getNeedsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        return this._getNeedsRedraw(opts);
    }
    /** (Internal) Checks if this layer needs a deep update */ needsUpdate() {
        if (!this.internalState) {
            return false;
        }
        // Call subclass lifecycle method
        return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());
    // End lifecycle method
    }
    /** Checks if this layer has ongoing uniform transition */ hasUniformTransition() {
        return this.internalState?.uniformTransitions.active || false;
    }
    /** Called when this layer is rendered into the given viewport */ activateViewport(viewport) {
        if (!this.internalState) {
            return;
        }
        const oldViewport = this.internalState.viewport;
        this.internalState.viewport = viewport;
        if (!oldViewport || !areViewportsEqual({
            oldViewport,
            viewport
        })) {
            this.setChangeFlags({
                viewportChanged: true
            });
            if (this.isComposite) {
                if (this.needsUpdate()) {
                    // Composite layers may add/remove sublayers on viewport change
                    // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away
                    // This will not call update immediately, but mark the layerManager as needs update on the next frame
                    this.setNeedsUpdate();
                }
            } else {
                this._update();
            }
        }
    }
    /** Default implementation of attribute invalidation, can be redefined */ invalidateAttribute(name = 'all') {
        const attributeManager = this.getAttributeManager();
        if (!attributeManager) {
            return;
        }
        if (name === 'all') {
            attributeManager.invalidateAll();
        } else {
            attributeManager.invalidate(name);
        }
    }
    /** Send updated attributes to the WebGL model */ updateAttributes(changedAttributes) {
        // If some buffer layout changed
        let bufferLayoutChanged = false;
        for(const id in changedAttributes){
            if (changedAttributes[id].layoutChanged()) {
                bufferLayoutChanged = true;
            }
        }
        for (const model of this.getModels()){
            this._setModelAttributes(model, changedAttributes, bufferLayoutChanged);
        }
    }
    /** Recalculate any attributes if needed */ _updateAttributes() {
        const attributeManager = this.getAttributeManager();
        if (!attributeManager) {
            return;
        }
        const props = this.props;
        // Figure out data length
        const numInstances = this.getNumInstances();
        const startIndices = this.getStartIndices();
        attributeManager.update({
            data: props.data,
            numInstances,
            startIndices,
            props,
            transitions: props.transitions,
            // @ts-ignore (TS2339) property attribute is not present on some acceptable data types
            buffers: props.data.attributes,
            context: this
        });
        const changedAttributes = attributeManager.getChangedAttributes({
            clearChangedFlags: true
        });
        this.updateAttributes(changedAttributes);
    }
    /** Update attribute transitions. This is called in drawLayer, no model updates required. */ _updateAttributeTransition() {
        const attributeManager = this.getAttributeManager();
        if (attributeManager) {
            attributeManager.updateTransition();
        }
    }
    /** Update uniform (prop) transitions. This is called in updateState, may result in model updates. */ _updateUniformTransition() {
        // @ts-ignore (TS2339) internalState is alwasy defined when this method is called
        const { uniformTransitions } = this.internalState;
        if (uniformTransitions.active) {
            // clone props
            const propsInTransition = uniformTransitions.update();
            const props = Object.create(this.props);
            for(const key in propsInTransition){
                Object.defineProperty(props, key, {
                    value: propsInTransition[key]
                });
            }
            return props;
        }
        return this.props;
    }
    /** Updater for the automatically populated instancePickingColors attribute */ calculateInstancePickingColors(attribute, { numInstances }) {
        if (attribute.constant) {
            return;
        }
        // calculateInstancePickingColors always generates the same sequence.
        // pickingColorCache saves the largest generated sequence for reuse
        const cacheSize = Math.floor(pickingColorCache.length / 4);
        // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache
        // @ts-ignore (TS2531) internalState is always defined when this method is called
        this.internalState.usesPickingColorCache = true;
        if (cacheSize < numInstances) {
            if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();
            }
            pickingColorCache = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].allocate(pickingColorCache, numInstances, {
                size: 4,
                copy: true,
                maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)
            });
            // If the attribute is larger than the cache, resize the cache and populate the missing chunk
            const newCacheSize = Math.floor(pickingColorCache.length / 4);
            const pickingColor = [
                0,
                0,
                0
            ];
            for(let i = cacheSize; i < newCacheSize; i++){
                this.encodePickingColor(i, pickingColor);
                pickingColorCache[i * 4 + 0] = pickingColor[0];
                pickingColorCache[i * 4 + 1] = pickingColor[1];
                pickingColorCache[i * 4 + 2] = pickingColor[2];
                pickingColorCache[i * 4 + 3] = 0;
            }
        }
        attribute.value = pickingColorCache.subarray(0, numInstances * 4);
    }
    /** Apply changed attributes to model */ _setModelAttributes(model, changedAttributes, bufferLayoutChanged = false) {
        if (!Object.keys(changedAttributes).length) {
            return;
        }
        if (bufferLayoutChanged) {
            // AttributeManager is always defined when this method is called
            const attributeManager = this.getAttributeManager();
            model.setBufferLayout(attributeManager.getBufferLayouts(model));
            // All attributes must be reset after buffer layout change
            changedAttributes = attributeManager.getAttributes();
        }
        // @ts-ignore luma.gl type issue
        const excludeAttributes = model.userData?.excludeAttributes || {};
        const attributeBuffers = {};
        const constantAttributes = {};
        for(const name in changedAttributes){
            if (excludeAttributes[name]) {
                continue;
            }
            const values = changedAttributes[name].getValue();
            for(const attributeName in values){
                const value = values[attributeName];
                if (value instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Buffer"]) {
                    if (changedAttributes[name].settings.isIndexed) {
                        model.setIndexBuffer(value);
                    } else {
                        attributeBuffers[attributeName] = value;
                    }
                } else if (value) {
                    constantAttributes[attributeName] = value;
                }
            }
        }
        // TODO - update buffer map?
        model.setAttributes(attributeBuffers);
        model.setConstantAttributes(constantAttributes);
    }
    /** (Internal) Sets the picking color at the specified index to null picking color. Used for multi-depth picking.
       This method may be overriden by layer implementations */ disablePickingIndex(objectIndex) {
        const data = this.props.data;
        if (!('attributes' in data)) {
            this._disablePickingIndex(objectIndex);
            return;
        }
        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        const externalColorAttribute = colors && data.attributes && data.attributes[colors.id];
        if (externalColorAttribute && externalColorAttribute.value) {
            const values = externalColorAttribute.value;
            const objectColor = this.encodePickingColor(objectIndex);
            for(let index = 0; index < data.length; index++){
                const i = colors.getVertexOffset(index);
                if (values[i] === objectColor[0] && values[i + 1] === objectColor[1] && values[i + 2] === objectColor[2]) {
                    this._disablePickingIndex(index);
                }
            }
        } else {
            this._disablePickingIndex(objectIndex);
        }
    }
    // TODO - simplify subclassing interface
    _disablePickingIndex(objectIndex) {
        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        if (!colors) {
            return;
        }
        const start = colors.getVertexOffset(objectIndex);
        const end = colors.getVertexOffset(objectIndex + 1);
        // Fill the sub buffer with 0s, 1 byte per element
        colors.buffer.write(new Uint8Array(end - start), start);
    }
    /** (Internal) Re-enable all picking indices after multi-depth picking */ restorePickingColors() {
        // @ts-ignore (TS2531) this method is only called internally with attributeManager defined
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        if (!colors) {
            return;
        }
        // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.
        if (// @ts-ignore (TS2531) this method is only called internally with internalState defined
        this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer) {
            colors.value = pickingColorCache.subarray(0, colors.value.length);
        }
        colors.updateSubBuffer({
            startOffset: 0
        });
    }
    /* eslint-disable max-statements */ /* (Internal) Called by layer manager when a new layer is found */ _initialize() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(!this.internalState); // finalized layer cannot be reused
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Number.isFinite(this.props.coordinateSystem)); // invalid coordinateSystem
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_INITIALIZE, this);
        const attributeManager = this._getAttributeManager();
        if (attributeManager) {
            // All instanced layers get instancePickingColors attribute by default
            // Their shaders can use it to render a picking scene
            // TODO - this slightly slows down non instanced layers
            attributeManager.addInstanced({
                instancePickingColors: {
                    type: 'uint8',
                    size: 4,
                    noAlloc: true,
                    // Updaters are always called with `this` pointing to the layer
                    // eslint-disable-next-line @typescript-eslint/unbound-method
                    update: this.calculateInstancePickingColors
                }
            });
        }
        this.internalState = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
            attributeManager,
            layer: this
        });
        this._clearChangeFlags(); // populate this.internalState.changeFlags
        this.state = {};
        // for backwards compatibility with older layers
        // TODO - remove in next release
        /* eslint-disable accessor-pairs */ Object.defineProperty(this.state, 'attributeManager', {
            get: ()=>{
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].deprecated('layer.state.attributeManager', 'layer.getAttributeManager()')();
                return attributeManager;
            }
        });
        /* eslint-enable accessor-pairs */ this.internalState.uniformTransitions = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$uniform$2d$transition$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](this.context.timeline);
        this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);
        // Ensure any async props are updated
        this.internalState.setAsyncProps(this.props);
        // Call subclass lifecycle methods
        this.initializeState(this.context);
        // Initialize extensions
        for (const extension of this.props.extensions){
            extension.initializeState.call(this, this.context, extension);
        }
        // End subclass lifecycle methods
        // initializeState callback tends to clear state
        this.setChangeFlags({
            dataChanged: 'init',
            propsChanged: 'init',
            viewportChanged: true,
            extensionsChanged: true
        });
        this._update();
    }
    /** (Internal) Called by layer manager to transfer state from an old layer */ _transferState(oldLayer) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_MATCHED, this, this === oldLayer);
        const { state, internalState } = oldLayer;
        if (this === oldLayer) {
            return;
        }
        // Move internalState
        this.internalState = internalState;
        // Move state
        this.state = state;
        // We keep the state ref on old layers to support async actions
        // oldLayer.state = null;
        // Ensure any async props are updated
        this.internalState.setAsyncProps(this.props);
        this._diffProps(this.props, this.internalState.getOldProps());
    }
    /** (Internal) Called by layer manager when a new layer is added or an existing layer is matched with a new instance */ _update() {
        // Call subclass lifecycle method
        const stateNeedsUpdate = this.needsUpdate();
        // End lifecycle method
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_UPDATE, this, stateNeedsUpdate);
        if (!stateNeedsUpdate) {
            return;
        }
        const currentProps = this.props;
        const context = this.context;
        const internalState = this.internalState;
        const currentViewport = context.viewport;
        const propsInTransition = this._updateUniformTransition();
        internalState.propsInTransition = propsInTransition;
        // Overwrite this.context.viewport during update to use the last activated viewport on this layer
        // In multi-view applications, a layer may only be drawn in one of the views
        // Which would make the "active" viewport different from the shared context
        context.viewport = internalState.viewport || currentViewport;
        // Overwrite this.props during update to use in-transition prop values
        this.props = propsInTransition;
        try {
            const updateParams = this._getUpdateParams();
            const oldModels = this.getModels();
            // Safely call subclass lifecycle methods
            if (context.device) {
                this.updateState(updateParams);
            } else {
                try {
                    this.updateState(updateParams);
                } catch (error) {
                // ignore error if gl context is missing
                }
            }
            // Execute extension updates
            for (const extension of this.props.extensions){
                extension.updateState.call(this, updateParams, extension);
            }
            this.setNeedsRedraw();
            // Check if attributes need recalculation
            this._updateAttributes();
            const modelChanged = this.getModels()[0] !== oldModels[0];
            this._postUpdate(updateParams, modelChanged);
        // End subclass lifecycle methods
        } finally{
            // Restore shared context
            context.viewport = currentViewport;
            this.props = currentProps;
            this._clearChangeFlags();
            internalState.needsUpdate = false;
            internalState.resetOldProps();
        }
    }
    /* eslint-enable max-statements */ /** (Internal) Called by manager when layer is about to be disposed
        Note: not guaranteed to be called on application shutdown */ _finalize() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_FINALIZE, this);
        // Call subclass lifecycle method
        this.finalizeState(this.context);
        // Finalize extensions
        for (const extension of this.props.extensions){
            extension.finalizeState.call(this, this.context, extension);
        }
    }
    // Calculates uniforms
    _drawLayer({ renderPass, shaderModuleProps = null, uniforms = {}, parameters = {} }) {
        this._updateAttributeTransition();
        const currentProps = this.props;
        const context = this.context;
        // Overwrite this.props during redraw to use in-transition prop values
        // `internalState.propsInTransition` could be missing if `updateState` failed
        // @ts-ignore (TS2339) internalState is alwasy defined when this method is called
        this.props = this.internalState.propsInTransition || currentProps;
        try {
            // TODO/ib - hack move to luma Model.draw
            if (shaderModuleProps) {
                this.setShaderModuleProps(shaderModuleProps);
            }
            // Apply polygon offset to avoid z-fighting
            // TODO - move to draw-layers
            const { getPolygonOffset } = this.props;
            const offsets = getPolygonOffset && getPolygonOffset(uniforms) || [
                0,
                0
            ];
            if (context.device instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$device$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WebGLDevice"]) {
                context.device.setParametersWebGL({
                    polygonOffset: offsets
                });
            }
            for (const model of this.getModels()){
                model.setParameters(parameters);
            }
            // Call subclass lifecycle method
            if (context.device instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$device$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WebGLDevice"]) {
                context.device.withParametersWebGL(parameters, ()=>{
                    const opts = {
                        renderPass,
                        shaderModuleProps,
                        uniforms,
                        parameters,
                        context
                    };
                    // extensions
                    for (const extension of this.props.extensions){
                        extension.draw.call(this, opts, extension);
                    }
                    this.draw(opts);
                });
            } else {
                const opts = {
                    renderPass,
                    shaderModuleProps,
                    uniforms,
                    parameters,
                    context
                };
                // extensions
                for (const extension of this.props.extensions){
                    extension.draw.call(this, opts, extension);
                }
                this.draw(opts);
            }
        } finally{
            this.props = currentProps;
        }
    // End lifecycle method
    }
    // Helper methods
    /** Returns the current change flags */ getChangeFlags() {
        return this.internalState?.changeFlags;
    }
    /* eslint-disable complexity */ /** Dirty some change flags, will be handled by updateLayer */ setChangeFlags(flags) {
        if (!this.internalState) {
            return;
        }
        const { changeFlags } = this.internalState;
        /* eslint-disable no-fallthrough, max-depth */ for(const key in flags){
            if (flags[key]) {
                let flagChanged = false;
                switch(key){
                    case 'dataChanged':
                        // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges
                        const dataChangedReason = flags[key];
                        const prevDataChangedReason = changeFlags[key];
                        if (dataChangedReason && Array.isArray(prevDataChangedReason)) {
                            // Merge partial updates
                            changeFlags.dataChanged = Array.isArray(dataChangedReason) ? prevDataChangedReason.concat(dataChangedReason) : dataChangedReason;
                            flagChanged = true;
                        }
                    default:
                        if (!changeFlags[key]) {
                            changeFlags[key] = flags[key];
                            flagChanged = true;
                        }
                }
                if (flagChanged) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_CHANGE_FLAG, this, key, flags);
                }
            }
        }
        /* eslint-enable no-fallthrough, max-depth */ // Update composite flags
        const propsOrDataChanged = Boolean(changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged);
        changeFlags.propsOrDataChanged = propsOrDataChanged;
        changeFlags.somethingChanged = propsOrDataChanged || changeFlags.viewportChanged || changeFlags.stateChanged;
    }
    /* eslint-enable complexity */ /** Clear all changeFlags, typically after an update */ _clearChangeFlags() {
        // @ts-ignore TS2531 this method can only be called internally with internalState assigned
        this.internalState.changeFlags = {
            dataChanged: false,
            propsChanged: false,
            updateTriggersChanged: false,
            viewportChanged: false,
            stateChanged: false,
            extensionsChanged: false,
            propsOrDataChanged: false,
            somethingChanged: false
        };
    }
    /** Compares the layers props with old props from a matched older layer
        and extracts change flags that describe what has change so that state
        can be update correctly with minimal effort */ _diffProps(newProps, oldProps) {
        const changeFlags = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["diffProps"])(newProps, oldProps);
        // iterate over changedTriggers
        if (changeFlags.updateTriggersChanged) {
            for(const key in changeFlags.updateTriggersChanged){
                if (changeFlags.updateTriggersChanged[key]) {
                    this.invalidateAttribute(key);
                }
            }
        }
        // trigger uniform transitions
        if (changeFlags.transitionsChanged) {
            for(const key in changeFlags.transitionsChanged){
                // prop changed and transition is enabled
                // @ts-ignore (TS2531) internalState is always defined when this method is called
                this.internalState.uniformTransitions.add(key, oldProps[key], newProps[key], newProps.transitions?.[key]);
            }
        }
        return this.setChangeFlags(changeFlags);
    }
    /** (Internal) called by layer manager to perform extra props validation (in development only) */ validateProps() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["validateProps"])(this.props);
    }
    /** (Internal) Called by deck picker when the hovered object changes to update the auto highlight */ updateAutoHighlight(info) {
        if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {
            this._updateAutoHighlight(info);
        }
    }
    // May be overriden by subclasses
    // TODO - simplify subclassing interface
    /** Update picking module parameters to highlight the hovered object */ _updateAutoHighlight(info) {
        const picking = {
            // @ts-ignore
            highlightedObjectColor: info.picked ? info.color : null
        };
        const { highlightColor } = this.props;
        if (info.picked && typeof highlightColor === 'function') {
            // @ts-ignore
            picking.highlightColor = highlightColor(info);
        }
        this.setShaderModuleProps({
            picking
        });
        // setShaderModuleProps does not trigger redraw
        this.setNeedsRedraw();
    }
    /** Create new attribute manager */ _getAttributeManager() {
        const context = this.context;
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](context.device, {
            id: this.props.id,
            stats: context.stats,
            timeline: context.timeline
        });
    }
    // Private methods
    /** Called after updateState to perform common tasks */ _postUpdate(updateParams, forceUpdate) {
        const { props, oldProps } = updateParams;
        // Note: Automatic instance count update only works for single layers
        const model = this.state.model;
        if (model?.isInstanced) {
            model.setInstanceCount(this.getNumInstances());
        }
        // Set picking module parameters to match props
        const { autoHighlight, highlightedObjectIndex, highlightColor } = props;
        if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {
            const picking = {};
            if (Array.isArray(highlightColor)) {
                picking.highlightColor = highlightColor;
            }
            // highlightedObjectIndex will overwrite any settings from auto highlighting.
            // Do not reset unless the value has changed.
            if (forceUpdate || oldProps.autoHighlight !== autoHighlight || highlightedObjectIndex !== oldProps.highlightedObjectIndex) {
                picking.highlightedObjectColor = Number.isFinite(highlightedObjectIndex) && highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;
            }
            this.setShaderModuleProps({
                picking
            });
        }
    }
    _getUpdateParams() {
        return {
            props: this.props,
            // @ts-ignore TS2531 this method can only be called internally with internalState assigned
            oldProps: this.internalState.getOldProps(),
            context: this.context,
            // @ts-ignore TS2531 this method can only be called internally with internalState assigned
            changeFlags: this.internalState.changeFlags
        };
    }
    /** Checks state of attributes and model */ _getNeedsRedraw(opts) {
        // this method may be called by the render loop as soon a the layer
        // has been created, so guard against uninitialized state
        if (!this.internalState) {
            return false;
        }
        let redraw = false;
        redraw = redraw || this.internalState.needsRedraw && this.id;
        // TODO - is attribute manager needed? - Model should be enough.
        const attributeManager = this.getAttributeManager();
        const attributeManagerNeedsRedraw = attributeManager ? attributeManager.getNeedsRedraw(opts) : false;
        redraw = redraw || attributeManagerNeedsRedraw;
        if (redraw) {
            for (const extension of this.props.extensions){
                extension.onNeedsRedraw.call(this, extension);
            }
        }
        this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;
        return redraw;
    }
    /** Callback when asyn prop is loaded */ _onAsyncPropUpdated() {
        // @ts-ignore TS2531 this method can only be called internally with internalState assigned
        this._diffProps(this.props, this.internalState.getOldProps());
        this.setNeedsUpdate();
    }
}
Layer.defaultProps = defaultProps;
Layer.layerName = 'Layer';
const __TURBOPACK__default__export__ = Layer;
 //# sourceMappingURL=layer.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/layer.js [app-ssr] (ecmascript) <export default as Layer>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Layer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/layer.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript) <export default as log>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "log": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/flatten.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/debug/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/layer.js [app-ssr] (ecmascript)");
;
;
;
;
const TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';
class CompositeLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /** `true` if this layer renders other layers */ get isComposite() {
        return true;
    }
    /** `true` if the layer renders to screen */ get isDrawable() {
        return false;
    }
    /** Returns true if all async resources are loaded */ get isLoaded() {
        return super.isLoaded && this.getSubLayers().every((layer)=>layer.isLoaded);
    }
    /** Return last rendered sub layers */ getSubLayers() {
        return this.internalState && this.internalState.subLayers || [];
    }
    // initializeState is usually not needed for composite layers
    // Provide empty definition to disable check for missing definition
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    initializeState(context) {}
    /** Updates selected state members and marks the composite layer to need rerender */ setState(updateObject) {
        super.setState(updateObject);
        // Trigger a layer update
        // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,
        // they are executed during different lifecycles.
        // draw can be called without calling updateState (e.g. most viewport changes),
        // while renderLayers can only be called during a recursive layer update.
        this.setNeedsUpdate();
    }
    /** called to augment the info object that is bubbled up from a sublayer
        override Layer.getPickingInfo() because decoding / setting uniform do
        not apply to a composite layer. */ getPickingInfo({ info }) {
        const { object } = info;
        const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;
        if (!isDataWrapped) {
            return info;
        }
        // override object with picked data
        info.object = object.__source.object;
        info.index = object.__source.index;
        return info;
    }
    /**
     * Filters sub layers at draw time. Return true if the sub layer should be drawn.
     */ filterSubLayer(context) {
        return true;
    }
    /** Returns true if sub layer needs to be rendered */ shouldRenderSubLayer(subLayerId, data) {
        return data && data.length;
    }
    /** Returns sub layer class for a specific sublayer */ getSubLayerClass(subLayerId, DefaultLayerClass) {
        const { _subLayerProps: overridingProps } = this.props;
        return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;
    }
    /** When casting user data into another format to pass to sublayers,
        add reference to the original object and object index */ getSubLayerRow(row, sourceObject, sourceObjectIndex) {
        // @ts-ignore (TS2339) adding undefined property
        row.__source = {
            parent: this,
            object: sourceObject,
            index: sourceObjectIndex
        };
        return row;
    }
    /** Some composite layers cast user data into another format before passing to sublayers
      We need to unwrap them before calling the accessor so that they see the original data
      objects */ getSubLayerAccessor(accessor) {
        if (typeof accessor === 'function') {
            const objectInfo = {
                index: -1,
                // @ts-ignore accessing resolved data
                data: this.props.data,
                target: []
            };
            return (x, i)=>{
                if (x && x.__source) {
                    objectInfo.index = x.__source.index;
                    // @ts-ignore (TS2349) Out is never a function
                    return accessor(x.__source.object, objectInfo);
                }
                // @ts-ignore (TS2349) Out is never a function
                return accessor(x, i);
            };
        }
        return accessor;
    }
    /** Returns sub layer props for a specific sublayer */ // eslint-disable-next-line complexity
    getSubLayerProps(sublayerProps = {}) {
        const { opacity, pickable, visible, parameters, getPolygonOffset, highlightedObjectIndex, autoHighlight, highlightColor, coordinateSystem, coordinateOrigin, wrapLongitude, positionFormat, modelMatrix, extensions, fetch, operation, _subLayerProps: overridingProps } = this.props;
        const newProps = {
            id: '',
            updateTriggers: {},
            opacity,
            pickable,
            visible,
            parameters,
            getPolygonOffset,
            highlightedObjectIndex,
            autoHighlight,
            highlightColor,
            coordinateSystem,
            coordinateOrigin,
            wrapLongitude,
            positionFormat,
            modelMatrix,
            extensions,
            fetch,
            operation
        };
        const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];
        const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;
        const sublayerId = sublayerProps.id || 'sublayer';
        if (overridingSublayerProps) {
            const propTypes = this.props[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROP_TYPES_SYMBOL"]];
            const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};
            for(const key in overridingSublayerProps){
                const propType = subLayerPropTypes[key] || propTypes[key];
                // eslint-disable-next-line
                if (propType && propType.type === 'accessor') {
                    overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);
                }
            }
        }
        Object.assign(newProps, sublayerProps, // experimental feature that allows users to override sublayer props via parent layer prop
        overridingSublayerProps);
        newProps.id = `${this.props.id}-${sublayerId}`;
        newProps.updateTriggers = {
            all: this.props.updateTriggers?.all,
            ...sublayerProps.updateTriggers,
            ...overridingSublayerTriggers
        };
        // Pass through extension props
        // @ts-ignore (TS2532) extensions is always defined after merging with default props
        for (const extension of extensions){
            const passThroughProps = extension.getSubLayerProps.call(this, extension);
            if (passThroughProps) {
                Object.assign(newProps, passThroughProps, {
                    updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)
                });
            }
        }
        return newProps;
    }
    /** Update sub layers to highlight the hovered object */ _updateAutoHighlight(info) {
        for (const layer of this.getSubLayers()){
            layer.updateAutoHighlight(info);
        }
    }
    /** Override base Layer method */ _getAttributeManager() {
        return null;
    }
    /** (Internal) Called after an update to rerender sub layers */ _postUpdate(updateParams, forceUpdate) {
        // @ts-ignore (TS2531) this method is only called internally when internalState is defined
        let subLayers = this.internalState.subLayers;
        const shouldUpdate = !subLayers || this.needsUpdate();
        if (shouldUpdate) {
            const subLayersList = this.renderLayers();
            // Flatten the returned array, removing any null, undefined or false
            // this allows layers to render sublayers conditionally
            // (see CompositeLayer.renderLayers docs)
            subLayers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(subLayersList, Boolean);
            // @ts-ignore (TS2531) this method is only called internally when internalState is defined
            this.internalState.subLayers = subLayers;
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);
        // populate reference to parent layer (this layer)
        // NOTE: needs to be done even when reusing layers as the parent may have changed
        for (const layer of subLayers){
            layer.parent = this;
        }
    }
}
CompositeLayer.layerName = 'CompositeLayer';
const __TURBOPACK__default__export__ = CompositeLayer;
 //# sourceMappingURL=composite-layer.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [app-ssr] (ecmascript) <export default as CompositeLayer>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CompositeLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/tesselator.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>Tesselator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/typed-array-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/assert.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/iterable-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js [app-ssr] (ecmascript)");
;
;
;
;
class Tesselator {
    constructor(opts){
        this.indexStarts = [
            0
        ];
        this.vertexStarts = [
            0
        ];
        this.vertexCount = 0;
        this.instanceCount = 0;
        const { attributes = {} } = opts;
        this.typedArrayManager = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"];
        this.attributes = {};
        this._attributeDefs = attributes;
        this.opts = opts;
        this.updateGeometry(opts);
    }
    /* Public methods */ updateGeometry(opts) {
        Object.assign(this.opts, opts);
        const { data, buffers = {}, getGeometry, geometryBuffer, positionFormat, dataChanged, normalize = true } = this.opts;
        this.data = data;
        this.getGeometry = getGeometry;
        this.positionSize = // @ts-ignore (2339) when geometryBuffer is a luma Buffer, size falls back to positionFormat
        geometryBuffer && geometryBuffer.size || (positionFormat === 'XY' ? 2 : 3);
        this.buffers = buffers;
        this.normalize = normalize;
        // Handle external logical value
        if (geometryBuffer) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(data.startIndices); // binary data missing startIndices
            this.getGeometry = this.getGeometryFromBuffer(geometryBuffer);
            if (!normalize) {
                // skip packing and set attribute value directly
                // TODO - avoid mutating user-provided object
                buffers.vertexPositions = geometryBuffer;
            }
        }
        this.geometryBuffer = buffers.vertexPositions;
        if (Array.isArray(dataChanged)) {
            // is partial update
            for (const dataRange of dataChanged){
                this._rebuildGeometry(dataRange);
            }
        } else {
            this._rebuildGeometry();
        }
    }
    updatePartialGeometry({ startRow, endRow }) {
        this._rebuildGeometry({
            startRow,
            endRow
        });
    }
    getGeometryFromBuffer(geometryBuffer) {
        const value = geometryBuffer.value || geometryBuffer;
        if (!ArrayBuffer.isView(value)) {
            // Cannot read binary geometries
            return null;
        }
        // @ts-ignore (2322) NumericArray not assignable to GeometryT
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAccessorFromBuffer"])(value, {
            size: this.positionSize,
            offset: geometryBuffer.offset,
            stride: geometryBuffer.stride,
            startIndices: this.data.startIndices
        });
    }
    /* Private utility methods */ _allocate(instanceCount, copy) {
        // allocate attributes
        const { attributes, buffers, _attributeDefs, typedArrayManager } = this;
        for(const name in _attributeDefs){
            if (name in buffers) {
                // Use external buffer
                typedArrayManager.release(attributes[name]);
                attributes[name] = null;
            } else {
                const def = _attributeDefs[name];
                // If dataRange is supplied, this is a partial update.
                // In case we need to reallocate the typed array, it will need the old values copied
                // before performing partial update.
                def.copy = copy;
                attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);
            }
        }
    }
    /**
     * Visit all objects
     * `data` is expected to be an iterable consistent with the base Layer expectation
     */ _forEachGeometry(visitor, startRow, endRow) {
        const { data, getGeometry } = this;
        const { iterable, objectInfo } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$iterable$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createIterable"])(data, startRow, endRow);
        for (const object of iterable){
            objectInfo.index++;
            const geometry = getGeometry ? getGeometry(object, objectInfo) : null;
            visitor(geometry, objectInfo.index);
        }
    }
    /* eslint-disable complexity,max-statements */ _rebuildGeometry(dataRange) {
        if (!this.data) {
            return;
        }
        let { indexStarts, vertexStarts, instanceCount } = this;
        const { data, geometryBuffer } = this;
        const { startRow = 0, endRow = Infinity } = dataRange || {};
        const normalizedData = {};
        if (!dataRange) {
            // Full update - regenerate buffer layout from scratch
            indexStarts = [
                0
            ];
            vertexStarts = [
                0
            ];
        }
        if (this.normalize || !geometryBuffer) {
            this._forEachGeometry((geometry, dataIndex)=>{
                const normalizedGeometry = geometry && this.normalizeGeometry(geometry);
                normalizedData[dataIndex] = normalizedGeometry;
                vertexStarts[dataIndex + 1] = vertexStarts[dataIndex] + (normalizedGeometry ? this.getGeometrySize(normalizedGeometry) : 0);
            }, startRow, endRow);
            // count instances
            instanceCount = vertexStarts[vertexStarts.length - 1];
        } else {
            // assume user provided data is already normalized
            vertexStarts = data.startIndices;
            instanceCount = vertexStarts[data.length] || 0;
            if (ArrayBuffer.isView(geometryBuffer)) {
                instanceCount = instanceCount || geometryBuffer.length / this.positionSize;
            } else if (geometryBuffer instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$resources$2f$buffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Buffer"]) {
                const byteStride = this.positionSize * 4;
                instanceCount = instanceCount || geometryBuffer.byteLength / byteStride;
            } else if (geometryBuffer.buffer) {
                const byteStride = geometryBuffer.stride || this.positionSize * 4;
                instanceCount = instanceCount || geometryBuffer.buffer.byteLength / byteStride;
            } else if (geometryBuffer.value) {
                const bufferValue = geometryBuffer.value;
                const elementStride = // @ts-ignore (2339) if stride is not specified, will fall through to positionSize
                geometryBuffer.stride / bufferValue.BYTES_PER_ELEMENT || this.positionSize;
                instanceCount = instanceCount || bufferValue.length / elementStride;
            }
        }
        // allocate attributes
        this._allocate(instanceCount, Boolean(dataRange));
        this.indexStarts = indexStarts;
        this.vertexStarts = vertexStarts;
        this.instanceCount = instanceCount;
        // @ts-ignore (2739) context will be populated in the loop
        const context = {};
        this._forEachGeometry((geometry, dataIndex)=>{
            const normalizedGeometry = normalizedData[dataIndex] || geometry;
            context.vertexStart = vertexStarts[dataIndex];
            context.indexStart = indexStarts[dataIndex];
            const vertexEnd = dataIndex < vertexStarts.length - 1 ? vertexStarts[dataIndex + 1] : instanceCount;
            context.geometrySize = vertexEnd - vertexStarts[dataIndex];
            context.geometryIndex = dataIndex;
            this.updateGeometryAttributes(normalizedGeometry, context);
        }, startRow, endRow);
        this.vertexCount = indexStarts[indexStarts.length - 1];
    }
} //# sourceMappingURL=tesselator.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/tesselator.js [app-ssr] (ecmascript) <export default as Tesselator>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Tesselator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$tesselator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$tesselator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/tesselator.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js [app-ssr] (ecmascript) <export default as AttributeManager>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AttributeManager": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$attribute$2f$attribute$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/lifecycle/props.js [app-ssr] (ecmascript) <export compareProps as _compareProps>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "_compareProps": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compareProps"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/props.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/positions.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "getPosition": (()=>getPosition),
    "parsePosition": (()=>parsePosition)
});
const PERCENT_OR_PIXELS_REGEX = /([0-9]+\.?[0-9]*)(%|px)/;
function parsePosition(value) {
    switch(typeof value){
        case 'number':
            return {
                position: value,
                relative: false
            };
        case 'string':
            const match = PERCENT_OR_PIXELS_REGEX.exec(value);
            if (match && match.length >= 3) {
                const relative = match[2] === '%';
                const position = parseFloat(match[1]);
                return {
                    position: relative ? position / 100 : position,
                    relative
                };
            }
        // fallthrough
        default:
            // eslint-disable-line
            throw new Error(`Could not parse position string ${value}`);
    }
}
function getPosition(position, extent) {
    return position.relative ? Math.round(position.position * extent) : position.position;
} //# sourceMappingURL=positions.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/views/view.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>View)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/positions.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [app-ssr] (ecmascript)");
;
;
class View {
    constructor(props){
        const { id, x = 0, y = 0, width = '100%', height = '100%', padding = null } = props;
        // @ts-ignore
        this.id = id || this.constructor.displayName || 'view';
        this.props = {
            ...props,
            id: this.id
        };
        // Extents
        this._x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(x);
        this._y = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(y);
        this._width = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(width);
        this._height = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(height);
        this._padding = padding && {
            left: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(padding.left || 0),
            right: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(padding.right || 0),
            top: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(padding.top || 0),
            bottom: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePosition"])(padding.bottom || 0)
        };
        // Bind methods for easy access
        this.equals = this.equals.bind(this);
        Object.seal(this);
    }
    equals(view) {
        if (this === view) {
            return true;
        }
        // To correctly compare padding use depth=2
        return this.constructor === view.constructor && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(this.props, view.props, 2);
    }
    /** Make viewport from canvas dimensions and view state */ makeViewport({ width, height, viewState }) {
        viewState = this.filterViewState(viewState);
        // Resolve relative viewport dimensions
        const viewportDimensions = this.getDimensions({
            width,
            height
        });
        if (!viewportDimensions.height || !viewportDimensions.width) {
            return null;
        }
        const ViewportType = this.getViewportType(viewState);
        return new ViewportType({
            ...viewState,
            ...this.props,
            ...viewportDimensions
        });
    }
    getViewStateId() {
        const { viewState } = this.props;
        if (typeof viewState === 'string') {
            // if View.viewState is a string, return it
            return viewState;
        }
        return viewState?.id || this.id;
    }
    // Allows view to override (or completely define) viewState
    filterViewState(viewState) {
        if (this.props.viewState && typeof this.props.viewState === 'object') {
            // If we have specified an id, then intent is to override,
            // If not, completely specify the view state
            if (!this.props.viewState.id) {
                return this.props.viewState;
            }
            // Merge in all props from View's viewState, except id
            const newViewState = {
                ...viewState
            };
            for(const key in this.props.viewState){
                if (key !== 'id') {
                    newViewState[key] = this.props.viewState[key];
                }
            }
            return newViewState;
        }
        return viewState;
    }
    /** Resolve the dimensions of the view from overall canvas dimensions */ getDimensions({ width, height }) {
        const dimensions = {
            x: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._x, width),
            y: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._y, height),
            width: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._width, width),
            height: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._height, height)
        };
        if (this._padding) {
            dimensions.padding = {
                left: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._padding.left, width),
                top: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._padding.top, height),
                right: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._padding.right, width),
                bottom: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$positions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPosition"])(this._padding.bottom, height)
            };
        }
        return dimensions;
    }
    // Used by sub classes to resolve controller props
    get controller() {
        const opts = this.props.controller;
        if (!opts) {
            return null;
        }
        if (opts === true) {
            return {
                type: this.ControllerType
            };
        }
        if (typeof opts === 'function') {
            return {
                type: opts
            };
        }
        return {
            type: this.ControllerType,
            ...opts
        };
    }
} //# sourceMappingURL=view.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/views/view.js [app-ssr] (ecmascript) <export default as View>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "View": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$views$2f$view$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$views$2f$view$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/views/view.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@deck.gl/core/dist/controllers/view-state.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>ViewState)
});
class ViewState {
    constructor(props, state){
        this._viewportProps = this.applyConstraints(props);
        this._state = state;
    }
    getViewportProps() {
        return this._viewportProps;
    }
    getState() {
        return this._state;
    }
} //# sourceMappingURL=view-state.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/transition-interpolator.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>TransitionInterpolator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/lib/common.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/assert.js [app-ssr] (ecmascript)");
;
;
class TransitionInterpolator {
    /**
     * @param opts {array|object}
     * @param opts.compare {array} - prop names used in equality check
     * @param opts.extract {array} - prop names needed for interpolation
     * @param opts.required {array} - prop names that must be supplied
     * alternatively, supply one list of prop names as `opts` if all of the above are the same.
     */ constructor(opts){
        const { compare, extract, required } = opts;
        this._propsToCompare = compare;
        this._propsToExtract = extract || compare;
        this._requiredProps = required;
    }
    /**
     * Checks if two sets of props need transition in between
     * @param currentProps {object} - a list of viewport props
     * @param nextProps {object} - a list of viewport props
     * @returns {bool} - true if two props are equivalent
     */ arePropsEqual(currentProps, nextProps) {
        for (const key of this._propsToCompare){
            if (!(key in currentProps) || !(key in nextProps) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["equals"])(currentProps[key], nextProps[key])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Called before transition starts to validate/pre-process start and end props
     * @param startProps {object} - a list of starting viewport props
     * @param endProps {object} - a list of target viewport props
     * @returns {Object} {start, end} - start and end props to be passed
     *   to `interpolateProps`
     */ initializeProps(startProps, endProps) {
        const startViewStateProps = {};
        const endViewStateProps = {};
        for (const key of this._propsToExtract){
            if (key in startProps || key in endProps) {
                startViewStateProps[key] = startProps[key];
                endViewStateProps[key] = endProps[key];
            }
        }
        this._checkRequiredProps(startViewStateProps);
        this._checkRequiredProps(endViewStateProps);
        return {
            start: startViewStateProps,
            end: endViewStateProps
        };
    }
    /**
     * Returns transition duration
     * @param startProps {object} - a list of starting viewport props
     * @param endProps {object} - a list of target viewport props
     * @returns {Number} - transition duration in milliseconds
     */ getDuration(startProps, endProps) {
        return endProps.transitionDuration;
    }
    _checkRequiredProps(props) {
        if (!this._requiredProps) {
            return;
        }
        this._requiredProps.forEach((propName)=>{
            const value = props[propName];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Number.isFinite(value) || Array.isArray(value), `${propName} is required for transition`);
        });
    }
} //# sourceMappingURL=transition-interpolator.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>LinearInterpolator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/lib/common.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2d$interpolator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/transition-interpolator.js [app-ssr] (ecmascript)");
;
;
const DEFAULT_PROPS = [
    'longitude',
    'latitude',
    'zoom',
    'bearing',
    'pitch'
];
const DEFAULT_REQUIRED_PROPS = [
    'longitude',
    'latitude',
    'zoom'
];
class LinearInterpolator extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2d$interpolator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    /**
     * @param {Object} opts
     * @param {Array} opts.transitionProps - list of props to apply linear transition to.
     * @param {Array} opts.around - a screen point to zoom/rotate around.
     * @param {Function} opts.makeViewport - construct a viewport instance with given props.
     */ constructor(opts = {}){
        // Backward compatibility
        const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;
        const normalizedOpts = Array.isArray(opts) ? {} : opts;
        normalizedOpts.transitionProps = Array.isArray(transitionProps) ? {
            compare: transitionProps,
            required: transitionProps
        } : transitionProps || {
            compare: DEFAULT_PROPS,
            required: DEFAULT_REQUIRED_PROPS
        };
        super(normalizedOpts.transitionProps);
        this.opts = normalizedOpts;
    }
    initializeProps(startProps, endProps) {
        const result = super.initializeProps(startProps, endProps);
        const { makeViewport, around } = this.opts;
        if (makeViewport && around) {
            const startViewport = makeViewport(startProps);
            const endViewport = makeViewport(endProps);
            const aroundPosition = startViewport.unproject(around);
            result.start.around = around;
            Object.assign(result.end, {
                around: endViewport.project(aroundPosition),
                aroundPosition,
                width: endProps.width,
                height: endProps.height
            });
        }
        return result;
    }
    interpolateProps(startProps, endProps, t) {
        const propsInTransition = {};
        for (const key of this._propsToExtract){
            propsInTransition[key] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lerp"])(startProps[key] || 0, endProps[key] || 0, t);
        }
        if (endProps.aroundPosition && this.opts.makeViewport) {
            // Linear transition should be performed in common space
            const viewport = this.opts.makeViewport({
                ...endProps,
                ...propsInTransition
            });
            Object.assign(propsInTransition, viewport.panByPosition(endProps.aroundPosition, // anchor point in current screen coordinates
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lerp"])(startProps.around, endProps.around, t)));
        }
        return propsInTransition;
    }
} //# sourceMappingURL=linear-interpolator.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/controllers/transition-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "TRANSITION_EVENTS": (()=>TRANSITION_EVENTS),
    "default": (()=>TransitionManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/transition.js [app-ssr] (ecmascript)");
;
const noop = ()=>{};
const TRANSITION_EVENTS = {
    BREAK: 1,
    SNAP_TO_END: 2,
    IGNORE: 3
};
const DEFAULT_EASING = (t)=>t;
const DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;
class TransitionManager {
    constructor(opts){
        this._onTransitionUpdate = (transition)=>{
            // NOTE: Be cautious re-ordering statements in this function.
            const { time, settings: { interpolator, startProps, endProps, duration, easing } } = transition;
            const t = easing(time / duration);
            const viewport = interpolator.interpolateProps(startProps, endProps, t);
            // This gurantees all props (e.g. bearing, longitude) are normalized
            // So when viewports are compared they are in same range.
            this.propsInTransition = this.getControllerState({
                ...this.props,
                ...viewport
            }).getViewportProps();
            this.onViewStateChange({
                viewState: this.propsInTransition,
                oldViewState: this.props
            });
        };
        this.getControllerState = opts.getControllerState;
        this.propsInTransition = null;
        this.transition = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$transition$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](opts.timeline);
        this.onViewStateChange = opts.onViewStateChange || noop;
        this.onStateChange = opts.onStateChange || noop;
    }
    finalize() {
        this.transition.cancel();
    }
    // Returns current transitioned viewport.
    getViewportInTransition() {
        return this.propsInTransition;
    }
    // Process the vewiport change, either ignore or trigger a new transition.
    // Return true if a new transition is triggered, false otherwise.
    processViewStateChange(nextProps) {
        let transitionTriggered = false;
        const currentProps = this.props;
        // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.
        this.props = nextProps;
        // NOTE: Be cautious re-ordering statements in this function.
        if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {
            return false;
        }
        if (this._isTransitionEnabled(nextProps)) {
            let startProps = currentProps;
            if (this.transition.inProgress) {
                // @ts-expect-error
                const { interruption, endProps } = this.transition.settings;
                startProps = {
                    ...currentProps,
                    ...interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps
                };
            }
            this._triggerTransition(startProps, nextProps);
            transitionTriggered = true;
        } else {
            this.transition.cancel();
        }
        return transitionTriggered;
    }
    updateTransition() {
        this.transition.update();
    }
    // Helper methods
    _isTransitionEnabled(props) {
        const { transitionDuration, transitionInterpolator } = props;
        return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);
    }
    _isUpdateDueToCurrentTransition(props) {
        if (this.transition.inProgress && this.propsInTransition) {
            // @ts-expect-error
            return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);
        }
        return false;
    }
    _shouldIgnoreViewportChange(currentProps, nextProps) {
        if (this.transition.inProgress) {
            // @ts-expect-error
            const transitionSettings = this.transition.settings;
            // Ignore update if it is requested to be ignored
            return transitionSettings.interruption === TRANSITION_EVENTS.IGNORE || // Ignore update if it is due to current active transition.
            this._isUpdateDueToCurrentTransition(nextProps);
        }
        if (this._isTransitionEnabled(nextProps)) {
            // Ignore if none of the viewport props changed.
            return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);
        }
        return true;
    }
    _triggerTransition(startProps, endProps) {
        const startViewstate = this.getControllerState(startProps);
        const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);
        // update transitionDuration for 'auto' mode
        const transitionInterpolator = endProps.transitionInterpolator;
        const duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;
        if (duration === 0) {
            return;
        }
        const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);
        this.propsInTransition = {};
        const transitionSettings = {
            duration,
            easing: endProps.transitionEasing || DEFAULT_EASING,
            interpolator: transitionInterpolator,
            interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,
            startProps: initialProps.start,
            endProps: initialProps.end,
            onStart: endProps.onTransitionStart,
            onUpdate: this._onTransitionUpdate,
            onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),
            onEnd: this._onTransitionEnd(endProps.onTransitionEnd)
        };
        this.transition.start(transitionSettings);
        this.onStateChange({
            inTransition: true
        });
        this.updateTransition();
    }
    _onTransitionEnd(callback) {
        return (transition)=>{
            this.propsInTransition = null;
            this.onStateChange({
                inTransition: false,
                isZooming: false,
                isPanning: false,
                isRotating: false
            });
            callback?.(transition);
        };
    }
} //# sourceMappingURL=transition-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/controllers/controller.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* eslint-disable max-statements, complexity */ __turbopack_esm__({
    "default": (()=>Controller)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$transition$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/controllers/transition-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$linear$2d$interpolator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js [app-ssr] (ecmascript)");
;
;
const NO_TRANSITION_PROPS = {
    transitionDuration: 0
};
const DEFAULT_INERTIA = 300;
const INERTIA_EASING = (t)=>1 - (1 - t) * (1 - t);
const EVENT_TYPES = {
    WHEEL: [
        'wheel'
    ],
    PAN: [
        'panstart',
        'panmove',
        'panend'
    ],
    PINCH: [
        'pinchstart',
        'pinchmove',
        'pinchend'
    ],
    MULTI_PAN: [
        'multipanstart',
        'multipanmove',
        'multipanend'
    ],
    DOUBLE_CLICK: [
        'dblclick'
    ],
    KEYBOARD: [
        'keydown'
    ]
};
const pinchEventWorkaround = {};
class Controller {
    constructor(opts){
        this.state = {};
        this._events = {};
        this._interactionState = {
            isDragging: false
        };
        this._customEvents = [];
        this._eventStartBlocked = null;
        this._panMove = false;
        this.invertPan = false;
        this.dragMode = 'rotate';
        this.inertia = 0;
        this.scrollZoom = true;
        this.dragPan = true;
        this.dragRotate = true;
        this.doubleClickZoom = true;
        this.touchZoom = true;
        this.touchRotate = false;
        this.keyboard = true;
        this.transitionManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$transition$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
            ...opts,
            getControllerState: (props)=>new this.ControllerState(props),
            onViewStateChange: this._onTransition.bind(this),
            onStateChange: this._setInteractionState.bind(this)
        });
        this.handleEvent = this.handleEvent.bind(this);
        this.eventManager = opts.eventManager;
        this.onViewStateChange = opts.onViewStateChange || (()=>{});
        this.onStateChange = opts.onStateChange || (()=>{});
        this.makeViewport = opts.makeViewport;
    }
    set events(customEvents) {
        this.toggleEvents(this._customEvents, false);
        this.toggleEvents(customEvents, true);
        this._customEvents = customEvents;
        // Make sure default events are not overwritten
        if (this.props) {
            this.setProps(this.props);
        }
    }
    finalize() {
        for(const eventName in this._events){
            if (this._events[eventName]) {
                // @ts-ignore (2345) event type string cannot be assifned to enum
                // eslint-disable-next-line @typescript-eslint/unbound-method
                this.eventManager?.off(eventName, this.handleEvent);
            }
        }
        this.transitionManager.finalize();
    }
    /**
     * Callback for events
     */ handleEvent(event) {
        // Force recalculate controller state
        this._controllerState = undefined;
        const eventStartBlocked = this._eventStartBlocked;
        switch(event.type){
            case 'panstart':
                return eventStartBlocked ? false : this._onPanStart(event);
            case 'panmove':
                return this._onPan(event);
            case 'panend':
                return this._onPanEnd(event);
            case 'pinchstart':
                return eventStartBlocked ? false : this._onPinchStart(event);
            case 'pinchmove':
                return this._onPinch(event);
            case 'pinchend':
                return this._onPinchEnd(event);
            case 'multipanstart':
                return eventStartBlocked ? false : this._onMultiPanStart(event);
            case 'multipanmove':
                return this._onMultiPan(event);
            case 'multipanend':
                return this._onMultiPanEnd(event);
            case 'dblclick':
                return this._onDoubleClick(event);
            case 'wheel':
                return this._onWheel(event);
            case 'keydown':
                return this._onKeyDown(event);
            default:
                return false;
        }
    }
    /* Event utils */ // Event object: http://hammerjs.github.io/api/#event-object
    get controllerState() {
        this._controllerState = this._controllerState || new this.ControllerState({
            makeViewport: this.makeViewport,
            ...this.props,
            ...this.state
        });
        return this._controllerState;
    }
    getCenter(event) {
        const { x, y } = this.props;
        const { offsetCenter } = event;
        return [
            offsetCenter.x - x,
            offsetCenter.y - y
        ];
    }
    isPointInBounds(pos, event) {
        const { width, height } = this.props;
        if (event && event.handled) {
            return false;
        }
        const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;
        if (inside && event) {
            event.stopPropagation();
        }
        return inside;
    }
    isFunctionKeyPressed(event) {
        const { srcEvent } = event;
        return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);
    }
    isDragging() {
        return this._interactionState.isDragging || false;
    }
    // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.
    // This triggers a brief `pan` event.
    // Calling this method will temporarily disable *start events to avoid conflicting transitions.
    blockEvents(timeout) {
        /* global setTimeout */ const timer = setTimeout(()=>{
            if (this._eventStartBlocked === timer) {
                this._eventStartBlocked = null;
            }
        }, timeout);
        this._eventStartBlocked = timer;
    }
    /**
     * Extract interactivity options
     */ setProps(props) {
        if (props.dragMode) {
            this.dragMode = props.dragMode;
        }
        this.props = props;
        if (!('transitionInterpolator' in props)) {
            // Add default transition interpolator
            props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;
        }
        this.transitionManager.processViewStateChange(props);
        const { inertia } = props;
        this.inertia = Number.isFinite(inertia) ? inertia : inertia === true ? DEFAULT_INERTIA : 0;
        // TODO - make sure these are not reset on every setProps
        const { scrollZoom = true, dragPan = true, dragRotate = true, doubleClickZoom = true, touchZoom = true, touchRotate = false, keyboard = true } = props;
        // Register/unregister events
        const isInteractive = Boolean(this.onViewStateChange);
        this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);
        // We always need the pan events to set the correct isDragging state, even if dragPan & dragRotate are both false
        this.toggleEvents(EVENT_TYPES.PAN, isInteractive);
        this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));
        this.toggleEvents(EVENT_TYPES.MULTI_PAN, isInteractive && touchRotate);
        this.toggleEvents(EVENT_TYPES.DOUBLE_CLICK, isInteractive && doubleClickZoom);
        this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);
        // Interaction toggles
        this.scrollZoom = scrollZoom;
        this.dragPan = dragPan;
        this.dragRotate = dragRotate;
        this.doubleClickZoom = doubleClickZoom;
        this.touchZoom = touchZoom;
        this.touchRotate = touchRotate;
        this.keyboard = keyboard;
    }
    updateTransition() {
        this.transitionManager.updateTransition();
    }
    toggleEvents(eventNames, enabled) {
        if (this.eventManager) {
            eventNames.forEach((eventName)=>{
                if (this._events[eventName] !== enabled) {
                    this._events[eventName] = enabled;
                    if (enabled) {
                        // eslint-disable-next-line @typescript-eslint/unbound-method
                        this.eventManager.on(eventName, this.handleEvent);
                    } else {
                        // eslint-disable-next-line @typescript-eslint/unbound-method
                        this.eventManager.off(eventName, this.handleEvent);
                    }
                }
            });
        }
    }
    // Private Methods
    /* Callback util */ // formats map state and invokes callback function
    updateViewport(newControllerState, extraProps = null, interactionState = {}) {
        const viewState = {
            ...newControllerState.getViewportProps(),
            ...extraProps
        };
        // TODO - to restore diffing, we need to include interactionState
        const changed = this.controllerState !== newControllerState;
        // const oldViewState = this.controllerState.getViewportProps();
        // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);
        this.state = newControllerState.getState();
        this._setInteractionState(interactionState);
        if (changed) {
            const oldViewState = this.controllerState && this.controllerState.getViewportProps();
            if (this.onViewStateChange) {
                this.onViewStateChange({
                    viewState,
                    interactionState: this._interactionState,
                    oldViewState,
                    viewId: this.props.id
                });
            }
        }
    }
    _onTransition(params) {
        this.onViewStateChange({
            ...params,
            interactionState: this._interactionState,
            viewId: this.props.id
        });
    }
    _setInteractionState(newStates) {
        Object.assign(this._interactionState, newStates);
        this.onStateChange(this._interactionState);
    }
    /* Event handlers */ // Default handler for the `panstart` event.
    _onPanStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;
        if (this.invertPan || this.dragMode === 'pan') {
            // invertPan is replaced by props.dragMode, keeping for backward compatibility
            alternateMode = !alternateMode;
        }
        const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({
            pos
        });
        this._panMove = alternateMode;
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true
        });
        return true;
    }
    // Default handler for the `panmove` and `panend` event.
    _onPan(event) {
        if (!this.isDragging()) {
            return false;
        }
        return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);
    }
    _onPanEnd(event) {
        if (!this.isDragging()) {
            return false;
        }
        return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);
    }
    // Default handler for panning to move.
    // Called by `_onPan` when panning without function key pressed.
    _onPanMove(event) {
        if (!this.dragPan) {
            return false;
        }
        const pos = this.getCenter(event);
        const newControllerState = this.controllerState.pan({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isPanning: true
        });
        return true;
    }
    _onPanMoveEnd(event) {
        const { inertia } = this;
        if (this.dragPan && inertia && event.velocity) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0] + event.velocityX * inertia / 2,
                pos[1] + event.velocityY * inertia / 2
            ];
            const newControllerState = this.controllerState.pan({
                pos: endPos
            }).panEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isPanning: true
            });
        } else {
            const newControllerState = this.controllerState.panEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isPanning: false
            });
        }
        return true;
    }
    // Default handler for panning to rotate.
    // Called by `_onPan` when panning with function key pressed.
    _onPanRotate(event) {
        if (!this.dragRotate) {
            return false;
        }
        const pos = this.getCenter(event);
        const newControllerState = this.controllerState.rotate({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isRotating: true
        });
        return true;
    }
    _onPanRotateEnd(event) {
        const { inertia } = this;
        if (this.dragRotate && inertia && event.velocity) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0] + event.velocityX * inertia / 2,
                pos[1] + event.velocityY * inertia / 2
            ];
            const newControllerState = this.controllerState.rotate({
                pos: endPos
            }).rotateEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isRotating: true
            });
        } else {
            const newControllerState = this.controllerState.rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isRotating: false
            });
        }
        return true;
    }
    // Default handler for the `wheel` event.
    _onWheel(event) {
        if (!this.scrollZoom) {
            return false;
        }
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        event.srcEvent.preventDefault();
        const { speed = 0.01, smooth = false } = this.scrollZoom === true ? {} : this.scrollZoom;
        const { delta } = event;
        // Map wheel delta to relative scale
        let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));
        if (delta < 0 && scale !== 0) {
            scale = 1 / scale;
        }
        const newControllerState = this.controllerState.zoom({
            pos,
            scale
        });
        this.updateViewport(newControllerState, {
            ...this._getTransitionProps({
                around: pos
            }),
            transitionDuration: smooth ? 250 : 1
        }, {
            isZooming: true,
            isPanning: true
        });
        return true;
    }
    _onMultiPanStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        const newControllerState = this.controllerState.rotateStart({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true
        });
        return true;
    }
    _onMultiPan(event) {
        if (!this.touchRotate) {
            return false;
        }
        if (!this.isDragging()) {
            return false;
        }
        const pos = this.getCenter(event);
        pos[0] -= event.deltaX;
        const newControllerState = this.controllerState.rotate({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isRotating: true
        });
        return true;
    }
    _onMultiPanEnd(event) {
        if (!this.isDragging()) {
            return false;
        }
        const { inertia } = this;
        if (this.touchRotate && inertia && event.velocityY) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0],
                pos[1] += event.velocityY * inertia / 2
            ];
            const newControllerState = this.controllerState.rotate({
                pos: endPos
            });
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isRotating: true
            });
            this.blockEvents(inertia);
        } else {
            const newControllerState = this.controllerState.rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isRotating: false
            });
        }
        return true;
    }
    // Default handler for the `pinchstart` event.
    _onPinchStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        const newControllerState = this.controllerState.zoomStart({
            pos
        }).rotateStart({
            pos
        });
        // hack - hammer's `rotation` field doesn't seem to produce the correct angle
        pinchEventWorkaround._startPinchRotation = event.rotation;
        pinchEventWorkaround._lastPinchEvent = event;
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true
        });
        return true;
    }
    // Default handler for the `pinchmove` and `pinchend` events.
    _onPinch(event) {
        if (!this.touchZoom && !this.touchRotate) {
            return false;
        }
        if (!this.isDragging()) {
            return false;
        }
        let newControllerState = this.controllerState;
        if (this.touchZoom) {
            const { scale } = event;
            const pos = this.getCenter(event);
            newControllerState = newControllerState.zoom({
                pos,
                scale
            });
        }
        if (this.touchRotate) {
            const { rotation } = event;
            newControllerState = newControllerState.rotate({
                deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation
            });
        }
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isPanning: this.touchZoom,
            isZooming: this.touchZoom,
            isRotating: this.touchRotate
        });
        pinchEventWorkaround._lastPinchEvent = event;
        return true;
    }
    _onPinchEnd(event) {
        if (!this.isDragging()) {
            return false;
        }
        const { inertia } = this;
        const { _lastPinchEvent } = pinchEventWorkaround;
        if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {
            const pos = this.getCenter(event);
            let newControllerState = this.controllerState.rotateEnd();
            const z = Math.log2(event.scale);
            const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);
            const endScale = Math.pow(2, z + velocityZ * inertia / 2);
            newControllerState = newControllerState.zoom({
                pos,
                scale: endScale
            }).zoomEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps({
                    around: pos
                }),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isPanning: this.touchZoom,
                isZooming: this.touchZoom,
                isRotating: false
            });
            this.blockEvents(inertia);
        } else {
            const newControllerState = this.controllerState.zoomEnd().rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isPanning: false,
                isZooming: false,
                isRotating: false
            });
        }
        pinchEventWorkaround._startPinchRotation = null;
        pinchEventWorkaround._lastPinchEvent = null;
        return true;
    }
    // Default handler for the `dblclick` event.
    _onDoubleClick(event) {
        if (!this.doubleClickZoom) {
            return false;
        }
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) {
            return false;
        }
        const isZoomOut = this.isFunctionKeyPressed(event);
        const newControllerState = this.controllerState.zoom({
            pos,
            scale: isZoomOut ? 0.5 : 2
        });
        this.updateViewport(newControllerState, this._getTransitionProps({
            around: pos
        }), {
            isZooming: true,
            isPanning: true
        });
        this.blockEvents(100);
        return true;
    }
    // Default handler for the `keydown` event
    _onKeyDown(event) {
        if (!this.keyboard) {
            return false;
        }
        const funcKey = this.isFunctionKeyPressed(event);
        // @ts-ignore
        const { zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY } = this.keyboard === true ? {} : this.keyboard;
        const { controllerState } = this;
        let newControllerState;
        const interactionState = {};
        switch(event.srcEvent.code){
            case 'Minus':
                newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);
                interactionState.isZooming = true;
                break;
            case 'Equal':
                newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);
                interactionState.isZooming = true;
                break;
            case 'ArrowLeft':
                if (funcKey) {
                    newControllerState = controllerState.rotateLeft(rotateSpeedX);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveLeft(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowRight':
                if (funcKey) {
                    newControllerState = controllerState.rotateRight(rotateSpeedX);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveRight(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowUp':
                if (funcKey) {
                    newControllerState = controllerState.rotateUp(rotateSpeedY);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveUp(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowDown':
                if (funcKey) {
                    newControllerState = controllerState.rotateDown(rotateSpeedY);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveDown(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            default:
                return false;
        }
        this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);
        return true;
    }
    _getTransitionProps(opts) {
        const { transition } = this;
        if (!transition || !transition.transitionInterpolator) {
            return NO_TRANSITION_PROPS;
        }
        // Enables Transitions on double-tap and key-down events.
        return opts ? {
            ...transition,
            transitionInterpolator: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$linear$2d$interpolator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
                ...opts,
                ...transition.transitionInterpolator.opts,
                makeViewport: this.controllerState.makeViewport
            })
        } : transition;
    }
} //# sourceMappingURL=controller.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/controllers/map-controller.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "MapState": (()=>MapState),
    "default": (()=>MapController)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/assert.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/lib/common.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$normalize$2d$viewport$2d$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/normalize-viewport-props.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$view$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/controllers/view-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$linear$2d$interpolator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$controller$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/controllers/controller.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
const PITCH_MOUSE_THRESHOLD = 5;
const PITCH_ACCEL = 1.2;
class MapState extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$view$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(options){
        const { /** Mapbox viewport properties */ /** The width of the viewport */ width, /** The height of the viewport */ height, /** The latitude at the center of the viewport */ latitude, /** The longitude at the center of the viewport */ longitude, /** The tile zoom level of the map. */ zoom, /** The bearing of the viewport in degrees */ bearing = 0, /** The pitch of the viewport in degrees */ pitch = 0, /**
         * Specify the altitude of the viewport camera
         * Unit: map heights, default 1.5
         * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137
         */ altitude = 1.5, /** Viewport position */ position = [
            0,
            0,
            0
        ], /** Viewport constraints */ maxZoom = 20, minZoom = 0, maxPitch = 60, minPitch = 0, /** Interaction states, required to calculate change during transform */ /* The point on map being grabbed when the operation first started */ startPanLngLat, /* Center of the zoom when the operation first started */ startZoomLngLat, /* Pointer position when rotation started */ startRotatePos, /** Bearing when current perspective rotate operation started */ startBearing, /** Pitch when current perspective rotate operation started */ startPitch, /** Zoom when current zoom operation started */ startZoom, /** Normalize viewport props to fit map height into viewport */ normalize = true } = options;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Number.isFinite(longitude)); // `longitude` must be supplied
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Number.isFinite(latitude)); // `latitude` must be supplied
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Number.isFinite(zoom)); // `zoom` must be supplied
        super({
            width,
            height,
            latitude,
            longitude,
            zoom,
            bearing,
            pitch,
            altitude,
            maxZoom,
            minZoom,
            maxPitch,
            minPitch,
            normalize,
            position
        }, {
            startPanLngLat,
            startZoomLngLat,
            startRotatePos,
            startBearing,
            startPitch,
            startZoom
        });
        this.makeViewport = options.makeViewport;
    }
    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */ panStart({ pos }) {
        return this._getUpdatedState({
            startPanLngLat: this._unproject(pos)
        });
    }
    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     * @param {[Number, Number], optional} startPos - where the pointer grabbed at
     *   the start of the operation. Must be supplied of `panStart()` was not called
     */ pan({ pos, startPos }) {
        const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);
        if (!startPanLngLat) {
            return this;
        }
        const viewport = this.makeViewport(this.getViewportProps());
        const newProps = viewport.panByPosition(startPanLngLat, pos);
        return this._getUpdatedState(newProps);
    }
    /**
     * End panning
     * Must call if `panStart()` was called
     */ panEnd() {
        return this._getUpdatedState({
            startPanLngLat: null
        });
    }
    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the center is
     */ rotateStart({ pos }) {
        return this._getUpdatedState({
            startRotatePos: pos,
            startBearing: this.getViewportProps().bearing,
            startPitch: this.getViewportProps().pitch
        });
    }
    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the center is
     */ rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {
        const { startRotatePos, startBearing, startPitch } = this.getState();
        if (!startRotatePos || startBearing === undefined || startPitch === undefined) {
            return this;
        }
        let newRotation;
        if (pos) {
            newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);
        } else {
            newRotation = {
                bearing: startBearing + deltaAngleX,
                pitch: startPitch + deltaAngleY
            };
        }
        return this._getUpdatedState(newRotation);
    }
    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */ rotateEnd() {
        return this._getUpdatedState({
            startBearing: null,
            startPitch: null
        });
    }
    /**
     * Start zooming
     * @param {[Number, Number]} pos - position on screen where the center is
     */ zoomStart({ pos }) {
        return this._getUpdatedState({
            startZoomLngLat: this._unproject(pos),
            startZoom: this.getViewportProps().zoom
        });
    }
    /**
     * Zoom
     * @param {[Number, Number]} pos - position on screen where the current center is
     * @param {[Number, Number]} startPos - the center position at
     *   the start of the operation. Must be supplied of `zoomStart()` was not called
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */ zoom({ pos, startPos, scale }) {
        // Make sure we zoom around the current mouse position rather than map center
        let { startZoom, startZoomLngLat } = this.getState();
        if (!startZoomLngLat) {
            // We have two modes of zoom:
            // scroll zoom that are discrete events (transform from the current zoom level),
            // and pinch zoom that are continuous events (transform from the zoom level when
            // pinch started).
            // If startZoom state is defined, then use the startZoom state;
            // otherwise assume discrete zooming
            startZoom = this.getViewportProps().zoom;
            startZoomLngLat = this._unproject(startPos) || this._unproject(pos);
        }
        if (!startZoomLngLat) {
            return this;
        }
        const { maxZoom, minZoom } = this.getViewportProps();
        let zoom = startZoom + Math.log2(scale);
        zoom = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])(zoom, minZoom, maxZoom);
        const zoomedViewport = this.makeViewport({
            ...this.getViewportProps(),
            zoom
        });
        return this._getUpdatedState({
            zoom,
            ...zoomedViewport.panByPosition(startZoomLngLat, pos)
        });
    }
    /**
     * End zooming
     * Must call if `zoomStart()` was called
     */ zoomEnd() {
        return this._getUpdatedState({
            startZoomLngLat: null,
            startZoom: null
        });
    }
    zoomIn(speed = 2) {
        return this._zoomFromCenter(speed);
    }
    zoomOut(speed = 2) {
        return this._zoomFromCenter(1 / speed);
    }
    moveLeft(speed = 100) {
        return this._panFromCenter([
            speed,
            0
        ]);
    }
    moveRight(speed = 100) {
        return this._panFromCenter([
            -speed,
            0
        ]);
    }
    moveUp(speed = 100) {
        return this._panFromCenter([
            0,
            speed
        ]);
    }
    moveDown(speed = 100) {
        return this._panFromCenter([
            0,
            -speed
        ]);
    }
    rotateLeft(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing - speed
        });
    }
    rotateRight(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing + speed
        });
    }
    rotateUp(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch + speed
        });
    }
    rotateDown(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch - speed
        });
    }
    shortestPathFrom(viewState) {
        // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);
        const fromProps = viewState.getViewportProps();
        const props = {
            ...this.getViewportProps()
        };
        const { bearing, longitude } = props;
        if (Math.abs(bearing - fromProps.bearing) > 180) {
            props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
        }
        if (Math.abs(longitude - fromProps.longitude) > 180) {
            props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
        }
        return props;
    }
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
        // Ensure zoom is within specified range
        const { maxZoom, minZoom, zoom } = props;
        props.zoom = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])(zoom, minZoom, maxZoom);
        // Ensure pitch is within specified range
        const { maxPitch, minPitch, pitch } = props;
        props.pitch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])(pitch, minPitch, maxPitch);
        // Normalize viewport props to fit map height into viewport
        const { normalize = true } = props;
        if (normalize) {
            Object.assign(props, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$normalize$2d$viewport$2d$props$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["normalizeViewportProps"])(props));
        }
        return props;
    }
    /* Private methods */ _zoomFromCenter(scale) {
        const { width, height } = this.getViewportProps();
        return this.zoom({
            pos: [
                width / 2,
                height / 2
            ],
            scale
        });
    }
    _panFromCenter(offset) {
        const { width, height } = this.getViewportProps();
        return this.pan({
            startPos: [
                width / 2,
                height / 2
            ],
            pos: [
                width / 2 + offset[0],
                height / 2 + offset[1]
            ]
        });
    }
    _getUpdatedState(newProps) {
        // @ts-ignore
        return new this.constructor({
            makeViewport: this.makeViewport,
            ...this.getViewportProps(),
            ...this.getState(),
            ...newProps
        });
    }
    _unproject(pos) {
        const viewport = this.makeViewport(this.getViewportProps());
        // @ts-ignore
        return pos && viewport.unproject(pos);
    }
    _getNewRotation(pos, startPos, startPitch, startBearing) {
        const deltaX = pos[0] - startPos[0];
        const deltaY = pos[1] - startPos[1];
        const centerY = pos[1];
        const startY = startPos[1];
        const { width, height } = this.getViewportProps();
        const deltaScaleX = deltaX / width;
        let deltaScaleY = 0;
        if (deltaY > 0) {
            if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {
                // Move from 0 to -1 as we drag upwards
                deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;
            }
        } else if (deltaY < 0) {
            if (startY > PITCH_MOUSE_THRESHOLD) {
                // Move from 0 to 1 as we drag upwards
                deltaScaleY = 1 - centerY / startY;
            }
        }
        // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.
        // deltaScaleX does not need to be clamped as bearing does not have constraints.
        deltaScaleY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$lib$2f$common$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clamp"])(deltaScaleY, -1, 1);
        const { minPitch, maxPitch } = this.getViewportProps();
        const bearing = startBearing + 180 * deltaScaleX;
        let pitch = startPitch;
        if (deltaScaleY > 0) {
            // Gradually increase pitch
            pitch = startPitch + deltaScaleY * (maxPitch - startPitch);
        } else if (deltaScaleY < 0) {
            // Gradually decrease pitch
            pitch = startPitch - deltaScaleY * (minPitch - startPitch);
        }
        return {
            pitch,
            bearing
        };
    }
}
class MapController extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$controller$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(){
        super(...arguments);
        this.ControllerState = MapState;
        this.transition = {
            transitionDuration: 300,
            transitionInterpolator: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$transitions$2f$linear$2d$interpolator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
                transitionProps: {
                    compare: [
                        'longitude',
                        'latitude',
                        'zoom',
                        'bearing',
                        'pitch',
                        'position'
                    ],
                    required: [
                        'longitude',
                        'latitude',
                        'zoom'
                    ]
                }
            })
        };
        this.dragMode = 'pan';
    }
    setProps(props) {
        props.position = props.position || [
            0,
            0,
            0
        ];
        const oldProps = this.props;
        super.setProps(props);
        const dimensionChanged = !oldProps || oldProps.height !== props.height;
        if (dimensionChanged) {
            // Dimensions changed, normalize the props
            this.updateViewport(new this.ControllerState({
                makeViewport: this.makeViewport,
                ...props,
                ...this.state
            }));
        }
    }
} //# sourceMappingURL=map-controller.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/views/map-view.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$web$2d$mercator$2d$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$map$2d$controller$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/controllers/map-controller.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$views$2f$view$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/views/view.js [app-ssr] (ecmascript)");
;
;
;
class MapView extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$views$2f$view$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(props = {}){
        super(props);
    }
    getViewportType() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$web$2d$mercator$2d$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"];
    }
    get ControllerType() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$controllers$2f$map$2d$controller$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"];
    }
}
MapView.displayName = 'MapView';
const __TURBOPACK__default__export__ = MapView;
 //# sourceMappingURL=map-view.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/view-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>ViewManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/flatten.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [app-ssr] (ecmascript)");
;
;
;
class ViewManager {
    constructor(props){
        // List of view descriptors, gets re-evaluated when width/height changes
        this.views = [];
        this.width = 100;
        this.height = 100;
        this.viewState = {};
        this.controllers = {};
        this.timeline = props.timeline;
        this._viewports = []; // Generated viewports
        this._viewportMap = {};
        this._isUpdating = false;
        this._needsRedraw = 'First render';
        this._needsUpdate = 'Initialize';
        this._eventManager = props.eventManager;
        this._eventCallbacks = {
            onViewStateChange: props.onViewStateChange,
            onInteractionStateChange: props.onInteractionStateChange
        };
        Object.seal(this);
        // Init with default map viewport
        this.setProps(props);
    }
    /** Remove all resources and event listeners */ finalize() {
        for(const key in this.controllers){
            const controller = this.controllers[key];
            if (controller) {
                controller.finalize();
            }
        }
        this.controllers = {};
    }
    /** Check if a redraw is needed */ needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        return redraw;
    }
    /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */ setNeedsUpdate(reason) {
        this._needsUpdate = this._needsUpdate || reason;
        this._needsRedraw = this._needsRedraw || reason;
    }
    /** Checks each viewport for transition updates */ updateViewStates() {
        for(const viewId in this.controllers){
            const controller = this.controllers[viewId];
            if (controller) {
                controller.updateTransition();
            }
        }
    }
    /** Get a set of viewports for a given width and height
     * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props
     * @param rect (object, optional) - filter the viewports
     *   + not provided - return all viewports
     *   + {x, y} - only return viewports that contain this pixel
     *   + {x, y, width, height} - only return viewports that overlap with this rectangle
     */ getViewports(rect) {
        if (rect) {
            return this._viewports.filter((viewport)=>viewport.containsPixel(rect));
        }
        return this._viewports;
    }
    /** Get a map of all views */ getViews() {
        const viewMap = {};
        this.views.forEach((view)=>{
            viewMap[view.id] = view;
        });
        return viewMap;
    }
    /** Resolves a viewId string to a View */ getView(viewId) {
        return this.views.find((view)=>view.id === viewId);
    }
    /** Returns the viewState for a specific viewId. Matches the viewState by
      1. view.viewStateId
      2. view.id
      3. root viewState
      then applies the view's filter if any */ getViewState(viewOrViewId) {
        const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;
        // Backward compatibility: view state for single view
        const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;
        return view ? view.filterViewState(viewState) : viewState;
    }
    getViewport(viewId) {
        return this._viewportMap[viewId];
    }
    /**
     * Unproject pixel coordinates on screen onto world coordinates,
     * (possibly [lon, lat]) on map.
     * - [x, y] => [lng, lat]
     * - [x, y, z] => [lng, lat, Z]
     * @param {Array} xyz -
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether origin is top left
     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
     */ unproject(xyz, opts) {
        const viewports = this.getViewports();
        const pixel = {
            x: xyz[0],
            y: xyz[1]
        };
        for(let i = viewports.length - 1; i >= 0; --i){
            const viewport = viewports[i];
            if (viewport.containsPixel(pixel)) {
                const p = xyz.slice();
                p[0] -= viewport.x;
                p[1] -= viewport.y;
                return viewport.unproject(p, opts);
            }
        }
        return null;
    }
    /** Update the manager with new Deck props */ setProps(props) {
        if (props.views) {
            this._setViews(props.views);
        }
        if (props.viewState) {
            this._setViewState(props.viewState);
        }
        if ('width' in props || 'height' in props) {
            this._setSize(props.width, props.height);
        }
        // Important: avoid invoking _update() inside itself
        // Nested updates result in unexpected side effects inside _rebuildViewports()
        // when using auto control in pure-js
        if (!this._isUpdating) {
            this._update();
        }
    }
    //
    // PRIVATE METHODS
    //
    _update() {
        this._isUpdating = true;
        // Only rebuild viewports if the update flag is set
        if (this._needsUpdate) {
            this._needsUpdate = false;
            this._rebuildViewports();
        }
        // If viewport transition(s) are triggered during viewports update, controller(s)
        // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.
        if (this._needsUpdate) {
            this._needsUpdate = false;
            this._rebuildViewports();
        }
        this._isUpdating = false;
    }
    _setSize(width, height) {
        if (width !== this.width || height !== this.height) {
            this.width = width;
            this.height = height;
            this.setNeedsUpdate('Size changed');
        }
    }
    // Update the view descriptor list and set change flag if needed
    // Does not actually rebuild the `Viewport`s until `getViewports` is called
    _setViews(views) {
        views = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(views, Boolean);
        const viewsChanged = this._diffViews(views, this.views);
        if (viewsChanged) {
            this.setNeedsUpdate('views changed');
        }
        this.views = views;
    }
    _setViewState(viewState) {
        if (viewState) {
            // depth = 3 when comparing viewStates: viewId.position.0
            const viewStateChanged = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(viewState, this.viewState, 3);
            if (viewStateChanged) {
                this.setNeedsUpdate('viewState changed');
            }
            this.viewState = viewState;
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn('missing `viewState` or `initialViewState`')();
        }
    }
    _createController(view, props) {
        const Controller = props.type;
        const controller = new Controller({
            timeline: this.timeline,
            eventManager: this._eventManager,
            // Set an internal callback that calls the prop callback if provided
            onViewStateChange: this._eventCallbacks.onViewStateChange,
            onStateChange: this._eventCallbacks.onInteractionStateChange,
            makeViewport: (viewState)=>this.getView(view.id)?.makeViewport({
                    viewState,
                    width: this.width,
                    height: this.height
                })
        });
        return controller;
    }
    _updateController(view, viewState, viewport, controller) {
        const controllerProps = view.controller;
        if (controllerProps && viewport) {
            const resolvedProps = {
                ...viewState,
                ...controllerProps,
                id: view.id,
                x: viewport.x,
                y: viewport.y,
                width: viewport.width,
                height: viewport.height
            };
            // Create controller if not already existing or if the type of the
            // controller has changed.
            if (!controller || controller.constructor !== controllerProps.type) {
                controller = this._createController(view, resolvedProps);
            }
            if (controller) {
                controller.setProps(resolvedProps);
            }
            return controller;
        }
        return null;
    }
    // Rebuilds viewports from descriptors towards a certain window size
    _rebuildViewports() {
        const { views } = this;
        const oldControllers = this.controllers;
        this._viewports = [];
        this.controllers = {};
        let invalidateControllers = false;
        // Create controllers in reverse order, so that views on top receive events first
        for(let i = views.length; i--;){
            const view = views[i];
            const viewState = this.getViewState(view);
            const viewport = view.makeViewport({
                viewState,
                width: this.width,
                height: this.height
            });
            let oldController = oldControllers[view.id];
            const hasController = Boolean(view.controller);
            if (hasController && !oldController) {
                // When a new controller is added, invalidate all controllers below it so that
                // events are registered in the correct order
                invalidateControllers = true;
            }
            if ((invalidateControllers || !hasController) && oldController) {
                // Remove and reattach invalidated controller
                oldController.finalize();
                oldController = null;
            }
            // Update the controller
            this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);
            if (viewport) {
                this._viewports.unshift(viewport);
            }
        }
        // Remove unused controllers
        for(const id in oldControllers){
            const oldController = oldControllers[id];
            if (oldController && !this.controllers[id]) {
                oldController.finalize();
            }
        }
        this._buildViewportMap();
    }
    _buildViewportMap() {
        // Build a view id to view index
        this._viewportMap = {};
        this._viewports.forEach((viewport)=>{
            if (viewport.id) {
                // TODO - issue warning if multiple viewports use same id
                this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;
            }
        });
    }
    // Check if viewport array has changed, returns true if any change
    // Note that descriptors can be the same
    _diffViews(newViews, oldViews) {
        if (newViews.length !== oldViews.length) {
            return true;
        }
        return newViews.some((_, i)=>!newViews[i].equals(oldViews[i]));
    }
} //# sourceMappingURL=view-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/resource/resource.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>Resource)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$load$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@loaders.gl/core/dist/lib/api/load.js [app-ssr] (ecmascript)");
;
class Resource {
    constructor(id, data, context){
        this._loadCount = 0;
        this._subscribers = new Set();
        this.id = id;
        this.context = context;
        this.setData(data);
    }
    // consumer: {onChange: Function}
    subscribe(consumer) {
        this._subscribers.add(consumer);
    }
    unsubscribe(consumer) {
        this._subscribers.delete(consumer);
    }
    inUse() {
        return this._subscribers.size > 0;
    }
    delete() {
    // Remove any resources created
    }
    getData() {
        return this.isLoaded ? this._error ? Promise.reject(this._error) : this._content : this._loader.then(()=>this.getData());
    }
    setData(data, forceUpdate) {
        if (data === this._data && !forceUpdate) {
            return;
        }
        this._data = data;
        const loadCount = ++this._loadCount;
        let loader = data;
        if (typeof data === 'string') {
            loader = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$load$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["load"])(data);
        }
        if (loader instanceof Promise) {
            this.isLoaded = false;
            this._loader = loader.then((result)=>{
                // check if source has changed
                if (this._loadCount === loadCount) {
                    this.isLoaded = true;
                    this._error = undefined;
                    this._content = result;
                }
            }).catch((error)=>{
                if (this._loadCount === loadCount) {
                    this.isLoaded = true;
                    this._error = error || true;
                }
            });
        } else {
            this.isLoaded = true;
            this._error = undefined;
            this._content = data;
        }
        for (const subscriber of this._subscribers){
            subscriber.onChange(this.getData());
        }
    }
} //# sourceMappingURL=resource.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/resource/resource-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>ResourceManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$resource$2f$resource$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/resource/resource.js [app-ssr] (ecmascript)");
;
class ResourceManager {
    constructor(props){
        this.protocol = props.protocol || 'resource://';
        this._context = {
            device: props.device,
            // @ts-expect-error
            gl: props.device?.gl,
            resourceManager: this
        };
        this._resources = {};
        this._consumers = {};
        this._pruneRequest = null;
    }
    contains(resourceId) {
        if (resourceId.startsWith(this.protocol)) {
            return true;
        }
        return resourceId in this._resources;
    }
    add({ resourceId, data, forceUpdate = false, persistent = true }) {
        let res = this._resources[resourceId];
        if (res) {
            res.setData(data, forceUpdate);
        } else {
            res = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$resource$2f$resource$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](resourceId, data, this._context);
            this._resources[resourceId] = res;
        }
        // persistent resources can only be removed by calling `remove`
        // non-persistent resources may be released when there are no more consumers
        res.persistent = persistent;
    }
    remove(resourceId) {
        const res = this._resources[resourceId];
        if (res) {
            res.delete();
            delete this._resources[resourceId];
        }
    }
    unsubscribe({ consumerId }) {
        const consumer = this._consumers[consumerId];
        if (consumer) {
            for(const requestId in consumer){
                const request = consumer[requestId];
                const resource = this._resources[request.resourceId];
                if (resource) {
                    resource.unsubscribe(request);
                }
            }
            delete this._consumers[consumerId];
            this.prune();
        }
    }
    subscribe({ resourceId, onChange, consumerId, requestId = 'default' }) {
        const { _resources: resources, protocol } = this;
        if (resourceId.startsWith(protocol)) {
            resourceId = resourceId.replace(protocol, '');
            if (!resources[resourceId]) {
                // Add placeholder. When this resource becomes available, the consumer will be notified.
                this.add({
                    resourceId,
                    data: null,
                    persistent: false
                });
            }
        }
        const res = resources[resourceId];
        this._track(consumerId, requestId, res, onChange);
        if (res) {
            return res.getData();
        }
        return undefined;
    }
    prune() {
        if (!this._pruneRequest) {
            // prune() may be called multiple times in the same animation frame.
            // Batch multiple requests together
            // @ts-ignore setTimeout returns NodeJS.Timeout in node
            this._pruneRequest = setTimeout(()=>this._prune(), 0);
        }
    }
    finalize() {
        for(const key in this._resources){
            this._resources[key].delete();
        }
    }
    _track(consumerId, requestId, resource, onChange) {
        const consumers = this._consumers;
        const consumer = consumers[consumerId] = consumers[consumerId] || {};
        let request = consumer[requestId];
        const oldResource = request && request.resourceId && this._resources[request.resourceId];
        if (oldResource) {
            oldResource.unsubscribe(request);
            this.prune();
        }
        if (resource) {
            if (request) {
                request.onChange = onChange;
                request.resourceId = resource.id;
            } else {
                request = {
                    onChange,
                    resourceId: resource.id
                };
            }
            consumer[requestId] = request;
            resource.subscribe(request);
        }
    }
    _prune() {
        this._pruneRequest = null;
        for (const key of Object.keys(this._resources)){
            const res = this._resources[key];
            if (!res.persistent && !res.inUse()) {
                res.delete();
                delete this._resources[key];
            }
        }
    }
} //# sourceMappingURL=resource-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "getShaderAssembler": (()=>getShaderAssembler)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$misc$2f$geometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/misc/geometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$lib$2f$shader$2d$assembler$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const DEFAULT_MODULES = [
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$misc$2f$geometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
];
const SHADER_HOOKS = [
    'vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)',
    'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)',
    'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)',
    'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'
];
function getShaderAssembler() {
    const shaderAssembler = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$shadertools$2f$dist$2f$lib$2f$shader$2d$assembler$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ShaderAssembler"].getDefaultShaderAssembler();
    for (const shaderModule of DEFAULT_MODULES){
        shaderAssembler.addDefaultModule(shaderModule);
    }
    for (const shaderHook of SHADER_HOOKS){
        shaderAssembler.addShaderHook(shaderHook);
    }
    return shaderAssembler;
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/misc/layer-uniforms.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "layerUniforms": (()=>layerUniforms)
});
const uniformBlock = `\
uniform layerUniforms {
  uniform float opacity;
} layer;
`;
const layerUniforms = {
    name: 'layer',
    vs: uniformBlock,
    fs: uniformBlock,
    getUniforms: (props)=>{
        return {
            // apply gamma to opacity to make it visually "linear"
            // TODO - v10: use raw opacity?
            opacity: Math.pow(props.opacity, 1 / 2.2)
        };
    },
    uniformTypes: {
        opacity: 'f32'
    }
}; //# sourceMappingURL=layer-uniforms.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/layer-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>LayerManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$stats$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@probe.gl/stats/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/debug/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$resource$2f$resource$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/resource/resource-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/index.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$misc$2f$layer$2d$uniforms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/misc/layer-uniforms.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$stats$2f$dist$2f$lib$2f$stats$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Stats$3e$__ = __turbopack_import__("[project]/node_modules/@probe.gl/stats/dist/lib/stats.js [app-ssr] (ecmascript) <export default as Stats>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/viewports/viewport.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$animation$2f$timeline$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/engine/dist/animation/timeline.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/flatten.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lifecycle/constants.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
const TRACE_SET_LAYERS = 'layerManager.setLayers';
const TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';
class LayerManager {
    /**
     * @param device
     * @param param1
     */ // eslint-disable-next-line
    constructor(device, props){
        this._lastRenderedLayers = [];
        this._needsRedraw = false;
        this._needsUpdate = false;
        this._nextLayers = null;
        this._debug = false;
        // This flag is separate from _needsUpdate because it can be set during an update and should trigger another full update
        this._defaultShaderModulesChanged = false;
        //
        // INTERNAL METHODS
        //
        /** Make a viewport "current" in layer context, updating viewportChanged flags */ this.activateViewport = (viewport)=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_ACTIVATE_VIEWPORT, this, viewport);
            if (viewport) {
                this.context.viewport = viewport;
            }
        };
        const { deck, stats, viewport, timeline } = props || {};
        // Currently deck.gl expects the DeckGL.layers array to be different
        // whenever React rerenders. If the same layers array is used, the
        // LayerManager's diffing algorithm will generate a fatal error and
        // break the rendering.
        // `this._lastRenderedLayers` stores the UNFILTERED layers sent
        // down to LayerManager, so that `layers` reference can be compared.
        // If it's the same across two React render calls, the diffing logic
        // will be skipped.
        this.layers = [];
        this.resourceManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$resource$2f$resource$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
            device,
            protocol: 'deck://'
        });
        this.context = {
            mousePosition: null,
            userData: {},
            layerManager: this,
            device,
            // @ts-expect-error
            gl: device?.gl,
            deck,
            shaderAssembler: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getShaderAssembler"])(),
            defaultShaderModules: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$misc$2f$layer$2d$uniforms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["layerUniforms"]
            ],
            renderPass: undefined,
            stats: stats || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$stats$2f$dist$2f$lib$2f$stats$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Stats$3e$__["Stats"]({
                id: 'deck.gl'
            }),
            // Make sure context.viewport is not empty on the first layer initialization
            viewport: viewport || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$viewports$2f$viewport$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
                id: 'DEFAULT-INITIAL-VIEWPORT'
            }),
            timeline: timeline || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$animation$2f$timeline$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Timeline"](),
            resourceManager: this.resourceManager,
            onError: undefined
        };
        Object.seal(this);
    }
    /** Method to call when the layer manager is not needed anymore. */ finalize() {
        this.resourceManager.finalize();
        // Finalize all layers
        for (const layer of this.layers){
            this._finalizeLayer(layer);
        }
    }
    /** Check if a redraw is needed */ needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        let redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        // This layers list doesn't include sublayers, relying on composite layers
        for (const layer of this.layers){
            // Call every layer to clear their flags
            const layerNeedsRedraw = layer.getNeedsRedraw(opts);
            redraw = redraw || layerNeedsRedraw;
        }
        return redraw;
    }
    /** Check if a deep update of all layers is needed */ needsUpdate() {
        if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {
            // New layers array may be the same as the old one if `setProps` is called by React
            return 'layers changed';
        }
        if (this._defaultShaderModulesChanged) {
            return 'shader modules changed';
        }
        return this._needsUpdate;
    }
    /** Layers will be redrawn (in next animation frame) */ setNeedsRedraw(reason) {
        this._needsRedraw = this._needsRedraw || reason;
    }
    /** Layers will be updated deeply (in next animation frame)
      Potentially regenerating attributes and sub layers */ setNeedsUpdate(reason) {
        this._needsUpdate = this._needsUpdate || reason;
    }
    /** Gets a list of currently rendered layers. Optionally filter by id. */ getLayers({ layerIds } = {}) {
        // Filtering by layerId compares beginning of strings, so that sublayers will be included
        // Dependes on the convention of adding suffixes to the parent's layer name
        return layerIds ? this.layers.filter((layer)=>layerIds.find((layerId)=>layer.id.indexOf(layerId) === 0)) : this.layers;
    }
    /** Set props needed for layer rendering and picking. */ setProps(props) {
        if ('debug' in props) {
            this._debug = props.debug;
        }
        // A way for apps to add data to context that can be accessed in layers
        if ('userData' in props) {
            this.context.userData = props.userData;
        }
        // New layers will be processed in `updateLayers` in the next update cycle
        if ('layers' in props) {
            this._nextLayers = props.layers;
        }
        if ('onError' in props) {
            this.context.onError = props.onError;
        }
    }
    /** Supply a new layer list, initiating sublayer generation and layer matching */ setLayers(newLayers, reason) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_SET_LAYERS, this, reason, newLayers);
        this._lastRenderedLayers = newLayers;
        const flatLayers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(newLayers, Boolean);
        for (const layer of flatLayers){
            layer.context = this.context;
        }
        this._updateLayers(this.layers, flatLayers);
    }
    /** Update layers from last cycle if `setNeedsUpdate()` has been called */ updateLayers() {
        // NOTE: For now, even if only some layer has changed, we update all layers
        // to ensure that layer id maps etc remain consistent even if different
        // sublayers are rendered
        const reason = this.needsUpdate();
        if (reason) {
            this.setNeedsRedraw(`updating layers: ${reason}`);
            // Force a full update
            this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);
        }
        // Updated, clear the backlog
        this._nextLayers = null;
    }
    /** Register a default shader module */ addDefaultShaderModule(module) {
        const { defaultShaderModules } = this.context;
        if (!defaultShaderModules.find((m)=>m.name === module.name)) {
            defaultShaderModules.push(module);
            this._defaultShaderModulesChanged = true;
        }
    }
    /** Deregister a default shader module */ removeDefaultShaderModule(module) {
        const { defaultShaderModules } = this.context;
        const i = defaultShaderModules.findIndex((m)=>m.name === module.name);
        if (i >= 0) {
            defaultShaderModules.splice(i, 1);
            this._defaultShaderModulesChanged = true;
        }
    }
    _handleError(stage, error, layer) {
        layer.raiseError(error, `${stage} of ${layer}`);
    }
    // TODO - mark layers with exceptions as bad and remove from rendering cycle?
    /** Match all layers, checking for caught errors
      to avoid having an exception in one layer disrupt other layers */ _updateLayers(oldLayers, newLayers) {
        // Create old layer map
        const oldLayerMap = {};
        for (const oldLayer of oldLayers){
            if (oldLayerMap[oldLayer.id]) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn(`Multiple old layers with same id ${oldLayer.id}`)();
            } else {
                oldLayerMap[oldLayer.id] = oldLayer;
            }
        }
        if (this._defaultShaderModulesChanged) {
            for (const layer of oldLayers){
                layer.setNeedsUpdate();
                layer.setChangeFlags({
                    extensionsChanged: true
                });
            }
            this._defaultShaderModulesChanged = false;
        }
        // Allocate array for generated layers
        const generatedLayers = [];
        // Match sublayers
        this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);
        // Finalize unmatched layers
        this._finalizeOldLayers(oldLayerMap);
        let needsUpdate = false;
        for (const layer of generatedLayers){
            if (layer.hasUniformTransition()) {
                needsUpdate = `Uniform transition in ${layer}`;
                break;
            }
        }
        this._needsUpdate = needsUpdate;
        this.layers = generatedLayers;
    }
    /* eslint-disable complexity,max-statements */ // Note: adds generated layers to `generatedLayers` array parameter
    _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {
        for (const newLayer of newLayers){
            newLayer.context = this.context;
            // Given a new coming layer, find its matching old layer (if any)
            const oldLayer = oldLayerMap[newLayer.id];
            if (oldLayer === null) {
                // null, rather than undefined, means this id was originally there
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn(`Multiple new layers with same id ${newLayer.id}`)();
            }
            // Remove the old layer from candidates, as it has been matched with this layer
            oldLayerMap[newLayer.id] = null;
            let sublayers = null;
            // We must not generate exceptions until after layer matching is complete
            try {
                if (this._debug && oldLayer !== newLayer) {
                    newLayer.validateProps();
                }
                if (!oldLayer) {
                    this._initializeLayer(newLayer);
                } else {
                    this._transferLayerState(oldLayer, newLayer);
                    this._updateLayer(newLayer);
                }
                generatedLayers.push(newLayer);
                // Call layer lifecycle method: render sublayers
                sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;
            // End layer lifecycle method: render sublayers
            } catch (err) {
                this._handleError('matching', err, newLayer); // Record first exception
            }
            if (sublayers) {
                this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);
            }
        }
    }
    /* eslint-enable complexity,max-statements */ // Finalize any old layers that were not matched
    _finalizeOldLayers(oldLayerMap) {
        for(const layerId in oldLayerMap){
            const layer = oldLayerMap[layerId];
            if (layer) {
                this._finalizeLayer(layer);
            }
        }
    }
    // / EXCEPTION SAFE LAYER ACCESS
    /** Safely initializes a single layer, calling layer methods */ _initializeLayer(layer) {
        try {
            layer._initialize();
            layer.lifecycle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LIFECYCLE"].INITIALIZED;
        } catch (err) {
            this._handleError('initialization', err, layer);
        // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?
        }
    }
    /** Transfer state from one layer to a newer version */ _transferLayerState(oldLayer, newLayer) {
        newLayer._transferState(oldLayer);
        newLayer.lifecycle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LIFECYCLE"].MATCHED;
        if (newLayer !== oldLayer) {
            oldLayer.lifecycle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LIFECYCLE"].AWAITING_GC;
        }
    }
    /** Safely updates a single layer, cleaning all flags */ _updateLayer(layer) {
        try {
            layer._update();
        } catch (err) {
            this._handleError('update', err, layer);
        }
    }
    /** Safely finalizes a single layer, removing all resources */ _finalizeLayer(layer) {
        this._needsRedraw = this._needsRedraw || `finalized ${layer}`;
        layer.lifecycle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LIFECYCLE"].AWAITING_FINALIZATION;
        try {
            layer._finalize();
            layer.lifecycle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lifecycle$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LIFECYCLE"].FINALIZED;
        } catch (err) {
            this._handleError('finalization', err, layer);
        }
    }
} //# sourceMappingURL=layer-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/shaderlib/shadow/shadow.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/project/project.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/memoize.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/matrix4.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/vector3.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
;
;
;
;
;
const uniformBlock = /* glsl */ `
uniform shadowUniforms {
  bool drawShadowMap;
  bool useShadowMap;
  vec4 color;
  highp int lightId;
  float lightCount;
  mat4 viewProjectionMatrix0;
  mat4 viewProjectionMatrix1;
  vec4 projectCenter0;
  vec4 projectCenter1;
} shadow;
`;
const vertex = /* glsl */ `
const int max_lights = 2;

out vec3 shadow_vPosition[max_lights];

vec4 shadow_setVertexPosition(vec4 position_commonspace) {
  mat4 viewProjectionMatrices[max_lights];
  viewProjectionMatrices[0] = shadow.viewProjectionMatrix0;
  viewProjectionMatrices[1] = shadow.viewProjectionMatrix1;
  vec4 projectCenters[max_lights];
  projectCenters[0] = shadow.projectCenter0;
  projectCenters[1] = shadow.projectCenter1;

  if (shadow.drawShadowMap) {
    return project_common_position_to_clipspace(position_commonspace, viewProjectionMatrices[shadow.lightId], projectCenters[shadow.lightId]);
  }
  if (shadow.useShadowMap) {
    for (int i = 0; i < max_lights; i++) {
      if(i < int(shadow.lightCount)) {
        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, viewProjectionMatrices[i], projectCenters[i]);
        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;
      }
    }
  }
  return gl_Position;
}
`;
const vs = `
${uniformBlock}
${vertex}
`;
const fragment = /* glsl */ `
const int max_lights = 2;
uniform sampler2D shadow_uShadowMap0;
uniform sampler2D shadow_uShadowMap1;

in vec3 shadow_vPosition[max_lights];

const vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);
const vec4 bitUnpackShift = 1.0 / bitPackShift;
const vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);

float shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {
  vec4 rgbaDepth = texture(shadowMap, position.xy);

  float z = dot(rgbaDepth, bitUnpackShift);
  return smoothstep(0.001, 0.01, position.z - z);
}

vec4 shadow_filterShadowColor(vec4 color) {
  if (shadow.drawShadowMap) {
    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);
    rgbaDepth -= rgbaDepth.gbaa * bitMask;
    return rgbaDepth;
  }
  if (shadow.useShadowMap) {
    float shadowAlpha = 0.0;
    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);
    if(shadow.lightCount > 1.0) {
      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);
    }
    shadowAlpha *= shadow.color.a / shadow.lightCount;
    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);

    return vec4(
      mix(color.rgb, shadow.color.rgb, shadowAlpha / blendedAlpha),
      blendedAlpha
    );
  }
  return color;
}
`;
const fs = `
${uniformBlock}
${fragment}
`;
const getMemoizedViewportCenterPosition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(getViewportCenterPosition);
const getMemoizedViewProjectionMatrices = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$memoize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(getViewProjectionMatrices);
const DEFAULT_SHADOW_COLOR = [
    0,
    0,
    0,
    1.0
];
const VECTOR_TO_POINT_MATRIX = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0
];
function screenToCommonSpace(xyz, pixelUnprojectionMatrix) {
    const [x, y, z] = xyz;
    const coord = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pixelsToWorld"])([
        x,
        y,
        z
    ], pixelUnprojectionMatrix);
    if (Number.isFinite(z)) {
        return coord;
    }
    return [
        coord[0],
        coord[1],
        0
    ];
}
function getViewportCenterPosition({ viewport, center }) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"](viewport.viewProjectionMatrix).invert().transform(center);
}
function getViewProjectionMatrices({ viewport, shadowMatrices }) {
    const projectionMatrices = [];
    const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;
    const farZ = viewport.isGeospatial ? undefined : 1;
    const corners = [
        [
            0,
            0,
            farZ
        ],
        [
            viewport.width,
            0,
            farZ
        ],
        [
            0,
            viewport.height,
            farZ
        ],
        [
            viewport.width,
            viewport.height,
            farZ
        ],
        [
            0,
            0,
            -1
        ],
        [
            viewport.width,
            0,
            -1
        ],
        [
            0,
            viewport.height,
            -1
        ],
        [
            viewport.width,
            viewport.height,
            -1
        ] // bottom right near
    ].map((pixel)=>// @ts-expect-error z may be undefined
        screenToCommonSpace(pixel, pixelUnprojectionMatrix));
    for (const shadowMatrix of shadowMatrices){
        const viewMatrix = shadowMatrix.clone().translate(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"](viewport.center).negate());
        const positions = corners.map((corner)=>viewMatrix.transform(corner));
        const projectionMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"]().ortho({
            left: Math.min(...positions.map((position)=>position[0])),
            right: Math.max(...positions.map((position)=>position[0])),
            bottom: Math.min(...positions.map((position)=>position[1])),
            top: Math.max(...positions.map((position)=>position[1])),
            near: Math.min(...positions.map((position)=>-position[2])),
            far: Math.max(...positions.map((position)=>-position[2]))
        });
        projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));
    }
    return projectionMatrices;
}
/* eslint-disable camelcase */ // eslint-disable-next-line complexity
function createShadowUniforms(opts) {
    const { shadowEnabled = true, project: projectProps } = opts;
    if (!shadowEnabled || !projectProps || !opts.shadowMatrices || !opts.shadowMatrices.length) {
        return {
            drawShadowMap: false,
            useShadowMap: false,
            shadow_uShadowMap0: opts.dummyShadowMap,
            shadow_uShadowMap1: opts.dummyShadowMap
        };
    }
    const projectUniforms = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].getUniforms(projectProps);
    const center = getMemoizedViewportCenterPosition({
        viewport: projectProps.viewport,
        center: projectUniforms.center
    });
    const projectCenters = [];
    const viewProjectionMatrices = getMemoizedViewProjectionMatrices({
        shadowMatrices: opts.shadowMatrices,
        viewport: projectProps.viewport
    }).slice();
    for(let i = 0; i < opts.shadowMatrices.length; i++){
        const viewProjectionMatrix = viewProjectionMatrices[i];
        const viewProjectionMatrixCentered = viewProjectionMatrix.clone().translate(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"](projectProps.viewport.center).negate());
        if (projectUniforms.coordinateSystem === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COORDINATE_SYSTEM"].LNGLAT && projectUniforms.projectionMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PROJECTION_MODE"].WEB_MERCATOR) {
            viewProjectionMatrices[i] = viewProjectionMatrixCentered;
            projectCenters[i] = center;
        } else {
            viewProjectionMatrices[i] = viewProjectionMatrix.clone().multiplyRight(VECTOR_TO_POINT_MATRIX);
            projectCenters[i] = viewProjectionMatrixCentered.transform(center);
        }
    }
    const uniforms = {
        drawShadowMap: Boolean(opts.drawToShadowMap),
        useShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,
        color: opts.shadowColor || DEFAULT_SHADOW_COLOR,
        lightId: opts.shadowLightId || 0,
        lightCount: opts.shadowMatrices.length,
        shadow_uShadowMap0: opts.dummyShadowMap,
        shadow_uShadowMap1: opts.dummyShadowMap
    };
    for(let i = 0; i < viewProjectionMatrices.length; i++){
        uniforms[`viewProjectionMatrix${i}`] = viewProjectionMatrices[i];
        uniforms[`projectCenter${i}`] = projectCenters[i];
    }
    for(let i = 0; i < 2; i++){
        uniforms[`shadow_uShadowMap${i}`] = opts.shadowMaps && opts.shadowMaps[i] || opts.dummyShadowMap;
    }
    return uniforms;
}
const __TURBOPACK__default__export__ = {
    name: 'shadow',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$project$2f$project$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
    ],
    vs,
    fs,
    inject: {
        'vs:DECKGL_FILTER_GL_POSITION': `
    position = shadow_setVertexPosition(geometry.position);
    `,
        'fs:DECKGL_FILTER_COLOR': `
    color = shadow_filterShadowColor(color);
    `
    },
    getUniforms: createShadowUniforms,
    uniformTypes: {
        drawShadowMap: 'f32',
        useShadowMap: 'f32',
        color: 'vec4<f32>',
        lightId: 'i32',
        lightCount: 'f32',
        viewProjectionMatrix0: 'mat4x4<f32>',
        viewProjectionMatrix1: 'mat4x4<f32>',
        projectCenter0: 'vec4<f32>',
        projectCenter1: 'vec4<f32>'
    }
};
 //# sourceMappingURL=shadow.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/passes/pass.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Base class for passes
 * @todo v9 - should the luma.gl RenderPass be owned by this class?
 * Currently owned by subclasses
 */ __turbopack_esm__({
    "default": (()=>Pass)
});
class Pass {
    /** Create a new Pass instance */ constructor(device, props = {
        id: 'pass'
    }){
        const { id } = props;
        this.id = id; // id of this pass
        this.device = device;
        this.props = {
            ...props
        };
    }
    setProps(props) {
        Object.assign(this.props, props);
    }
    render(params) {}
    cleanup() {}
} //# sourceMappingURL=pass.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/passes/layers-pass.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>LayersPass),
    "layerIndexResolver": (()=>layerIndexResolver)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/pass.js [app-ssr] (ecmascript)");
;
class LayersPass extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(){
        super(...arguments);
        this._lastRenderIndex = -1;
    }
    render(options) {
        // @ts-expect-error TODO - assuming WebGL context
        const [width, height] = this.device.canvasContext.getDrawingBufferSize();
        // Explicitly specify clearColor and clearDepth, overriding render pass defaults.
        const clearCanvas = options.clearCanvas ?? true;
        const clearColor = options.clearColor ?? (clearCanvas ? [
            0,
            0,
            0,
            0
        ] : false);
        const clearDepth = clearCanvas ? 1 : false;
        const clearStencil = clearCanvas ? 0 : false;
        const colorMask = options.colorMask ?? 0xf;
        const parameters = {
            viewport: [
                0,
                0,
                width,
                height
            ]
        };
        if (options.colorMask) {
            parameters.colorMask = colorMask;
        }
        if (options.scissorRect) {
            parameters.scissorRect = options.scissorRect;
        }
        const renderPass = this.device.beginRenderPass({
            framebuffer: options.target,
            parameters,
            clearColor: clearColor,
            clearDepth,
            clearStencil
        });
        try {
            return this._drawLayers(renderPass, options);
        } finally{
            renderPass.end();
        }
    }
    /** Draw a list of layers in a list of viewports */ _drawLayers(renderPass, options) {
        const { target, shaderModuleProps, viewports, views, onViewportActive, clearStack = true } = options;
        options.pass = options.pass || 'unknown';
        if (clearStack) {
            this._lastRenderIndex = -1;
        }
        const renderStats = [];
        for (const viewport of viewports){
            const view = views && views[viewport.id];
            // Update context to point to this viewport
            onViewportActive?.(viewport);
            const drawLayerParams = this._getDrawLayerParams(viewport, options);
            // render this viewport
            const subViewports = viewport.subViewports || [
                viewport
            ];
            for (const subViewport of subViewports){
                const stats = this._drawLayersInViewport(renderPass, {
                    target,
                    shaderModuleProps,
                    viewport: subViewport,
                    view,
                    pass: options.pass,
                    layers: options.layers
                }, drawLayerParams);
                renderStats.push(stats);
            }
        }
        return renderStats;
    }
    // When a viewport contains multiple subviewports (e.g. repeated web mercator map),
    // this is only done once for the parent viewport
    /* Resolve the parameters needed to draw each layer */ _getDrawLayerParams(viewport, { layers, pass, isPicking = false, layerFilter, cullRect, effects, shaderModuleProps }, /** Internal flag, true if only used to determine whether each layer should be drawn */ evaluateShouldDrawOnly = false) {
        const drawLayerParams = [];
        const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);
        const drawContext = {
            layer: layers[0],
            viewport,
            isPicking,
            renderPass: pass,
            cullRect
        };
        const layerFilterCache = {};
        for(let layerIndex = 0; layerIndex < layers.length; layerIndex++){
            const layer = layers[layerIndex];
            // Check if we should draw layer
            const shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);
            const layerParam = {
                shouldDrawLayer
            };
            if (shouldDrawLayer && !evaluateShouldDrawOnly) {
                layerParam.shouldDrawLayer = true;
                // This is the "logical" index for ordering this layer in the stack
                // used to calculate polygon offsets
                // It can be the same as another layer
                layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);
                layerParam.shaderModuleProps = this._getShaderModuleProps(layer, effects, pass, shaderModuleProps);
                layerParam.layerParameters = {
                    ...layer.context.deck?.props.parameters,
                    ...this.getLayerParameters(layer, layerIndex, viewport)
                };
            }
            drawLayerParams[layerIndex] = layerParam;
        }
        return drawLayerParams;
    }
    // Draws a list of layers in one viewport
    // TODO - when picking we could completely skip rendering viewports that dont
    // intersect with the picking rect
    /* eslint-disable max-depth, max-statements */ _drawLayersInViewport(renderPass, { layers, shaderModuleProps: globalModuleParameters, pass, target, viewport, view }, drawLayerParams) {
        const glViewport = getGLViewport(this.device, {
            shaderModuleProps: globalModuleParameters,
            target,
            viewport
        });
        if (view && view.props.clear) {
            const clearOpts = view.props.clear === true ? {
                color: true,
                depth: true
            } : view.props.clear;
            const clearRenderPass = this.device.beginRenderPass({
                framebuffer: target,
                parameters: {
                    viewport: glViewport,
                    scissorRect: glViewport
                },
                clearColor: clearOpts.color ? [
                    0,
                    0,
                    0,
                    0
                ] : false,
                clearDepth: clearOpts.depth ? 1 : false
            });
            clearRenderPass.end();
        }
        // render layers in normal colors
        const renderStatus = {
            totalCount: layers.length,
            visibleCount: 0,
            compositeCount: 0,
            pickableCount: 0
        };
        renderPass.setParameters({
            viewport: glViewport
        });
        // render layers in normal colors
        for(let layerIndex = 0; layerIndex < layers.length; layerIndex++){
            const layer = layers[layerIndex];
            const drawLayerParameters = drawLayerParams[layerIndex];
            const { shouldDrawLayer } = drawLayerParameters;
            // Calculate stats
            if (shouldDrawLayer && layer.props.pickable) {
                renderStatus.pickableCount++;
            }
            if (layer.isComposite) {
                renderStatus.compositeCount++;
            }
            if (layer.isDrawable && drawLayerParameters.shouldDrawLayer) {
                const { layerRenderIndex, shaderModuleProps, layerParameters } = drawLayerParameters;
                // Draw the layer
                renderStatus.visibleCount++;
                this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);
                // overwrite layer.context.viewport with the sub viewport
                if (shaderModuleProps.project) {
                    shaderModuleProps.project.viewport = viewport;
                }
                // TODO v9 - we are sending renderPass both as a parameter and through the context.
                // Long-term, it is likely better not to have user defined layer methods have to access
                // the "global" layer context.
                layer.context.renderPass = renderPass;
                try {
                    layer._drawLayer({
                        renderPass,
                        shaderModuleProps,
                        uniforms: {
                            layerIndex: layerRenderIndex
                        },
                        parameters: layerParameters
                    });
                } catch (err) {
                    layer.raiseError(err, `drawing ${layer} to ${pass}`);
                }
            }
        }
        return renderStatus;
    }
    /* eslint-enable max-depth, max-statements */ /* Methods for subclass overrides */ shouldDrawLayer(layer) {
        return true;
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
        return null;
    }
    getLayerParameters(layer, layerIndex, viewport) {
        return layer.props.parameters;
    }
    /* Private */ _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {
        const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);
        if (!shouldDrawLayer) {
            return false;
        }
        drawContext.layer = layer;
        let parent = layer.parent;
        while(parent){
            // @ts-ignore
            if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {
                return false;
            }
            drawContext.layer = parent;
            parent = parent.parent;
        }
        if (layerFilter) {
            const rootLayerId = drawContext.layer.id;
            if (!(rootLayerId in layerFilterCache)) {
                layerFilterCache[rootLayerId] = layerFilter(drawContext);
            }
            if (!layerFilterCache[rootLayerId]) {
                return false;
            }
        }
        // If a layer is drawn, update its viewportChanged flag
        layer.activateViewport(drawContext.viewport);
        return true;
    }
    _getShaderModuleProps(layer, effects, pass, overrides) {
        // @ts-expect-error TODO - assuming WebGL context
        const devicePixelRatio = this.device.canvasContext.cssToDeviceRatio();
        const layerProps = layer.internalState?.propsInTransition || layer.props;
        const shaderModuleProps = {
            layer: layerProps,
            picking: {
                isActive: false
            },
            project: {
                viewport: layer.context.viewport,
                devicePixelRatio,
                modelMatrix: layerProps.modelMatrix,
                coordinateSystem: layerProps.coordinateSystem,
                coordinateOrigin: layerProps.coordinateOrigin,
                autoWrapLongitude: layer.wrapLongitude
            }
        };
        if (effects) {
            for (const effect of effects){
                mergeModuleParameters(shaderModuleProps, effect.getShaderModuleProps?.(layer, shaderModuleProps));
            }
        }
        return mergeModuleParameters(shaderModuleProps, this.getShaderModuleProps(layer, effects, shaderModuleProps), overrides);
    }
}
function layerIndexResolver(startIndex = 0, layerIndices = {}) {
    const resolvers = {};
    const resolveLayerIndex = (layer, isDrawn)=>{
        const indexOverride = layer.props._offset;
        const layerId = layer.id;
        const parentId = layer.parent && layer.parent.id;
        let index;
        if (parentId && !(parentId in layerIndices)) {
            // Populate layerIndices with the parent layer's index
            resolveLayerIndex(layer.parent, false);
        }
        if (parentId in resolvers) {
            const resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);
            index = resolver(layer, isDrawn);
            resolvers[layerId] = resolver;
        } else if (Number.isFinite(indexOverride)) {
            index = indexOverride + (layerIndices[parentId] || 0);
            // Mark layer as needing its own resolver
            // We don't actually create it until it's used for the first time
            resolvers[layerId] = null;
        } else {
            index = startIndex;
        }
        if (isDrawn && index >= startIndex) {
            startIndex = index + 1;
        }
        layerIndices[layerId] = index;
        return index;
    };
    return resolveLayerIndex;
}
// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates
function getGLViewport(device, { shaderModuleProps, target, viewport }) {
    const pixelRatio = shaderModuleProps?.project?.devicePixelRatio ?? // @ts-expect-error TODO - assuming WebGL context
    device.canvasContext.cssToDeviceRatio();
    // Default framebuffer is used when writing to canvas
    // @ts-expect-error TODO - assuming WebGL context
    const [, drawingBufferHeight] = device.canvasContext.getDrawingBufferSize();
    const height = target ? target.height : drawingBufferHeight;
    // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates
    const dimensions = viewport;
    return [
        dimensions.x * pixelRatio,
        height - (dimensions.y + dimensions.height) * pixelRatio,
        dimensions.width * pixelRatio,
        dimensions.height * pixelRatio
    ];
}
function mergeModuleParameters(target, ...sources) {
    for (const source of sources){
        if (source) {
            for(const key in source){
                if (target[key]) {
                    Object.assign(target[key], source[key]);
                } else {
                    target[key] = source[key];
                }
            }
        }
    }
    return target;
} //# sourceMappingURL=layers-pass.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/passes/shadow-pass.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>ShadowPass)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/layers-pass.js [app-ssr] (ecmascript)");
;
class ShadowPass extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(device, props){
        super(device, props);
        // The shadowMap texture
        const shadowMap = device.createTexture({
            format: 'rgba8unorm',
            width: 1,
            height: 1,
            sampler: {
                minFilter: 'linear',
                magFilter: 'linear',
                addressModeU: 'clamp-to-edge',
                addressModeV: 'clamp-to-edge'
            },
            mipmaps: true
        });
        const depthBuffer = device.createTexture({
            format: 'depth16unorm',
            width: 1,
            height: 1,
            mipmaps: false
        });
        this.fbo = device.createFramebuffer({
            id: 'shadowmap',
            width: 1,
            height: 1,
            colorAttachments: [
                shadowMap
            ],
            // Depth attachment has to be specified for depth test to work
            depthStencilAttachment: depthBuffer
        });
    }
    delete() {
        if (this.fbo) {
            this.fbo.destroy();
            this.fbo = null;
        }
    }
    getShadowMap() {
        return this.fbo.colorAttachments[0].texture;
    }
    render(params) {
        const target = this.fbo;
        // @ts-expect-error TODO - assuming WebGL context
        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
        const viewport = params.viewports[0];
        const width = viewport.width * pixelRatio;
        const height = viewport.height * pixelRatio;
        const clearColor = [
            1,
            1,
            1,
            1
        ];
        if (width !== target.width || height !== target.height) {
            target.resize({
                width,
                height
            });
        }
        super.render({
            ...params,
            clearColor,
            target,
            pass: 'shadow'
        });
    }
    getLayerParameters(layer, layerIndex, viewport) {
        return {
            ...layer.props.parameters,
            blend: false,
            depthWriteEnabled: true,
            depthCompare: 'less-equal'
        };
    }
    shouldDrawLayer(layer) {
        return layer.props.shadowEnabled !== false;
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
        return {
            shadow: {
                project: otherShaderModuleProps.project,
                drawToShadowMap: true
            }
        };
    }
} //# sourceMappingURL=shadow-pass.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/effects/lighting/ambient-light.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "AmbientLight": (()=>AmbientLight)
});
const DEFAULT_LIGHT_COLOR = [
    255,
    255,
    255
];
const DEFAULT_LIGHT_INTENSITY = 1.0;
let idCount = 0;
class AmbientLight {
    constructor(props = {}){
        this.type = 'ambient';
        const { color = DEFAULT_LIGHT_COLOR } = props;
        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
        this.id = props.id || `ambient-${idCount++}`;
        this.color = color;
        this.intensity = intensity;
    }
} //# sourceMappingURL=ambient-light.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/effects/lighting/directional-light.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "DirectionalLight": (()=>DirectionalLight)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/vector3.js [app-ssr] (ecmascript)");
;
const DEFAULT_LIGHT_COLOR = [
    255,
    255,
    255
];
const DEFAULT_LIGHT_INTENSITY = 1.0;
const DEFAULT_LIGHT_DIRECTION = [
    0.0,
    0.0,
    -1.0
];
let idCount = 0;
class DirectionalLight {
    constructor(props = {}){
        this.type = 'directional';
        const { color = DEFAULT_LIGHT_COLOR } = props;
        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
        const { direction = DEFAULT_LIGHT_DIRECTION } = props;
        const { _shadow = false } = props;
        this.id = props.id || `directional-${idCount++}`;
        this.color = color;
        this.intensity = intensity;
        this.type = 'directional';
        this.direction = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"](direction).normalize().toArray();
        this.shadow = _shadow;
    }
    getProjectedLight(opts) {
        return this;
    }
} //# sourceMappingURL=directional-light.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/effects/lighting/lighting-effect.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>LightingEffect)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$shadow$2f$shadow$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/shaderlib/shadow/shadow.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/matrix4.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@math.gl/core/dist/classes/vector3.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$shadow$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/shadow-pass.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$ambient$2d$light$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/effects/lighting/ambient-light.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$directional$2d$light$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/effects/lighting/directional-light.js [app-ssr] (ecmascript)");
;
;
;
;
;
const DEFAULT_AMBIENT_LIGHT_PROPS = {
    color: [
        255,
        255,
        255
    ],
    intensity: 1.0
};
const DEFAULT_DIRECTIONAL_LIGHT_PROPS = [
    {
        color: [
            255,
            255,
            255
        ],
        intensity: 1.0,
        direction: [
            -1,
            3,
            -1
        ]
    },
    {
        color: [
            255,
            255,
            255
        ],
        intensity: 0.9,
        direction: [
            1,
            -8,
            -2.5
        ]
    }
];
const DEFAULT_SHADOW_COLOR = [
    0,
    0,
    0,
    200 / 255
];
class LightingEffect {
    constructor(props = {}){
        this.id = 'lighting-effect';
        this.shadowColor = DEFAULT_SHADOW_COLOR;
        this.shadow = false;
        this.directionalLights = [];
        this.pointLights = [];
        this.shadowPasses = [];
        this.dummyShadowMap = null;
        this.setProps(props);
    }
    setup(context) {
        this.context = context;
        const { device, deck } = context;
        if (this.shadow && !this.dummyShadowMap) {
            this._createShadowPasses(device);
            deck._addDefaultShaderModule(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$shadow$2f$shadow$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
            this.dummyShadowMap = device.createTexture({
                width: 1,
                height: 1
            });
        }
    }
    setProps(props) {
        this.ambientLight = undefined;
        this.directionalLights = [];
        this.pointLights = [];
        for(const key in props){
            const lightSource = props[key];
            switch(lightSource.type){
                case 'ambient':
                    this.ambientLight = lightSource;
                    break;
                case 'directional':
                    this.directionalLights.push(lightSource);
                    break;
                case 'point':
                    this.pointLights.push(lightSource);
                    break;
                default:
            }
        }
        this._applyDefaultLights();
        this.shadow = this.directionalLights.some((light)=>light.shadow);
        if (this.context) {
            // Create resources if necessary
            this.setup(this.context);
        }
        this.props = props;
    }
    preRender({ layers, layerFilter, viewports, onViewportActive, views }) {
        if (!this.shadow) return;
        // create light matrix every frame to make sure always updated from light source
        this.shadowMatrices = this._calculateMatrices();
        for(let i = 0; i < this.shadowPasses.length; i++){
            const shadowPass = this.shadowPasses[i];
            shadowPass.render({
                layers,
                layerFilter,
                viewports,
                onViewportActive,
                views,
                shaderModuleProps: {
                    shadow: {
                        shadowLightId: i,
                        dummyShadowMap: this.dummyShadowMap,
                        shadowMatrices: this.shadowMatrices
                    }
                }
            });
        }
    }
    getShaderModuleProps(layer, otherShaderModuleProps) {
        const shadowProps = this.shadow ? {
            project: otherShaderModuleProps.project,
            shadowMaps: this.shadowPasses.map((shadowPass)=>shadowPass.getShadowMap()),
            dummyShadowMap: this.dummyShadowMap,
            shadowColor: this.shadowColor,
            shadowMatrices: this.shadowMatrices
        } : {};
        // when not rendering to screen, turn off lighting by adding empty light source object
        // lights shader module relies on the `lightSources` to turn on/off lighting
        const lightingProps = {
            enabled: true,
            ambientLight: this.ambientLight,
            directionalLights: this.directionalLights.map((directionalLight)=>directionalLight.getProjectedLight({
                    layer
                })),
            pointLights: this.pointLights.map((pointLight)=>pointLight.getProjectedLight({
                    layer
                }))
        };
        // @ts-expect-error material is not a Layer prop
        const materialProps = layer.props.material;
        return {
            shadow: shadowProps,
            lighting: lightingProps,
            phongMaterial: materialProps,
            gouraudMaterial: materialProps
        };
    }
    cleanup(context) {
        for (const shadowPass of this.shadowPasses){
            shadowPass.delete();
        }
        this.shadowPasses.length = 0;
        if (this.dummyShadowMap) {
            this.dummyShadowMap.destroy();
            this.dummyShadowMap = null;
            context.deck._removeDefaultShaderModule(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$shaderlib$2f$shadow$2f$shadow$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
        }
    }
    _calculateMatrices() {
        const lightMatrices = [];
        for (const light of this.directionalLights){
            const viewMatrix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$matrix4$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Matrix4"]().lookAt({
                eye: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$core$2f$dist$2f$classes$2f$vector3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Vector3"](light.direction).negate()
            });
            lightMatrices.push(viewMatrix);
        }
        return lightMatrices;
    }
    _createShadowPasses(device) {
        for(let i = 0; i < this.directionalLights.length; i++){
            const shadowPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$shadow$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](device);
            this.shadowPasses[i] = shadowPass;
        }
    }
    _applyDefaultLights() {
        const { ambientLight, pointLights, directionalLights } = this;
        if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {
            this.ambientLight = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$ambient$2d$light$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AmbientLight"](DEFAULT_AMBIENT_LIGHT_PROPS);
            this.directionalLights.push(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$directional$2d$light$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DirectionalLight"](DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$directional$2d$light$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DirectionalLight"](DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));
        }
    }
} //# sourceMappingURL=lighting-effect.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/effect-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>EffectManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$lighting$2d$effect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/effects/lighting/lighting-effect.js [app-ssr] (ecmascript)");
;
;
const DEFAULT_LIGHTING_EFFECT = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$lighting$2d$effect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]();
/** Sort two effects. Returns 0 if equal, negative if e1 < e2, positive if e1 > e2 */ function compareEffects(e1, e2) {
    const o1 = e1.order ?? Infinity;
    const o2 = e2.order ?? Infinity;
    return o1 - o2;
}
class EffectManager {
    constructor(context){
        this._resolvedEffects = [];
        /** Effect instances and order preference pairs, sorted by order */ this._defaultEffects = [];
        this.effects = [];
        this._context = context;
        this._needsRedraw = 'Initial render';
        this._setEffects([]);
    }
    /**
     * Register a new default effect, i.e. an effect presents regardless of user supplied props.effects
     */ addDefaultEffect(effect) {
        const defaultEffects = this._defaultEffects;
        if (!defaultEffects.find((e)=>e.id === effect.id)) {
            const index = defaultEffects.findIndex((e)=>compareEffects(e, effect) > 0);
            if (index < 0) {
                defaultEffects.push(effect);
            } else {
                defaultEffects.splice(index, 0, effect);
            }
            effect.setup(this._context);
            this._setEffects(this.effects);
        }
    }
    setProps(props) {
        if ('effects' in props) {
            // Compare effects against each other shallowly
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(props.effects, this.effects, 1)) {
                this._setEffects(props.effects);
            }
        }
    }
    needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        return redraw;
    }
    getEffects() {
        return this._resolvedEffects;
    }
    _setEffects(effects) {
        const oldEffectsMap = {};
        for (const effect of this.effects){
            oldEffectsMap[effect.id] = effect;
        }
        const nextEffects = [];
        for (const effect of effects){
            const oldEffect = oldEffectsMap[effect.id];
            let effectToAdd = effect;
            if (oldEffect && oldEffect !== effect) {
                if (oldEffect.setProps) {
                    oldEffect.setProps(effect.props);
                    effectToAdd = oldEffect;
                } else {
                    oldEffect.cleanup(this._context);
                }
            } else if (!oldEffect) {
                effect.setup(this._context);
            }
            nextEffects.push(effectToAdd);
            delete oldEffectsMap[effect.id];
        }
        for(const removedEffectId in oldEffectsMap){
            oldEffectsMap[removedEffectId].cleanup(this._context);
        }
        this.effects = nextEffects;
        this._resolvedEffects = nextEffects.concat(this._defaultEffects);
        // Special case for lighting: only add default instance if no LightingEffect is specified
        if (!effects.some((effect)=>effect instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$lighting$2f$lighting$2d$effect$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])) {
            this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);
        }
        this._needsRedraw = 'effects changed';
    }
    finalize() {
        for (const effect of this._resolvedEffects){
            effect.cleanup(this._context);
        }
        this.effects.length = 0;
        this._resolvedEffects.length = 0;
        this._defaultEffects.length = 0;
    }
} //# sourceMappingURL=effect-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/passes/draw-layers-pass.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>DrawLayersPass)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/layers-pass.js [app-ssr] (ecmascript)");
;
class DrawLayersPass extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    shouldDrawLayer(layer) {
        const { operation } = layer.props;
        return operation.includes('draw') || operation.includes('terrain');
    }
} //# sourceMappingURL=draw-layers-pass.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>PickLayersPass)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/layers-pass.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
;
;
const PICKING_BLENDING = {
    blendColorOperation: 'add',
    blendColorSrcFactor: 'one',
    blendColorDstFactor: 'zero',
    blendAlphaOperation: 'add',
    blendAlphaSrcFactor: 'constant-alpha',
    blendAlphaDstFactor: 'zero'
};
class PickLayersPass extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] {
    constructor(){
        super(...arguments);
        this._colorEncoderState = null;
    }
    render(props) {
        if ('pickingFBO' in props) {
            // When drawing into an off-screen buffer, use the alpha channel to encode layer index
            return this._drawPickingBuffer(props);
        }
        // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible
        return super.render(props);
    }
    // Private
    // Draws list of layers and viewports into the picking buffer
    // Note: does not sample the buffer, that has to be done by the caller
    _drawPickingBuffer({ layers, layerFilter, views, viewports, onViewportActive, pickingFBO, deviceRect: { x, y, width, height }, cullRect, effects, pass = 'picking', pickZ, shaderModuleProps }) {
        this.pickZ = pickZ;
        const colorEncoderState = this._resetColorEncoder(pickZ);
        const scissorRect = [
            x,
            y,
            width,
            height
        ];
        // Make sure we clear scissor test and fbo bindings in case of exceptions
        // We are only interested in one pixel, no need to render anything else
        // Note that the callback here is called synchronously.
        // Set blend mode for picking
        // always overwrite existing pixel with [r,g,b,layerIndex]
        const renderStatus = super.render({
            target: pickingFBO,
            layers,
            layerFilter,
            views,
            viewports,
            onViewportActive,
            cullRect,
            effects: effects?.filter((e)=>e.useInPicking),
            pass,
            isPicking: true,
            shaderModuleProps,
            clearColor: [
                0,
                0,
                0,
                0
            ],
            colorMask: 0xf,
            scissorRect
        });
        // Clear the temp field
        this._colorEncoderState = null;
        const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);
        return {
            decodePickingColor,
            stats: renderStatus
        };
    }
    shouldDrawLayer(layer) {
        const { pickable, operation } = layer.props;
        return pickable && operation.includes('draw') || operation.includes('terrain') || operation.includes('mask');
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
        return {
            picking: {
                isActive: 1,
                isAttribute: this.pickZ
            },
            lighting: {
                enabled: false
            }
        };
    }
    getLayerParameters(layer, layerIndex, viewport) {
        // TODO use Parameters type
        const pickParameters = {
            ...layer.props.parameters
        };
        const { pickable, operation } = layer.props;
        if (!this._colorEncoderState || operation.includes('terrain')) {
            pickParameters.blend = false;
        } else if (pickable && operation.includes('draw')) {
            Object.assign(pickParameters, PICKING_BLENDING);
            pickParameters.blend = true;
            // TODO: blendColor no longer part of luma.gl API
            pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);
        }
        return pickParameters;
    }
    _resetColorEncoder(pickZ) {
        // Track encoded layer indices
        this._colorEncoderState = pickZ ? null : {
            byLayer: new Map(),
            byAlpha: []
        };
        // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters
        return this._colorEncoderState;
    }
}
// Assign an unique alpha value for each pickable layer and track the encoding in the cache object
// Returns normalized blend color
function encodeColor(encoded, layer, viewport) {
    const { byLayer, byAlpha } = encoded;
    let a;
    // Encode layerIndex in the alpha channel
    // TODO - combine small layers to better utilize the picking color space
    let entry = byLayer.get(layer);
    if (entry) {
        entry.viewports.push(viewport);
        a = entry.a;
    } else {
        a = byLayer.size + 1;
        if (a <= 255) {
            entry = {
                a,
                layer,
                viewports: [
                    viewport
                ]
            };
            byLayer.set(layer, entry);
            byAlpha[a] = entry;
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn('Too many pickable layers, only picking the first 255')();
            a = 0;
        }
    }
    return [
        0,
        0,
        0,
        a / 255
    ];
}
// Given a picked color, retrieve the corresponding layer and viewports from cache
function decodeColor(encoded, pickedColor) {
    const entry = encoded.byAlpha[pickedColor[3]];
    return entry && {
        pickedLayer: entry.layer,
        pickedViewports: entry.viewports,
        pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)
    };
} //# sourceMappingURL=pick-layers-pass.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/deck-renderer.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>DeckRenderer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$draw$2d$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/draw-layers-pass.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$pick$2d$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/debug/index.js [app-ssr] (ecmascript)");
;
;
;
const TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';
class DeckRenderer {
    constructor(device){
        this.device = device;
        this.layerFilter = null;
        this.drawPickingColors = false;
        this.drawLayersPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$draw$2d$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](device);
        this.pickLayersPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$pick$2d$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](device);
        this.renderCount = 0;
        this._needsRedraw = 'Initial render';
        this.renderBuffers = [];
        this.lastPostProcessEffect = null;
    }
    setProps(props) {
        if (this.layerFilter !== props.layerFilter) {
            this.layerFilter = props.layerFilter;
            this._needsRedraw = 'layerFilter changed';
        }
        if (this.drawPickingColors !== props.drawPickingColors) {
            this.drawPickingColors = props.drawPickingColors;
            this._needsRedraw = 'drawPickingColors changed';
        }
    }
    renderLayers(opts) {
        if (!opts.viewports.length) {
            return;
        }
        const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;
        const renderOpts = {
            layerFilter: this.layerFilter,
            isPicking: this.drawPickingColors,
            ...opts
        };
        if (renderOpts.effects) {
            this._preRender(renderOpts.effects, renderOpts);
        }
        const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;
        if (this.lastPostProcessEffect) {
            renderOpts.clearColor = [
                0,
                0,
                0,
                0
            ];
            renderOpts.clearCanvas = true;
        }
        const renderStats = layerPass.render({
            ...renderOpts,
            target: outputBuffer
        });
        if (renderOpts.effects) {
            this._postRender(renderOpts.effects, renderOpts);
        }
        this.renderCount++;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(TRACE_RENDER_LAYERS, this, renderStats, opts);
    }
    needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        return redraw;
    }
    finalize() {
        const { renderBuffers } = this;
        for (const buffer of renderBuffers){
            buffer.delete();
        }
        renderBuffers.length = 0;
    }
    _preRender(effects, opts) {
        this.lastPostProcessEffect = null;
        opts.preRenderStats = opts.preRenderStats || {};
        for (const effect of effects){
            opts.preRenderStats[effect.id] = effect.preRender(opts);
            if (effect.postRender) {
                this.lastPostProcessEffect = effect.id;
            }
        }
        if (this.lastPostProcessEffect) {
            this._resizeRenderBuffers();
        }
    }
    _resizeRenderBuffers() {
        const { renderBuffers } = this;
        const size = this.device.canvasContext.getDrawingBufferSize();
        if (renderBuffers.length === 0) {
            [
                0,
                1
            ].map((i)=>{
                const texture = this.device.createTexture({
                    sampler: {
                        minFilter: 'linear',
                        magFilter: 'linear'
                    }
                });
                renderBuffers.push(this.device.createFramebuffer({
                    id: `deck-renderbuffer-${i}`,
                    colorAttachments: [
                        texture
                    ]
                }));
            });
        }
        for (const buffer of renderBuffers){
            buffer.resize(size);
        }
    }
    _postRender(effects, opts) {
        const { renderBuffers } = this;
        const params = {
            ...opts,
            inputBuffer: renderBuffers[0],
            swapBuffer: renderBuffers[1]
        };
        for (const effect of effects){
            if (effect.postRender) {
                // If not the last post processing effect, unset the target so that
                // it only renders between the swap buffers
                params.target = effect.id === this.lastPostProcessEffect ? opts.target : undefined;
                const buffer = effect.postRender(params);
                // Buffer cannot be null if target is unset
                params.inputBuffer = buffer;
                params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];
            }
        }
    }
} //# sourceMappingURL=deck-renderer.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/picking/query-object.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "getClosestObject": (()=>getClosestObject),
    "getUniqueObjects": (()=>getUniqueObjects)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
;
const NO_PICKED_OBJECT = {
    pickedColor: null,
    pickedObjectIndex: -1
};
function getClosestObject({ pickedColors, decodePickingColor, deviceX, deviceY, deviceRadius, deviceRect }) {
    // Traverse all pixels in picking results and find the one closest to the supplied
    // [deviceX, deviceY]
    const { x, y, width, height } = deviceRect;
    let minSquareDistanceToCenter = deviceRadius * deviceRadius;
    let closestPixelIndex = -1;
    let i = 0;
    for(let row = 0; row < height; row++){
        const dy = row + y - deviceY;
        const dy2 = dy * dy;
        if (dy2 > minSquareDistanceToCenter) {
            // skip this row
            i += 4 * width;
        } else {
            for(let col = 0; col < width; col++){
                // Decode picked layer from color
                const pickedLayerIndex = pickedColors[i + 3] - 1;
                if (pickedLayerIndex >= 0) {
                    const dx = col + x - deviceX;
                    const d2 = dx * dx + dy2;
                    if (d2 <= minSquareDistanceToCenter) {
                        minSquareDistanceToCenter = d2;
                        closestPixelIndex = i;
                    }
                }
                i += 4;
            }
        }
    }
    if (closestPixelIndex >= 0) {
        // Decode picked object index from color
        const pickedColor = pickedColors.slice(closestPixelIndex, closestPixelIndex + 4);
        const pickedObject = decodePickingColor(pickedColor);
        if (pickedObject) {
            const dy = Math.floor(closestPixelIndex / 4 / width);
            const dx = closestPixelIndex / 4 - dy * width;
            return {
                ...pickedObject,
                pickedColor,
                pickedX: x + dx,
                pickedY: y + dy
            };
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].error('Picked non-existent layer. Is picking buffer corrupt?')();
    }
    return NO_PICKED_OBJECT;
}
function getUniqueObjects({ pickedColors, decodePickingColor }) {
    const uniqueColors = new Map();
    // Traverse all pixels in picking results and get unique colors
    if (pickedColors) {
        for(let i = 0; i < pickedColors.length; i += 4){
            // Decode picked layer from color
            const pickedLayerIndex = pickedColors[i + 3] - 1;
            if (pickedLayerIndex >= 0) {
                const pickedColor = pickedColors.slice(i, i + 4);
                const colorKey = pickedColor.join(',');
                // eslint-disable-next-line
                if (!uniqueColors.has(colorKey)) {
                    const pickedObject = decodePickingColor(pickedColor);
                    // eslint-disable-next-line
                    if (pickedObject) {
                        uniqueColors.set(colorKey, {
                            ...pickedObject,
                            color: pickedColor
                        });
                    } else {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].error('Picked non-existent layer. Is picking buffer corrupt?')();
                    }
                }
            }
        }
    }
    return Array.from(uniqueColors.values());
} //# sourceMappingURL=query-object.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/picking/pick-info.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Generates some basic information of the picking action: x, y, coordinates etc.
 * Regardless if anything is picked
 */ __turbopack_esm__({
    "getEmptyPickingInfo": (()=>getEmptyPickingInfo),
    "getLayerPickingInfo": (()=>getLayerPickingInfo),
    "processPickInfo": (()=>processPickInfo)
});
function getEmptyPickingInfo({ pickInfo, viewports, pixelRatio, x, y, z }) {
    // If more than one viewports are used in the picking pass, locate the viewport that
    // drew the picked pixel
    let pickedViewport = viewports[0];
    if (viewports.length > 1) {
        // Find the viewport that contain the picked pixel
        pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, {
            x,
            y
        });
    }
    let coordinate;
    if (pickedViewport) {
        const point = [
            x - pickedViewport.x,
            y - pickedViewport.y
        ];
        if (z !== undefined) {
            point[2] = z;
        }
        coordinate = pickedViewport.unproject(point);
    }
    return {
        color: null,
        layer: null,
        viewport: pickedViewport,
        index: -1,
        picked: false,
        x,
        y,
        pixel: [
            x,
            y
        ],
        coordinate,
        devicePixel: pickInfo && 'pickedX' in pickInfo ? [
            pickInfo.pickedX,
            pickInfo.pickedY
        ] : undefined,
        pixelRatio
    };
}
function processPickInfo(opts) {
    const { pickInfo, lastPickedInfo, mode, layers } = opts;
    const { pickedColor, pickedLayer, pickedObjectIndex } = pickInfo;
    const affectedLayers = pickedLayer ? [
        pickedLayer
    ] : [];
    if (mode === 'hover') {
        // only invoke onHover events if picked object has changed
        const lastPickedPixelIndex = lastPickedInfo.index;
        const lastPickedLayerId = lastPickedInfo.layerId;
        const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;
        // proceed only if picked object changed
        if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {
            if (pickedLayerId !== lastPickedLayerId) {
                // We cannot store a ref to lastPickedLayer in the context because
                // the state of an outdated layer is no longer valid
                // and the props may have changed
                const lastPickedLayer = layers.find((layer)=>layer.props.id === lastPickedLayerId);
                if (lastPickedLayer) {
                    // Let leave event fire before enter event
                    affectedLayers.unshift(lastPickedLayer);
                }
            }
            // Update layer manager context
            lastPickedInfo.layerId = pickedLayerId;
            lastPickedInfo.index = pickedObjectIndex;
            lastPickedInfo.info = null;
        }
    }
    const baseInfo = getEmptyPickingInfo(opts);
    // Use a Map to store all picking infos.
    // The following two forEach loops are the result of
    // https://github.com/visgl/deck.gl/issues/443
    // Please be very careful when changing this pattern
    const infos = new Map();
    // Make sure infos always contain something even if no layer is affected
    infos.set(null, baseInfo);
    affectedLayers.forEach((layer)=>{
        let info = {
            ...baseInfo
        };
        if (layer === pickedLayer) {
            info.color = pickedColor;
            info.index = pickedObjectIndex;
            info.picked = true;
        }
        info = getLayerPickingInfo({
            layer,
            info,
            mode
        });
        const rootLayer = info.layer;
        if (layer === pickedLayer && mode === 'hover') {
            lastPickedInfo.info = info;
        }
        // This guarantees that there will be only one copy of info for
        // one composite layer
        infos.set(rootLayer.id, info);
        if (mode === 'hover') {
            rootLayer.updateAutoHighlight(info);
        }
    });
    return infos;
}
function getLayerPickingInfo({ layer, info, mode }) {
    while(layer && info){
        // For a composite layer, sourceLayer will point to the sublayer
        // where the event originates from.
        // It provides additional context for the composite layer's
        // getPickingInfo() method to populate the info object
        const sourceLayer = info.layer || null;
        info.sourceLayer = sourceLayer;
        info.layer = layer;
        // layer.pickLayer() function requires a non-null ```layer.state```
        // object to function properly. So the layer referenced here
        // must be the "current" layer, not an "out-dated" / "invalidated" layer
        info = layer.getPickingInfo({
            info,
            mode,
            sourceLayer
        });
        layer = layer.parent;
    }
    return info;
}
/** Indentifies which viewport, if any corresponds to x and y
   If multiple viewports contain the target pixel, last viewport drawn is returend
   Returns first viewport if no match */ function getViewportFromCoordinates(viewports, pixel) {
    // find the last viewport that contains the pixel
    for(let i = viewports.length - 1; i >= 0; i--){
        const viewport = viewports[i];
        if (viewport.containsPixel(pixel)) {
            return viewport;
        }
    }
    return viewports[0];
} //# sourceMappingURL=pick-info.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/deck-picker.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>DeckPicker)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$pick$2d$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$picking$2f$query$2d$object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/picking/query-object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$picking$2f$pick$2d$info$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/picking/pick-info.js [app-ssr] (ecmascript)");
;
;
;
class DeckPicker {
    constructor(device){
        this._pickable = true;
        this.device = device;
        this.pickLayersPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$passes$2f$pick$2d$layers$2d$pass$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](device);
        this.lastPickedInfo = {
            index: -1,
            layerId: null,
            info: null
        };
    }
    setProps(props) {
        if ('layerFilter' in props) {
            this.layerFilter = props.layerFilter;
        }
        if ('_pickable' in props) {
            this._pickable = props._pickable;
        }
    }
    finalize() {
        if (this.pickingFBO) {
            this.pickingFBO.destroy();
        }
        if (this.depthFBO) {
            this.depthFBO.destroy();
        }
    }
    /** Pick the closest info at given coordinate */ pickObject(opts) {
        return this._pickClosestObject(opts);
    }
    /** Get all unique infos within a bounding box */ pickObjects(opts) {
        return this._pickVisibleObjects(opts);
    }
    // Returns a new picking info object by assuming the last picked object is still picked
    getLastPickedObject({ x, y, layers, viewports }, lastPickedInfo = this.lastPickedInfo.info) {
        const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;
        const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;
        const layer = lastPickedLayerId ? layers.find((l)=>l.id === lastPickedLayerId) : null;
        const viewport = lastPickedViewportId && viewports.find((v)=>v.id === lastPickedViewportId) || viewports[0];
        const coordinate = viewport && viewport.unproject([
            x - viewport.x,
            y - viewport.y
        ]);
        const info = {
            x,
            y,
            viewport,
            coordinate,
            layer
        };
        return {
            ...lastPickedInfo,
            ...info
        };
    }
    // Private
    /** Ensures that picking framebuffer exists and matches the canvas size */ _resizeBuffer() {
        // Create a frame buffer if not already available
        if (!this.pickingFBO) {
            this.pickingFBO = this.device.createFramebuffer({
                colorAttachments: [
                    'rgba8unorm'
                ],
                depthStencilAttachment: 'depth16unorm'
            });
            if (this.device.isTextureFormatRenderable('rgba32float')) {
                const depthFBO = this.device.createFramebuffer({
                    colorAttachments: [
                        'rgba32float'
                    ],
                    depthStencilAttachment: 'depth16unorm'
                });
                this.depthFBO = depthFBO;
            }
        }
        // Resize it to current canvas size (this is a noop if size hasn't changed)
        const { canvas } = this.device.getDefaultCanvasContext();
        this.pickingFBO?.resize({
            width: canvas.width,
            height: canvas.height
        });
        this.depthFBO?.resize({
            width: canvas.width,
            height: canvas.height
        });
    }
    /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */ _getPickable(layers) {
        if (this._pickable === false) {
            return null;
        }
        const pickableLayers = layers.filter((layer)=>this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite);
        return pickableLayers.length ? pickableLayers : null;
    }
    /** Pick the closest object at the given coordinate */ // eslint-disable-next-line max-statements,complexity
    _pickClosestObject({ layers, views, viewports, x, y, radius = 0, depth = 1, mode = 'query', unproject3D, onViewportActive, effects }) {
        // @ts-expect-error TODO - assuming WebGL context
        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
        const pickableLayers = this._getPickable(layers);
        if (!pickableLayers || viewports.length === 0) {
            return {
                result: [],
                emptyInfo: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$picking$2f$pick$2d$info$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEmptyPickingInfo"])({
                    viewports,
                    x,
                    y,
                    pixelRatio
                })
            };
        }
        this._resizeBuffer();
        // Convert from canvas top-left to WebGL bottom-left coordinates
        // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]
        // And compensate for pixelRatio
        // @ts-expect-error TODO - assuming WebGL context
        const devicePixelRange = this.device.canvasContext.cssToDevicePixels([
            x,
            y
        ], true);
        const devicePixel = [
            devicePixelRange.x + Math.floor(devicePixelRange.width / 2),
            devicePixelRange.y + Math.floor(devicePixelRange.height / 2)
        ];
        const deviceRadius = Math.round(radius * pixelRatio);
        const { width, height } = this.pickingFBO;
        const deviceRect = this._getPickingRect({
            deviceX: devicePixel[0],
            deviceY: devicePixel[1],
            deviceRadius,
            deviceWidth: width,
            deviceHeight: height
        });
        const cullRect = {
            x: x - radius,
            y: y - radius,
            width: radius * 2 + 1,
            height: radius * 2 + 1
        };
        let infos;
        const result = [];
        const affectedLayers = new Set();
        for(let i = 0; i < depth; i++){
            let pickInfo;
            if (deviceRect) {
                const pickedResult = this._drawAndSample({
                    layers: pickableLayers,
                    views,
                    viewports,
                    onViewportActive,
                    deviceRect,
                    cullRect,
                    effects,
                    pass: `picking:${mode}`
                });
                pickInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$picking$2f$query$2d$object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getClosestObject"])({
                    ...pickedResult,
                    deviceX: devicePixel[0],
                    deviceY: devicePixel[1],
                    deviceRadius,
                    deviceRect
                });
            } else {
                pickInfo = {
                    pickedColor: null,
                    pickedObjectIndex: -1
                };
            }
            let z;
            if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {
                const { pickedColors: pickedColors2 } = this._drawAndSample({
                    layers: [
                        pickInfo.pickedLayer
                    ],
                    views,
                    viewports,
                    onViewportActive,
                    deviceRect: {
                        x: pickInfo.pickedX,
                        y: pickInfo.pickedY,
                        width: 1,
                        height: 1
                    },
                    cullRect,
                    effects,
                    pass: `picking:${mode}:z`
                }, true);
                // picked value is in common space (pixels) from the camera target (viewport.position)
                // convert it to meters from the ground
                if (pickedColors2[3]) {
                    z = pickedColors2[0];
                }
            }
            // Only exclude if we need to run picking again.
            // We need to run picking again if an object is detected AND
            // we have not exhausted the requested depth.
            if (pickInfo.pickedLayer && i + 1 < depth) {
                affectedLayers.add(pickInfo.pickedLayer);
                pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);
            }
            // This logic needs to run even if no object is picked.
            infos = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$picking$2f$pick$2d$info$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["processPickInfo"])({
                pickInfo,
                lastPickedInfo: this.lastPickedInfo,
                mode,
                layers: pickableLayers,
                viewports,
                x,
                y,
                z,
                pixelRatio
            });
            for (const info of infos.values()){
                if (info.layer) {
                    result.push(info);
                }
            }
            // If no object is picked stop.
            if (!pickInfo.pickedColor) {
                break;
            }
        }
        // reset only affected buffers
        for (const layer of affectedLayers){
            layer.restorePickingColors();
        }
        return {
            result,
            emptyInfo: infos.get(null)
        };
    }
    /** Pick all objects within the given bounding box */ _pickVisibleObjects({ layers, views, viewports, x, y, width = 1, height = 1, mode = 'query', maxObjects = null, onViewportActive, effects }) {
        const pickableLayers = this._getPickable(layers);
        if (!pickableLayers || viewports.length === 0) {
            return [];
        }
        this._resizeBuffer();
        // Convert from canvas top-left to WebGL bottom-left coordinates
        // And compensate for pixelRatio
        // @ts-expect-error TODO - assuming WebGL context
        const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
        // @ts-expect-error TODO - assuming WebGL context
        const leftTop = this.device.canvasContext.cssToDevicePixels([
            x,
            y
        ], true);
        // take left and top (y inverted in device pixels) from start location
        const deviceLeft = leftTop.x;
        const deviceTop = leftTop.y + leftTop.height;
        // take right and bottom (y inverted in device pixels) from end location
        // @ts-expect-error TODO - assuming WebGL context
        const rightBottom = this.device.canvasContext.cssToDevicePixels([
            x + width,
            y + height
        ], true);
        const deviceRight = rightBottom.x + rightBottom.width;
        const deviceBottom = rightBottom.y;
        const deviceRect = {
            x: deviceLeft,
            y: deviceBottom,
            // deviceTop and deviceRight represent the first pixel outside the desired rect
            width: deviceRight - deviceLeft,
            height: deviceTop - deviceBottom
        };
        const pickedResult = this._drawAndSample({
            layers: pickableLayers,
            views,
            viewports,
            onViewportActive,
            deviceRect,
            cullRect: {
                x,
                y,
                width,
                height
            },
            effects,
            pass: `picking:${mode}`
        });
        const pickInfos = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$picking$2f$query$2d$object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUniqueObjects"])(pickedResult);
        // `getUniqueObjects` dedup by picked color
        // However different picked color may be linked to the same picked object, e.g. stroke and fill of the same polygon
        // picked from different sub layers of a GeoJsonLayer
        // Here after resolving the picked index with `layer.getPickingInfo`, we need to dedup again by unique picked objects
        const uniquePickedObjects = new Map();
        const uniqueInfos = [];
        const limitMaxObjects = Number.isFinite(maxObjects);
        for(let i = 0; i < pickInfos.length; i++){
            if (limitMaxObjects && uniqueInfos.length >= maxObjects) {
                break;
            }
            const pickInfo = pickInfos[i];
            let info = {
                color: pickInfo.pickedColor,
                layer: null,
                index: pickInfo.pickedObjectIndex,
                picked: true,
                x,
                y,
                pixelRatio
            };
            info = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$picking$2f$pick$2d$info$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getLayerPickingInfo"])({
                layer: pickInfo.pickedLayer,
                info,
                mode
            });
            // info.layer is always populated because it's a picked pixel
            const pickedLayerId = info.layer.id;
            if (!uniquePickedObjects.has(pickedLayerId)) {
                uniquePickedObjects.set(pickedLayerId, new Set());
            }
            const uniqueObjectsInLayer = uniquePickedObjects.get(pickedLayerId);
            // info.object may be null if the layer is using non-iterable data.
            // Fall back to using index as identifier.
            const pickedObjectKey = info.object ?? info.index;
            if (!uniqueObjectsInLayer.has(pickedObjectKey)) {
                uniqueObjectsInLayer.add(pickedObjectKey);
                uniqueInfos.push(info);
            }
        }
        return uniqueInfos;
    }
    _drawAndSample({ layers, views, viewports, onViewportActive, deviceRect, cullRect, effects, pass }, pickZ = false) {
        const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;
        const opts = {
            layers,
            layerFilter: this.layerFilter,
            views,
            viewports,
            onViewportActive,
            pickingFBO,
            deviceRect,
            cullRect,
            effects,
            pass,
            pickZ,
            preRenderStats: {},
            isPicking: true
        };
        for (const effect of effects){
            if (effect.useInPicking) {
                opts.preRenderStats[effect.id] = effect.preRender(opts);
            }
        }
        const { decodePickingColor } = this.pickLayersPass.render(opts);
        // Read from an already rendered picking buffer
        // Returns an Uint8ClampedArray of picked pixels
        const { x, y, width, height } = deviceRect;
        const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);
        this.device.readPixelsToArrayWebGL(pickingFBO, {
            sourceX: x,
            sourceY: y,
            sourceWidth: width,
            sourceHeight: height,
            target: pickedColors
        });
        return {
            pickedColors,
            decodePickingColor
        };
    }
    // Calculate a picking rect centered on deviceX and deviceY and clipped to device
    // Returns null if pixel is outside of device
    _getPickingRect({ deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight }) {
        // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]
        const x = Math.max(0, deviceX - deviceRadius);
        const y = Math.max(0, deviceY - deviceRadius);
        const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;
        const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;
        // x, y out of bounds.
        if (width <= 0 || height <= 0) {
            return null;
        }
        return {
            x,
            y,
            width,
            height
        };
    }
} //# sourceMappingURL=deck-picker.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/widget-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "WidgetManager": (()=>WidgetManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
;
;
const PLACEMENTS = {
    'top-left': {
        top: 0,
        left: 0
    },
    'top-right': {
        top: 0,
        right: 0
    },
    'bottom-left': {
        bottom: 0,
        left: 0
    },
    'bottom-right': {
        bottom: 0,
        right: 0
    },
    fill: {
        top: 0,
        left: 0,
        bottom: 0,
        right: 0
    }
};
const DEFAULT_PLACEMENT = 'top-left';
const ROOT_CONTAINER_ID = '__root';
class WidgetManager {
    constructor({ deck, parentElement }){
        /** Widgets added via the imperative API */ this.defaultWidgets = [];
        /** Widgets received from the declarative API */ this.widgets = [];
        /** Resolved widgets from both imperative and declarative APIs */ this.resolvedWidgets = [];
        /** Mounted HTML containers */ this.containers = {};
        /** Viewport provided to widget on redraw */ this.lastViewports = {};
        this.deck = deck;
        this.parentElement = parentElement;
    }
    getWidgets() {
        return this.resolvedWidgets;
    }
    /** Declarative API to configure widgets */ setProps(props) {
        if (props.widgets && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(props.widgets, this.widgets, 1)) {
            this._setWidgets(props.widgets);
        }
    }
    finalize() {
        for (const widget of this.getWidgets()){
            this._remove(widget);
        }
        this.defaultWidgets.length = 0;
        this.resolvedWidgets.length = 0;
        for(const id in this.containers){
            this.containers[id].remove();
        }
    }
    /** Imperative API. Widgets added this way are not affected by the declarative prop. */ addDefault(widget) {
        if (!this.defaultWidgets.find((w)=>w.id === widget.id)) {
            this._add(widget);
            this.defaultWidgets.push(widget);
            // Update widget list
            this._setWidgets(this.widgets);
        }
    }
    /** Resolve widgets from the declarative prop */ _setWidgets(nextWidgets) {
        const oldWidgetMap = {};
        for (const widget of this.resolvedWidgets){
            oldWidgetMap[widget.id] = widget;
        }
        // Clear and rebuild the list
        this.resolvedWidgets.length = 0;
        // Add all default widgets
        for (const widget of this.defaultWidgets){
            oldWidgetMap[widget.id] = null;
            this.resolvedWidgets.push(widget);
        }
        for (let widget of nextWidgets){
            const oldWidget = oldWidgetMap[widget.id];
            if (!oldWidget) {
                // Widget is new
                this._add(widget);
            } else if (// Widget placement changed
            oldWidget.viewId !== widget.viewId || oldWidget.placement !== widget.placement) {
                this._remove(oldWidget);
                this._add(widget);
            } else if (widget !== oldWidget) {
                // Widget props changed
                oldWidget.setProps(widget.props);
                widget = oldWidget;
            }
            // mark as matched
            oldWidgetMap[widget.id] = null;
            this.resolvedWidgets.push(widget);
        }
        for(const id in oldWidgetMap){
            const oldWidget = oldWidgetMap[id];
            if (oldWidget) {
                // No longer exists
                this._remove(oldWidget);
            }
        }
        this.widgets = nextWidgets;
    }
    _add(widget) {
        const { viewId = null, placement = DEFAULT_PLACEMENT } = widget;
        const element = widget.onAdd({
            deck: this.deck,
            viewId
        });
        if (element) {
            this._getContainer(viewId, placement).append(element);
        }
        widget._element = element;
    }
    _remove(widget) {
        widget.onRemove?.();
        if (widget._element) {
            widget._element.remove();
        }
        widget._element = undefined;
    }
    /* global document */ _getContainer(viewId, placement) {
        const containerId = viewId || ROOT_CONTAINER_ID;
        let viewContainer = this.containers[containerId];
        if (!viewContainer) {
            viewContainer = document.createElement('div');
            viewContainer.style.pointerEvents = 'none';
            viewContainer.style.position = 'absolute';
            viewContainer.style.overflow = 'hidden';
            this.parentElement?.append(viewContainer);
            this.containers[containerId] = viewContainer;
        }
        let container = viewContainer.querySelector(`.${placement}`);
        if (!container) {
            container = document.createElement('div');
            container.className = placement;
            container.style.position = 'absolute';
            container.style.zIndex = '2';
            Object.assign(container.style, PLACEMENTS[placement]);
            viewContainer.append(container);
        }
        return container;
    }
    _updateContainers() {
        const canvasWidth = this.deck.width;
        const canvasHeight = this.deck.height;
        for(const id in this.containers){
            const viewport = this.lastViewports[id] || null;
            const visible = id === ROOT_CONTAINER_ID || viewport;
            const container = this.containers[id];
            if (visible) {
                container.style.display = 'block';
                // Align the container with the view
                container.style.left = `${viewport ? viewport.x : 0}px`;
                container.style.top = `${viewport ? viewport.y : 0}px`;
                container.style.width = `${viewport ? viewport.width : canvasWidth}px`;
                container.style.height = `${viewport ? viewport.height : canvasHeight}px`;
            } else {
                container.style.display = 'none';
            }
        }
    }
    onRedraw({ viewports, layers }) {
        const viewportsById = viewports.reduce((acc, v)=>{
            acc[v.id] = v;
            return acc;
        }, {});
        for (const widget of this.getWidgets()){
            const { viewId } = widget;
            if (viewId) {
                // Attached to a specific view
                const viewport = viewportsById[viewId];
                if (viewport) {
                    if (widget.onViewportChange) {
                        widget.onViewportChange(viewport);
                    }
                    widget.onRedraw?.({
                        viewports: [
                            viewport
                        ],
                        layers
                    });
                }
            } else {
                // Not attached to a specific view
                if (widget.onViewportChange) {
                    for (const viewport of viewports){
                        widget.onViewportChange(viewport);
                    }
                }
                widget.onRedraw?.({
                    viewports,
                    layers
                });
            }
        }
        this.lastViewports = viewportsById;
        this._updateContainers();
    }
    onHover(info, event) {
        for (const widget of this.getWidgets()){
            const { viewId } = widget;
            if (!viewId || viewId === info.viewport?.id) {
                widget.onHover?.(info, event);
            }
        }
    }
    onEvent(info, event) {
        const eventHandlerProp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EVENT_HANDLERS"][event.type];
        if (!eventHandlerProp) {
            return;
        }
        for (const widget of this.getWidgets()){
            const { viewId } = widget;
            if (!viewId || viewId === info.viewport?.id) {
                widget[eventHandlerProp]?.(info, event);
            }
        }
    }
} //# sourceMappingURL=widget-manager.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/tooltip.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* global document */ __turbopack_esm__({
    "default": (()=>Tooltip)
});
const defaultStyle = {
    zIndex: '1',
    position: 'absolute',
    pointerEvents: 'none',
    color: '#a0a7b4',
    backgroundColor: '#29323c',
    padding: '10px',
    top: '0',
    left: '0',
    display: 'none'
};
class Tooltip {
    constructor(){
        this.id = 'default-tooltip';
        this.placement = 'fill';
        this.props = {};
        this.isVisible = false;
    }
    onAdd({ deck }) {
        const el = document.createElement('div');
        el.className = 'deck-tooltip';
        Object.assign(el.style, defaultStyle);
        this.deck = deck;
        this.element = el;
        return el;
    }
    onRemove() {
        this.deck = undefined;
        this.element = undefined;
    }
    setProps() {}
    onViewportChange(viewport) {
        if (this.isVisible && viewport.id === this.lastViewport?.id && viewport !== this.lastViewport) {
            // Camera has moved, clear tooltip
            this.setTooltip(null);
        }
    }
    onHover(info) {
        const { deck } = this;
        const getTooltip = deck && deck.props.getTooltip;
        if (!getTooltip) {
            return;
        }
        const displayInfo = getTooltip(info);
        this.lastViewport = info.viewport;
        this.setTooltip(displayInfo, info.x, info.y);
    }
    setTooltip(displayInfo, x, y) {
        const el = this.element;
        if (!el) {
            return;
        }
        if (typeof displayInfo === 'string') {
            el.innerText = displayInfo;
        } else if (!displayInfo) {
            this.isVisible = false;
            el.style.display = 'none';
            return;
        } else {
            if (displayInfo.text) {
                el.innerText = displayInfo.text;
            }
            if (displayInfo.html) {
                el.innerHTML = displayInfo.html;
            }
            if (displayInfo.className) {
                el.className = displayInfo.className;
            }
        }
        this.isVisible = true;
        el.style.display = 'block';
        el.style.transform = `translate(${x}px, ${y}px)`;
        if (displayInfo && typeof displayInfo === 'object' && 'style' in displayInfo) {
            Object.assign(el.style, displayInfo.style);
        }
    }
} //# sourceMappingURL=tooltip.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/utils/json-loader.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
function isJSON(text) {
    const firstChar = text[0];
    const lastChar = text[text.length - 1];
    return firstChar === '{' && lastChar === '}' || firstChar === '[' && lastChar === ']';
}
const __TURBOPACK__default__export__ = {
    dataType: null,
    batchType: null,
    id: 'JSON',
    name: 'JSON',
    module: '',
    version: '',
    options: {},
    extensions: [
        'json',
        'geojson'
    ],
    mimeTypes: [
        'application/json',
        'application/geo+json'
    ],
    testText: isJSON,
    parseTextSync: JSON.parse
};
 //# sourceMappingURL=json-loader.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/init.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "VERSION": (()=>VERSION)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/debug/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$json$2d$loader$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/json-loader.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$images$2f$dist$2f$image$2d$loader$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@loaders.gl/images/dist/image-loader.js [app-ssr] (ecmascript)");
;
;
;
;
;
function checkVersion() {
    // Version detection using typescript plugin.
    // Fallback for tests and SSR since global variable is defined by esbuild.
    const version = typeof "9.1.1" !== 'undefined' ? "9.1.1" : globalThis.DECK_VERSION || 'untranspiled source';
    // Note: a `deck` object not created by deck.gl may exist in the global scope
    const existingVersion = globalThis.deck && globalThis.deck.VERSION;
    if (existingVersion && existingVersion !== version) {
        throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);
    }
    if (!existingVersion) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].log(1, `deck.gl ${version}`)();
        globalThis.deck = {
            ...globalThis.deck,
            VERSION: version,
            version,
            log: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
            // experimental
            _registerLoggers: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$debug$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["register"]
        };
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["registerLoaders"])([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$json$2d$loader$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"],
            // @ts-expect-error non-standard Loader format
            [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$images$2f$dist$2f$image$2d$loader$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ImageLoader"],
                {
                    imagebitmap: {
                        premultiplyAlpha: 'none'
                    }
                }
            ]
        ]);
    }
    return version;
}
const VERSION = checkVersion(); //# sourceMappingURL=init.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/deck.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$stats$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@probe.gl/stats/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/log.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$stats$2f$dist$2f$lib$2f$stats$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Stats$3e$__ = __turbopack_import__("[project]/node_modules/@probe.gl/stats/dist/lib/stats.js [app-ssr] (ecmascript) <export default as Stats>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$adapter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/webgl/dist/adapter/webgl-adapter.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$luma$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/core/dist/adapter/luma.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/typed-array-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/utils/assert.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$animation$2d$loop$2f$animation$2d$loop$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$views$2f$map$2d$view$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/views/map-view.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$device$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$animation$2f$timeline$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@luma.gl/engine/dist/animation/timeline.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$event$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/event-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$view$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/view-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/layer-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$effect$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/effect-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$deck$2d$renderer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/deck-renderer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$deck$2d$picker$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/deck-picker.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$widget$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/widget-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$tooltip$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/tooltip.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$init$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/init.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/* global document */ // eslint-disable-next-line @typescript-eslint/no-empty-function
function noop() {}
const getCursor = ({ isDragging })=>isDragging ? 'grabbing' : 'grab';
const defaultProps = {
    id: '',
    width: '100%',
    height: '100%',
    style: null,
    viewState: null,
    initialViewState: null,
    pickingRadius: 0,
    layerFilter: null,
    parameters: {},
    parent: null,
    device: null,
    deviceProps: {
        type: 'webgl'
    },
    gl: null,
    canvas: null,
    layers: [],
    effects: [],
    views: null,
    controller: null,
    useDevicePixels: true,
    touchAction: 'none',
    eventRecognizerOptions: {},
    _framebuffer: null,
    _animate: false,
    _pickable: true,
    _typedArrayManagerProps: {},
    _customRender: null,
    widgets: [],
    onDeviceInitialized: noop,
    onWebGLInitialized: noop,
    onResize: noop,
    onViewStateChange: noop,
    onInteractionStateChange: noop,
    onBeforeRender: noop,
    onAfterRender: noop,
    onLoad: noop,
    onError: (error)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].error(error.message, error.cause)(),
    onHover: null,
    onClick: null,
    onDragStart: null,
    onDrag: null,
    onDragEnd: null,
    _onMetrics: null,
    getCursor,
    getTooltip: null,
    debug: false,
    drawPickingColors: false
};
/* eslint-disable max-statements */ class Deck {
    constructor(props){
        this.width = 0;
        this.height = 0;
        // Allows attaching arbitrary data to the instance
        this.userData = {};
        this.device = null;
        this.canvas = null;
        this.viewManager = null;
        this.layerManager = null;
        this.effectManager = null;
        this.deckRenderer = null;
        this.deckPicker = null;
        this.eventManager = null;
        this.widgetManager = null;
        this.tooltip = null;
        this.animationLoop = null;
        this.cursorState = {
            isHovering: false,
            isDragging: false
        };
        this.stats = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$probe$2e$gl$2f$stats$2f$dist$2f$lib$2f$stats$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__Stats$3e$__["Stats"]({
            id: 'deck.gl'
        });
        this.metrics = {
            fps: 0,
            setPropsTime: 0,
            updateAttributesTime: 0,
            framesRedrawn: 0,
            pickTime: 0,
            pickCount: 0,
            gpuTime: 0,
            gpuTimePerFrame: 0,
            cpuTime: 0,
            cpuTimePerFrame: 0,
            bufferMemory: 0,
            textureMemory: 0,
            renderbufferMemory: 0,
            gpuMemory: 0
        };
        this._metricsCounter = 0;
        this._needsRedraw = 'Initial render';
        this._pickRequest = {
            mode: 'hover',
            x: -1,
            y: -1,
            radius: 0,
            event: null
        };
        /**
         * Pick and store the object under the pointer on `pointerdown`.
         * This object is reused for subsequent `onClick` and `onDrag*` callbacks.
         */ this._lastPointerDownInfo = null;
        // The `pointermove` event may fire multiple times in between two animation frames,
        // it's a waste of time to run picking without rerender. Instead we save the last pick
        // request and only do it once on the next animation frame.
        /** Internal use only: event handler for pointerdown */ this._onPointerMove = (event)=>{
            const { _pickRequest } = this;
            if (event.type === 'pointerleave') {
                _pickRequest.x = -1;
                _pickRequest.y = -1;
                _pickRequest.radius = 0;
            } else if (event.leftButton || event.rightButton) {
                // Do not trigger onHover callbacks if mouse button is down.
                return;
            } else {
                const pos = event.offsetCenter;
                // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a
                // assertion error when attempting to unproject the position.
                if (!pos) {
                    return;
                }
                _pickRequest.x = pos.x;
                _pickRequest.y = pos.y;
                _pickRequest.radius = this.props.pickingRadius;
            }
            if (this.layerManager) {
                this.layerManager.context.mousePosition = {
                    x: _pickRequest.x,
                    y: _pickRequest.y
                };
            }
            _pickRequest.event = event;
        };
        /** Internal use only: event handler for click & drag */ this._onEvent = (event)=>{
            const eventHandlerProp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EVENT_HANDLERS"][event.type];
            const pos = event.offsetCenter;
            if (!eventHandlerProp || !pos || !this.layerManager) {
                return;
            }
            // Reuse last picked object
            const layers = this.layerManager.getLayers();
            const info = this.deckPicker.getLastPickedObject({
                x: pos.x,
                y: pos.y,
                layers,
                viewports: this.getViewports(pos)
            }, this._lastPointerDownInfo);
            const { layer } = info;
            const layerHandler = layer && (layer[eventHandlerProp] || layer.props[eventHandlerProp]);
            const rootHandler = this.props[eventHandlerProp];
            let handled = false;
            if (layerHandler) {
                handled = layerHandler.call(layer, info, event);
            }
            if (!handled) {
                rootHandler?.(info, event);
                this.widgetManager.onEvent(info, event);
            }
        };
        /** Internal use only: evnet handler for pointerdown */ this._onPointerDown = (event)=>{
            const pos = event.offsetCenter;
            const pickedInfo = this._pick('pickObject', 'pickObject Time', {
                x: pos.x,
                y: pos.y,
                radius: this.props.pickingRadius
            });
            this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;
        };
        // @ts-ignore views
        this.props = {
            ...defaultProps,
            ...props
        };
        props = this.props;
        if (props.viewState && props.initialViewState) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();
        }
        this.viewState = this.props.initialViewState;
        // See if we already have a device
        if (props.device) {
            this.device = props.device;
        }
        let deviceOrPromise = this.device;
        // Attach a new luma.gl device to a WebGL2 context if supplied
        if (!deviceOrPromise && props.gl) {
            if (props.gl instanceof WebGLRenderingContext) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].error('WebGL1 context not supported.')();
            }
            deviceOrPromise = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$adapter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["webgl2Adapter"].attach(props.gl);
        }
        // Create a new device
        if (!deviceOrPromise) {
            // Create the "best" device supported from the registered adapters
            deviceOrPromise = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$luma$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["luma"].createDevice({
                type: 'best-available',
                // luma by default throws if a device is already attached
                // asynchronous device creation could happen after finalize() is called
                // TODO - createDevice should support AbortController?
                _reuseDevices: true,
                adapters: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$adapter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["webgl2Adapter"]
                ],
                ...props.deviceProps,
                createCanvasContext: {
                    canvas: this._createCanvas(props),
                    useDevicePixels: this.props.useDevicePixels,
                    // TODO v9.2 - replace AnimationLoop's `autoResizeDrawingBuffer` with CanvasContext's `autoResize`
                    autoResize: false
                }
            });
        }
        this.animationLoop = this._createAnimationLoop(deviceOrPromise, props);
        this.setProps(props);
        // UNSAFE/experimental prop: only set at initialization to avoid performance hit
        if (props._typedArrayManagerProps) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$typed$2d$array$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].setOptions(props._typedArrayManagerProps);
        }
        this.animationLoop.start();
    }
    /** Stop rendering and dispose all resources */ finalize() {
        this.animationLoop?.stop();
        this.animationLoop?.destroy();
        this.animationLoop = null;
        this._lastPointerDownInfo = null;
        this.layerManager?.finalize();
        this.layerManager = null;
        this.viewManager?.finalize();
        this.viewManager = null;
        this.effectManager?.finalize();
        this.effectManager = null;
        this.deckRenderer?.finalize();
        this.deckRenderer = null;
        this.deckPicker?.finalize();
        this.deckPicker = null;
        this.eventManager?.destroy();
        this.eventManager = null;
        this.widgetManager?.finalize();
        this.widgetManager = null;
        if (!this.props.canvas && !this.props.device && !this.props.gl && this.canvas) {
            // remove internally created canvas
            this.canvas.parentElement?.removeChild(this.canvas);
            this.canvas = null;
        }
    }
    /** Partially update props */ setProps(props) {
        this.stats.get('setProps Time').timeStart();
        if ('onLayerHover' in props) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].removed('onLayerHover', 'onHover')();
        }
        if ('onLayerClick' in props) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].removed('onLayerClick', 'onClick')();
        }
        if (props.initialViewState && // depth = 3 when comparing viewStates: viewId.position.0
        !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepEqual"])(this.props.initialViewState, props.initialViewState, 3)) {
            // Overwrite internal view state
            this.viewState = props.initialViewState;
        }
        // Merge with existing props
        Object.assign(this.props, props);
        // Update CSS size of canvas
        this._setCanvasSize(this.props);
        // We need to overwrite CSS style width and height with actual, numeric values
        const resolvedProps = Object.create(this.props);
        Object.assign(resolvedProps, {
            views: this._getViews(),
            width: this.width,
            height: this.height,
            viewState: this._getViewState()
        });
        // Update the animation loop
        this.animationLoop?.setProps(resolvedProps);
        // If initialized, update sub manager props
        if (this.layerManager) {
            this.viewManager.setProps(resolvedProps);
            // Make sure that any new layer gets initialized with the current viewport
            this.layerManager.activateViewport(this.getViewports()[0]);
            this.layerManager.setProps(resolvedProps);
            this.effectManager.setProps(resolvedProps);
            this.deckRenderer.setProps(resolvedProps);
            this.deckPicker.setProps(resolvedProps);
            this.widgetManager.setProps(resolvedProps);
        }
        this.stats.get('setProps Time').timeEnd();
    }
    // Public API
    /**
     * Check if a redraw is needed
     * @returns `false` or a string summarizing the redraw reason
     */ needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        if (!this.layerManager) {
            // Not initialized or already finalized
            return false;
        }
        if (this.props._animate) {
            return 'Deck._animate';
        }
        let redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) {
            this._needsRedraw = false;
        }
        const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);
        const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);
        const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);
        const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);
        redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;
        return redraw;
    }
    /**
     * Redraw the GL context
     * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.
     * @returns
     */ redraw(reason) {
        if (!this.layerManager) {
            // Not yet initialized
            return;
        }
        // Check if we need to redraw
        let redrawReason = this.needsRedraw({
            clearRedrawFlags: true
        });
        // User-supplied should take precedent, however the redraw flags get cleared regardless
        redrawReason = reason || redrawReason;
        if (!redrawReason) {
            return;
        }
        this.stats.get('Redraw Count').incrementCount();
        if (this.props._customRender) {
            this.props._customRender(redrawReason);
        } else {
            this._drawLayers(redrawReason);
        }
    }
    /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */ get isInitialized() {
        return this.viewManager !== null;
    }
    /** Get a list of views that are currently rendered */ getViews() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(this.viewManager);
        return this.viewManager.views;
    }
    /** Get a list of viewports that are currently rendered.
     * @param rect If provided, only returns viewports within the given bounding box.
     */ getViewports(rect) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(this.viewManager);
        return this.viewManager.getViewports(rect);
    }
    /** Get the current canvas element. */ getCanvas() {
        return this.canvas;
    }
    /** Query the object rendered on top at a given point */ pickObject(opts) {
        const infos = this._pick('pickObject', 'pickObject Time', opts).result;
        return infos.length ? infos[0] : null;
    }
    /* Query all rendered objects at a given point */ pickMultipleObjects(opts) {
        opts.depth = opts.depth || 10;
        return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;
    }
    /* Query all objects rendered on top within a bounding box */ pickObjects(opts) {
        return this._pick('pickObjects', 'pickObjects Time', opts);
    }
    /** Experimental
     * Add a global resource for sharing among layers
     */ _addResources(resources, forceUpdate = false) {
        for(const id in resources){
            this.layerManager.resourceManager.add({
                resourceId: id,
                data: resources[id],
                forceUpdate
            });
        }
    }
    /** Experimental
     * Remove a global resource
     */ _removeResources(resourceIds) {
        for (const id of resourceIds){
            this.layerManager.resourceManager.remove(id);
        }
    }
    /** Experimental
     * Register a default effect. Effects will be sorted by order, those with a low order will be rendered first
     */ _addDefaultEffect(effect) {
        this.effectManager.addDefaultEffect(effect);
    }
    _addDefaultShaderModule(module) {
        this.layerManager.addDefaultShaderModule(module);
    }
    _removeDefaultShaderModule(module) {
        this.layerManager?.removeDefaultShaderModule(module);
    }
    _pick(method, statKey, opts) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(this.deckPicker);
        const { stats } = this;
        stats.get('Pick Count').incrementCount();
        stats.get(statKey).timeStart();
        const infos = this.deckPicker[method]({
            // layerManager, viewManager and effectManager are always defined if deckPicker is
            layers: this.layerManager.getLayers(opts),
            views: this.viewManager.getViews(),
            viewports: this.getViewports(opts),
            onViewportActive: this.layerManager.activateViewport,
            effects: this.effectManager.getEffects(),
            ...opts
        });
        stats.get(statKey).timeEnd();
        return infos;
    }
    /** Resolve props.canvas to element */ _createCanvas(props) {
        let canvas = props.canvas;
        // TODO EventManager should accept element id
        if (typeof canvas === 'string') {
            canvas = document.getElementById(canvas);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$assert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(canvas);
        }
        if (!canvas) {
            canvas = document.createElement('canvas');
            canvas.id = props.id || 'deckgl-overlay';
            const parent = props.parent || document.body;
            parent.appendChild(canvas);
        }
        Object.assign(canvas.style, props.style);
        return canvas;
    }
    /** Updates canvas width and/or height, if provided as props */ _setCanvasSize(props) {
        if (!this.canvas) {
            return;
        }
        const { width, height } = props;
        // Set size ONLY if props are being provided, otherwise let canvas be layouted freely
        if (width || width === 0) {
            const cssWidth = Number.isFinite(width) ? `${width}px` : width;
            this.canvas.style.width = cssWidth;
        }
        if (height || height === 0) {
            const cssHeight = Number.isFinite(height) ? `${height}px` : height;
            // Note: position==='absolute' required for height 100% to work
            this.canvas.style.position = props.style?.position || 'absolute';
            this.canvas.style.height = cssHeight;
        }
    }
    /** If canvas size has changed, reads out the new size and update */ _updateCanvasSize() {
        const { canvas } = this;
        if (!canvas) {
            return;
        }
        // Fallback to width/height when clientWidth/clientHeight are undefined (OffscreenCanvas).
        const newWidth = canvas.clientWidth ?? canvas.width;
        const newHeight = canvas.clientHeight ?? canvas.height;
        if (newWidth !== this.width || newHeight !== this.height) {
            // @ts-expect-error private assign to read-only property
            this.width = newWidth;
            // @ts-expect-error private assign to read-only property
            this.height = newHeight;
            this.viewManager?.setProps({
                width: newWidth,
                height: newHeight
            });
            // Make sure that any new layer gets initialized with the current viewport
            this.layerManager?.activateViewport(this.getViewports()[0]);
            this.props.onResize({
                width: newWidth,
                height: newHeight
            });
        }
    }
    _createAnimationLoop(deviceOrPromise, props) {
        const { // width,
        // height,
        gl, // debug,
        onError, // onBeforeRender,
        // onAfterRender,
        useDevicePixels } = props;
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$animation$2d$loop$2f$animation$2d$loop$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AnimationLoop"]({
            device: deviceOrPromise,
            useDevicePixels,
            // TODO v9
            autoResizeDrawingBuffer: !gl,
            autoResizeViewport: false,
            // @ts-expect-error luma.gl needs to accept Promise<void> return value
            onInitialize: (context)=>this._setDevice(context.device),
            onRender: this._onRenderFrame.bind(this),
            // @ts-expect-error typing mismatch: AnimationLoop does not accept onError:null
            onError
        });
    }
    // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState
    // TODO: For backwards compatibility ensure numeric width and height is added to the viewState
    _getViewState() {
        return this.props.viewState || this.viewState;
    }
    // Get the view descriptor list
    _getViews() {
        const { views } = this.props;
        const normalizedViews = Array.isArray(views) ? views : views ? [
            views
        ] : [
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$views$2f$map$2d$view$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
                id: 'default-view'
            })
        ];
        if (normalizedViews.length && this.props.controller) {
            // Backward compatibility: support controller prop
            normalizedViews[0].props.controller = this.props.controller;
        }
        return normalizedViews;
    }
    _onContextLost() {
        const { onError } = this.props;
        if (this.animationLoop && onError) {
            onError(new Error('WebGL context is lost'));
        }
    }
    /** Actually run picking */ _pickAndCallback() {
        const { _pickRequest } = this;
        if (_pickRequest.event) {
            // Perform picking
            const { result, emptyInfo } = this._pick('pickObject', 'pickObject Time', _pickRequest);
            this.cursorState.isHovering = result.length > 0;
            // There are 4 possible scenarios:
            // result is [outInfo, pickedInfo] (moved from one pickable layer to another)
            // result is [outInfo] (moved outside of a pickable layer)
            // result is [pickedInfo] (moved into or over a pickable layer)
            // result is [] (nothing is or was picked)
            //
            // `layer.props.onHover` should be called on all affected layers (out/over)
            // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise
            // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise
            // Execute callbacks
            let pickedInfo = emptyInfo;
            let handled = false;
            for (const info of result){
                pickedInfo = info;
                handled = info.layer?.onHover(info, _pickRequest.event) || handled;
            }
            if (!handled) {
                this.props.onHover?.(pickedInfo, _pickRequest.event);
                this.widgetManager.onHover(pickedInfo, _pickRequest.event);
            }
            // Clear pending pickRequest
            _pickRequest.event = null;
        }
    }
    _updateCursor() {
        const container = this.props.parent || this.canvas;
        if (container) {
            container.style.cursor = this.props.getCursor(this.cursorState);
        }
    }
    _setDevice(device) {
        this.device = device;
        if (!this.animationLoop) {
            // finalize() has been called
            return;
        }
        // if external context...
        if (!this.canvas) {
            this.canvas = this.device.canvasContext?.canvas;
        // TODO v9
        // ts-expect-error - Currently luma.gl v9 does not expose these options
        // All WebGLDevice contexts are instrumented, but it seems the device
        // should have a method to start state tracking even if not enabled?
        // instrumentGLContext(this.device.gl, {enable: true, copyState: true});
        }
        if (this.device instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$device$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WebGLDevice"]) {
            this.device.setParametersWebGL({
                blend: true,
                blendFunc: [
                    770,
                    771,
                    1,
                    771
                ],
                polygonOffsetFill: true,
                depthTest: true,
                depthFunc: 515
            });
        }
        this.props.onDeviceInitialized(this.device);
        if (this.device instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$webgl$2f$dist$2f$adapter$2f$webgl$2d$device$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WebGLDevice"]) {
            // Legacy callback - warn?
            this.props.onWebGLInitialized(this.device.gl);
        }
        // timeline for transitions
        const timeline = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$engine$2f$dist$2f$animation$2f$timeline$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Timeline"]();
        timeline.play();
        this.animationLoop.attachTimeline(timeline);
        this.eventManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$event$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventManager"](this.props.parent || this.canvas, {
            touchAction: this.props.touchAction,
            recognizers: Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RECOGNIZERS"]).map((eventName)=>{
                // Resolve recognizer settings
                const [RecognizerConstructor, defaultOptions, recognizeWith, requestFailure] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RECOGNIZERS"][eventName];
                const optionsOverride = this.props.eventRecognizerOptions?.[eventName];
                const options = {
                    ...defaultOptions,
                    ...optionsOverride,
                    event: eventName
                };
                return {
                    recognizer: new RecognizerConstructor(options),
                    recognizeWith,
                    requestFailure
                };
            }),
            events: {
                pointerdown: this._onPointerDown,
                pointermove: this._onPointerMove,
                pointerleave: this._onPointerMove
            }
        });
        for(const eventType in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EVENT_HANDLERS"]){
            this.eventManager.on(eventType, this._onEvent);
        }
        this.viewManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$view$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
            timeline,
            eventManager: this.eventManager,
            onViewStateChange: this._onViewStateChange.bind(this),
            onInteractionStateChange: this._onInteractionStateChange.bind(this),
            views: this._getViews(),
            viewState: this._getViewState(),
            width: this.width,
            height: this.height
        });
        // viewManager must be initialized before layerManager
        // layerManager depends on viewport created by viewManager.
        const viewport = this.viewManager.getViewports()[0];
        // Note: avoid React setState due GL animation loop / setState timing issue
        this.layerManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](this.device, {
            deck: this,
            stats: this.stats,
            viewport,
            timeline
        });
        this.effectManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$effect$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]({
            deck: this,
            device: this.device
        });
        this.deckRenderer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$deck$2d$renderer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](this.device);
        this.deckPicker = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$deck$2d$picker$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](this.device);
        this.widgetManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$widget$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WidgetManager"]({
            deck: this,
            parentElement: this.canvas?.parentElement
        });
        this.widgetManager.addDefault(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$tooltip$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]());
        this.setProps(this.props);
        this._updateCanvasSize();
        this.props.onLoad();
    }
    /** Internal only: default render function (redraw all layers and views) */ _drawLayers(redrawReason, renderOptions) {
        const { device, gl } = this.layerManager.context;
        this.props.onBeforeRender({
            device,
            gl
        });
        const opts = {
            target: this.props._framebuffer,
            layers: this.layerManager.getLayers(),
            viewports: this.viewManager.getViewports(),
            onViewportActive: this.layerManager.activateViewport,
            views: this.viewManager.getViews(),
            pass: 'screen',
            effects: this.effectManager.getEffects(),
            ...renderOptions
        };
        this.deckRenderer?.renderLayers(opts);
        if (opts.pass === 'screen') {
            // This method could be called when drawing to picking buffer, texture etc.
            // Only when drawing to screen, update all widgets (UI components)
            this.widgetManager.onRedraw({
                viewports: opts.viewports,
                layers: opts.layers
            });
        }
        this.props.onAfterRender({
            device,
            gl
        });
    }
    // Callbacks
    _onRenderFrame() {
        this._getFrameStats();
        // Log perf stats every second
        if (this._metricsCounter++ % 60 === 0) {
            this._getMetrics();
            this.stats.reset();
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].table(4, this.metrics)();
            // Experimental: report metrics
            if (this.props._onMetrics) {
                this.props._onMetrics(this.metrics);
            }
        }
        this._updateCanvasSize();
        this._updateCursor();
        // Update layers if needed (e.g. some async prop has loaded)
        // Note: This can trigger a redraw
        this.layerManager.updateLayers();
        // Perform picking request if any
        this._pickAndCallback();
        // Redraw if necessary
        this.redraw();
        // Update viewport transition if needed
        // Note: this can trigger `onViewStateChange`, and affect layers
        // We want to defer these changes to the next frame
        if (this.viewManager) {
            this.viewManager.updateViewStates();
        }
    }
    // Callbacks
    _onViewStateChange(params) {
        // Let app know that view state is changing, and give it a chance to change it
        const viewState = this.props.onViewStateChange(params) || params.viewState;
        // If initialViewState was set on creation, auto track position
        if (this.viewState) {
            this.viewState = {
                ...this.viewState,
                [params.viewId]: viewState
            };
            if (!this.props.viewState) {
                // Apply internal view state
                if (this.viewManager) {
                    this.viewManager.setProps({
                        viewState: this.viewState
                    });
                }
            }
        }
    }
    _onInteractionStateChange(interactionState) {
        this.cursorState.isDragging = interactionState.isDragging || false;
        this.props.onInteractionStateChange(interactionState);
    }
    _getFrameStats() {
        const { stats } = this;
        stats.get('frameRate').timeEnd();
        stats.get('frameRate').timeStart();
        // Get individual stats from luma.gl so reset works
        const animationLoopStats = this.animationLoop.stats;
        stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);
        stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);
    }
    _getMetrics() {
        const { metrics, stats } = this;
        metrics.fps = stats.get('frameRate').getHz();
        metrics.setPropsTime = stats.get('setProps Time').time;
        metrics.updateAttributesTime = stats.get('Update Attributes').time;
        metrics.framesRedrawn = stats.get('Redraw Count').count;
        metrics.pickTime = stats.get('pickObject Time').time + stats.get('pickMultipleObjects Time').time + stats.get('pickObjects Time').time;
        metrics.pickCount = stats.get('Pick Count').count;
        // Luma stats
        metrics.gpuTime = stats.get('GPU Time').time;
        metrics.cpuTime = stats.get('CPU Time').time;
        metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();
        metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();
        const memoryStats = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$luma$2e$gl$2f$core$2f$dist$2f$adapter$2f$luma$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["luma"].stats.get('Memory Usage');
        metrics.bufferMemory = memoryStats.get('Buffer Memory').count;
        metrics.textureMemory = memoryStats.get('Texture Memory').count;
        metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;
        metrics.gpuMemory = memoryStats.get('GPU Memory').count;
    }
}
Deck.defaultProps = defaultProps;
// This is used to defeat tree shaking of init.js
// https://github.com/visgl/deck.gl/issues/3213
Deck.VERSION = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$init$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["VERSION"];
const __TURBOPACK__default__export__ = Deck;
 //# sourceMappingURL=deck.js.map
}}),
"[project]/node_modules/@deck.gl/core/dist/lib/deck.js [app-ssr] (ecmascript) <export default as Deck>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Deck": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$deck$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$deck$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@deck.gl/core/dist/lib/deck.js [app-ssr] (ecmascript)");
}}),

};

//# sourceMappingURL=node_modules_%40deck_gl_core_dist_00f879._.js.map