{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"math-utils.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/math-utils.ts"],"sourcesContent":["import {vec4} from '@math.gl/core';\n\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4(): number[] {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n// Transforms a vec4 with a projection matrix\nexport function transformVector(matrix: number[], vector: number[]): number[] {\n  const result = vec4.transformMat4([] as number[], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}\n\nexport function mod(value: number, divisor: number): number {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\nexport function lerp(start: number, end: number, step: number): number {\n  return step * end + (1 - step) * start;\n}\n\nexport function clamp(x: number, min: number, max: number): number {\n  return x < min ? min : x > max ? max : x;\n}\n\nfunction ieLog2(x: number): number {\n  return Math.log(x) * Math.LOG2E;\n}\n// Handle missing log2 in IE 11\nexport const log2 = Math.log2 || ieLog2;\n"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,eAAe,CAAC;;AAG7B,SAAU,UAAU;IACxB,OAAO;QAAC,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;KAAC,CAAC;AAC1D,CAAC;AAGK,SAAU,eAAe,CAAC,MAAgB,EAAE,MAAgB;IAChE,MAAM,MAAM,wMAAG,OAAI,CAAC,aAAa,CAAC,EAAc,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;yMAClE,OAAI,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,OAAO,MAAM,CAAC;AAChB,CAAC;AAEK,SAAU,GAAG,CAAC,KAAa,EAAE,OAAe;IAChD,MAAM,OAAO,GAAG,KAAK,GAAG,OAAO,CAAC;IAChC,OAAO,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;AACnD,CAAC;AAEK,SAAU,IAAI,CAAC,KAAa,EAAE,GAAW,EAAE,IAAY;IAC3D,OAAO,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC;AACzC,CAAC;AAEK,SAAU,KAAK,CAAC,CAAS,EAAE,GAAW,EAAE,GAAW;IACvD,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,MAAM,CAAC,CAAS;IACvB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;AAClC,CAAC;AAEM,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC","ignoreList":[0]}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"file":"assert.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/assert.ts"],"sourcesContent":["// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\nexport function assert(condition: unknown, message?: string): void {\n  if (!condition) {\n    throw new Error(message || '@math.gl/web-mercator: assertion failed.');\n  }\n}\n"],"names":[],"mappings":"AAAA,mEAAmE;AACnE,oEAAoE;AACpE,gCAAgC;;;;AAC1B,SAAU,MAAM,CAAC,SAAkB,EAAE,OAAgB;IACzD,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,0CAA0C,CAAC,CAAC;IACzE,CAAC;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"file":"web-mercator-utils.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/web-mercator-utils.ts"],"sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, clamp, log2} from './math-utils';\n\nimport {mat4, vec2, vec3} from '@math.gl/core';\nimport {assert} from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\nexport type DistanceScales = {\n  unitsPerMeter: number[];\n  metersPerUnit: number[];\n  unitsPerMeter2?: number[];\n  unitsPerDegree: number[];\n  degreesPerUnit: number[];\n  unitsPerDegree2?: number[];\n};\n\n/**\n * PROJECTION MATRIX PARAMETERS\n *\n * TODO how to document mebers\n * @param fov in radians. fov is variable, depends on pitch and altitude\n * @param aspect width/height\n * @param focalDistance distance at which visual scale factor is 1\n * @param near near clipping plane\n * @param far far clipping plane\n */\ntype ProjectionParameters = {\n  fov: number;\n  aspect: number;\n  focalDistance: number;\n  near: number;\n  far: number;\n};\n\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom: number): number {\n  return Math.pow(2, zoom);\n}\n\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale: number): number {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat: number[]): [number, number] {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy: number[]): [number, number] {\n  const [x, y] = xy;\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options: {latitude: number}): number {\n  const {latitude} = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate the conversion from meter to common units at a given latitude\n * This is a cheaper version of `getDistanceScales`\n * @param latitude center latitude in degrees\n * @returns common units per meter\n */\nexport function unitsPerMeter(latitude: number): number {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options: {\n  latitude: number;\n  longitude: number;\n  highPrecision?: boolean;\n}): DistanceScales {\n  const {latitude, longitude, highPrecision = false} = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  const result: DistanceScales = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  // eslint-disable-next-line no-shadow\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options: {\n  // Viewport props\n  height: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  // Pre-calculated parameters\n  scale: number;\n  center?: number[];\n}): number[] {\n  const {\n    // Viewport props\n    height,\n    pitch,\n    bearing,\n    altitude,\n    // Pre-calculated parameters\n    scale,\n    center\n  } = options;\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options: {\n  width: number;\n  height: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  pitch?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n}): ProjectionParameters {\n  const {\n    width,\n    height,\n    altitude,\n    pitch = 0,\n    offset,\n    center,\n    scale,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = options;\n  let {fovy = altitudeToFovy(DEFAULT_ALTITUDE)} = options;\n\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  const fovRadians = fovy * DEGREES_TO_RADIANS;\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n\n  // Distance from camera to the target\n  const focalDistance = fovyToAltitude(fovy);\n\n  let cameraToSeaLevelDistance = focalDistance;\n\n  if (center) {\n    cameraToSeaLevelDistance += (center[2] * scale) / Math.cos(pitchRadians) / height;\n  }\n\n  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const topHalfSurfaceDistance =\n    (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /\n    Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n\n  // Calculate z distance of the farthest fragment that should be rendered.\n  const furthestDistance =\n    Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  // Matches mapbox limit\n  const horizonDistance = cameraToSeaLevelDistance * 10;\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\n\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options: {\n  width: number;\n  height: number;\n  pitch: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  nearZMultiplier: number;\n  farZMultiplier: number;\n}): number[] {\n  const {fov, aspect, near, far} = getProjectionParameters(options);\n\n  const projectionMatrix = mat4.perspective(\n    [] as number[],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude: number): number {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy: number): number {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param pixelProjectionMatrix - projection matrix 4x4\n * @return [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[];\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[] {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(\n  xyz: number[],\n  pixelUnprojectionMatrix: number[],\n  targetZ: number = 0\n): number[] {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([] as number[], coord0, coord1, t);\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"file":"fit-bounds.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/fit-bounds.ts"],"sourcesContent":["import {assert} from './assert';\nimport {log2, clamp} from './math-utils';\nimport {MAX_LATITUDE, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\n\n/**\n * Options for fitBounds\n */\nexport type FitBoundsOptions = {\n  /**  viewport width  */\n  width: number;\n  /**  viewport height  */\n  height: number;\n  /**  [[lon, lat], [lon, lat]]  */\n  bounds: [[number, number], [number, number]];\n  /**  The width/height of the bounded area will never be smaller than this. 0.01 would be about 1000 meters (degree is ~110KM)  */\n  minExtent?: number;\n  /**  The maximum zoom level to fit the bounds within. */\n  maxZoom?: number; // ~x4,000,000 => About 10 meter extents\n  /**\n   * padding - The amount of padding in pixels to add to the given bounds.\n   * Can also be an object with top, bottom, left and right properties defining the padding.\n   */\n  padding?: number | Padding;\n  /** The center of the given bounds relative to the map's center,  */\n  offset?: number[];\n};\n\n/**\n * An object describing the padding to add to the bounds.\n */\nexport type Padding = {\n  /** Padding from top in pixels to add to the given bounds */\n  top: number;\n  /** Padding from bottom in pixels to add to the given bounds */\n  bottom: number;\n  /** Padding from left in pixels to add to the given bounds */\n  left: number;\n  /** Padding from right in pixels to add to the given bounds */\n  right: number;\n};\n\ntype ViewportProps = {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n};\n\n/**\n * Returns map settings {latitude, longitude, zoom}\n * that will contain the provided corners within the provided width.\n *\n * > _Note: Only supports non-perspective mode._\n *\n * @param options fit bounds parameters\n * @returns - latitude, longitude and zoom\n */\nexport function fitBounds(options: FitBoundsOptions): ViewportProps {\n  const {\n    width,\n    height,\n    bounds,\n    minExtent = 0, // 0.01 would be about 1000 meters (degree is ~110KM)\n    maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n    offset = [0, 0]\n  } = options;\n\n  const [[west, south], [east, north]] = bounds;\n  const padding = getPaddingObject(options.padding);\n\n  const nw = lngLatToWorld([west, clamp(north, -MAX_LATITUDE, MAX_LATITUDE)]);\n  const se = lngLatToWorld([east, clamp(south, -MAX_LATITUDE, MAX_LATITUDE)]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.top - padding.bottom) / 2 / scaleY;\n\n  const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n\n  const centerLngLat = worldToLngLat(center);\n  const zoom = Math.min(maxZoom, log2(Math.abs(Math.min(scaleX, scaleY))));\n\n  assert(Number.isFinite(zoom));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}\n\n// Helpers\nfunction getPaddingObject(padding: number | Padding = 0): Padding {\n  if (typeof padding === 'number') {\n    return {\n      top: padding,\n      bottom: padding,\n      left: padding,\n      right: padding\n    };\n  }\n\n  // Make sure all the required properties are set\n  assert(\n    Number.isFinite(padding.top) &&\n      Number.isFinite(padding.bottom) &&\n      Number.isFinite(padding.left) &&\n      Number.isFinite(padding.right)\n  );\n\n  return padding;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"file":"get-bounds.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/get-bounds.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport {vec2} from '@math.gl/core';\nimport type {WebMercatorViewport} from './web-mercator-viewport';\nimport {worldToLngLat} from './web-mercator-utils';\nimport {transformVector} from './math-utils';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n/*\n * Returns the quad at the intersection of the frustum and the given z plane\n * @param {WebMercatorViewport} viewport\n * @param {Number} z - elevation in meters\n */\nexport function getBounds(viewport: WebMercatorViewport, z: number = 0): number[][] {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const {width, height, unproject} = viewport;\n  const unprojectOps = {targetZ: z};\n  const bottomLeft = unproject([0, height], unprojectOps);\n  const bottomRight = unproject([width, height], unprojectOps);\n  let topLeft: number[];\n  let topRight: number[];\n\n  const halfFov = viewport.fovy\n    ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS\n    : Math.atan(0.5 / viewport.altitude);\n  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;\n  // The top plane is parallel to the ground if halfFov == angleToGround\n  if (halfFov > angleToGround - 0.01) {\n    // intersect with the far plane\n    topLeft = unprojectOnFarPlane(viewport, 0, z);\n    topRight = unprojectOnFarPlane(viewport, width, z);\n  } else {\n    // intersect with the top plane\n    topLeft = unproject([0, 0], unprojectOps);\n    topRight = unproject([width, 0], unprojectOps);\n  }\n\n  return [bottomLeft, bottomRight, topRight, topLeft];\n}\n\n/*\n * Find a point on the far clipping plane of the viewport\n * @param {WebMercatorViewport} viewport\n * @param {Number} x - projected x in screen space\n * @param {Number} targetZ - the elevation of the point in meters\n */\nfunction unprojectOnFarPlane(viewport: WebMercatorViewport, x: number, targetZ: number): number[] {\n  const {pixelUnprojectionMatrix} = viewport;\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, 0, 1, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);\n\n  const z = targetZ * viewport.distanceScales.unitsPerMeter[2];\n  const t = (z - coord0[2]) / (coord1[2] - coord0[2]);\n  const coord = vec2.lerp([], coord0, coord1, t);\n\n  const result = worldToLngLat(coord);\n  result.push(targetZ);\n  return result;\n}\n"],"names":[],"mappings":"AAAA,4BAAA,EAA8B;;;AAG9B,OAAO,EAAC,aAAa,EAAC,gCAA6B;AACnD,OAAO,EAAC,eAAe,EAAC,wBAAqB;AAH7C,OAAO,EAAC,IAAI,EAAC,MAAM,eAAe,CAAC;;;;AAKnC,MAAM,kBAAkB,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;AAOnC,SAAU,SAAS,CAAC,QAA6B,EAAE,IAAY,CAAC;IACpE,6DAA6D;IAC7D,MAAM,EAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAC,GAAG,QAAQ,CAAC;IAC5C,MAAM,YAAY,GAAG;QAAC,OAAO,EAAE,CAAC;IAAA,CAAC,CAAC;IAClC,MAAM,UAAU,GAAG,SAAS,CAAC;QAAC,CAAC;QAAE,MAAM;KAAC,EAAE,YAAY,CAAC,CAAC;IACxD,MAAM,WAAW,GAAG,SAAS,CAAC;QAAC,KAAK;QAAE,MAAM;KAAC,EAAE,YAAY,CAAC,CAAC;IAC7D,IAAI,OAAiB,CAAC;IACtB,IAAI,QAAkB,CAAC;IAEvB,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,GACzB,GAAG,GAAG,QAAQ,CAAC,IAAI,GAAG,kBAAkB,GACxC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,aAAa,GAAG,CAAC,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,kBAAkB,CAAC;IACjE,sEAAsE;IACtE,IAAI,OAAO,GAAG,aAAa,GAAG,IAAI,EAAE,CAAC;QACnC,+BAA+B;QAC/B,OAAO,GAAG,mBAAmB,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC,MAAM,CAAC;QACN,+BAA+B;QAC/B,OAAO,GAAG,SAAS,CAAC;YAAC,CAAC;YAAE,CAAC;SAAC,EAAE,YAAY,CAAC,CAAC;QAC1C,QAAQ,GAAG,SAAS,CAAC;YAAC,KAAK;YAAE,CAAC;SAAC,EAAE,YAAY,CAAC,CAAC;IACjD,CAAC;IAED,OAAO;QAAC,UAAU;QAAE,WAAW;QAAE,QAAQ;QAAE,OAAO;KAAC,CAAC;AACtD,CAAC;AAED;;;;;GAKG,CACH,SAAS,mBAAmB,CAAC,QAA6B,EAAE,CAAS,EAAE,OAAe;IACpF,MAAM,EAAC,uBAAuB,EAAC,GAAG,QAAQ,CAAC;IAC3C,MAAM,MAAM,gLAAG,kBAAe,AAAf,EAAgB,uBAAuB,EAAE;QAAC,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;KAAC,CAAC,CAAC;IACtE,MAAM,MAAM,gLAAG,kBAAe,AAAf,EAAgB,uBAAuB,EAAE;QAAC,CAAC;QAAE,QAAQ,CAAC,MAAM;QAAE,CAAC;QAAE,CAAC;KAAC,CAAC,CAAC;IAEpF,MAAM,CAAC,GAAG,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7D,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,MAAM,KAAK,wMAAG,OAAI,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAE/C,MAAM,MAAM,2LAAG,gBAAa,AAAb,EAAc,KAAK,CAAC,CAAC;IACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,OAAO,MAAM,CAAC;AAChB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"file":"web-mercator-viewport.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/web-mercator-viewport.ts"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix,\n  DistanceScales\n} from './web-mercator-utils';\nimport {fitBounds} from './fit-bounds';\nimport {getBounds} from './get-bounds';\nimport type {FitBoundsOptions} from './fit-bounds';\n\nimport {mat4, vec2, vec3} from '@math.gl/core';\n\n/**\n   * @param width=1 - Width of \"viewport\" or window\n   * @param height=1 - Height of \"viewport\" or window\n   * @param scale=1 - Either use scale or zoom\n   * @param pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param fovy= - Field of view of camera in degrees\n   * @param altitude= - Altitude of camera in screen units                                                               \n   *\n   * Web mercator projection short-hand parameters\n   * @param latitude - Center of viewport on map\n   * @param longitude - Center of viewport on map\n   * @param zoom - Scale = Math.pow(2,zoom) on map\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - Field of view is independent from altitude, provide `altitudeToFovy(1.5)` (default value) to match assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n */\nexport type WebMercatorViewportProps = {\n  // Map state\n  width: number;\n  height: number;\n  latitude?: number;\n  longitude?: number;\n  position?: number[];\n  zoom?: number;\n  pitch?: number;\n  bearing?: number;\n  altitude?: number;\n  fovy?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n};\n\n/**\n * The WebMercatorViewport class creates\n * - view/projection matrices\n * - \"uniform values\" (for shaders) from mercator params\n *\n * Note: Instances are immutable in the sense that they only have accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport class WebMercatorViewport {\n  readonly latitude: number;\n  readonly longitude: number;\n  readonly zoom: number;\n  readonly pitch: number;\n  readonly bearing: number;\n  readonly altitude: number;\n  readonly fovy: number;\n\n  readonly meterOffset: number[];\n  readonly center: number[];\n\n  readonly width: number;\n  readonly height: number;\n  readonly scale: number;\n  readonly distanceScales: DistanceScales;\n\n  readonly viewMatrix: number[];\n  readonly projectionMatrix: number[];\n\n  viewProjectionMatrix: number[];\n  pixelProjectionMatrix: number[];\n  pixelUnprojectionMatrix: number[];\n\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(props: WebMercatorViewportProps = {width: 1, height: 1}) {\n    let {\n      // Map state\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center: number[] = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      scale,\n      center,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _initMatrices(): void {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  /** Two viewports are equal if width and height are identical, and if\n   * their view and projection matrices are (approximately) equal.\n   */\n  equals = (viewport: WebMercatorViewport | null): boolean => {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  };\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @return - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project = (lngLatZ: number[], options: {topLeft?: boolean} = {}): number[] => {\n    const {topLeft = true} = options;\n    const worldPosition = this.projectPosition(lngLatZ);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  };\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates, possibly `[lon, lat]` on map.\n   *\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   *\n   * @param xyz - screen coordinates, z as pixel depth\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @param options.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject = (xyz: number[], options: {topLeft?: boolean; targetZ?: number} = {}): number[] => {\n    const {topLeft = true, targetZ = undefined} = options;\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  };\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  };\n\n  unprojectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  };\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return [x,y] coordinates.\n   */\n  projectFlat(lngLat: number[]): number[] {\n    return lngLatToWorld(lngLat);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param xy - array with [x,y] members\n   *  representing point on projected map plane\n   * @return - array with [lat,lon] of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy: number[]): number[] {\n    return worldToLngLat(xy);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n   * @param opt\n   * @param opt.lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param opt.pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param bounds - [[lon, lat], [lon, lat]]\n   * @param [options]\n   * @param [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(\n    bounds: [[number, number], [number, number]],\n    options: Omit<FitBoundsOptions, 'width' | 'height' | 'bounds'> = {}\n  ): WebMercatorViewport {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} bounds - [[lon, lat], [lon, lat]]\n   */\n  getBounds(options?: {z?: number}): number[][] {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} an array of 4 points that define the visible region\n   */\n  getBoundingRegion(options: {z?: number} = {}): number[][] {\n    return getBounds(this, options.z || 0);\n  }\n\n  // DEPRECATED\n\n  /** @deprecated Legacy method name */\n  getLocationAtPoint({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 852, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 858, "column": 0}, "map": {"version":3,"file":"normalize-viewport-props.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/normalize-viewport-props.ts"],"sourcesContent":["import {worldToLngLat} from './web-mercator-utils';\nimport {mod, log2} from './math-utils';\n\n// defined by mapbox-gl\nconst TILE_SIZE = 512;\n\n/** Description of viewport */\nexport type ViewportProps = {\n  width: number;\n  height: number;\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  pitch?: number;\n  bearing?: number;\n};\n\n/**\n * Apply mathematical constraints to viewport props\n * @param props\n */\n// eslint-disable-next-line complexity\nexport function normalizeViewportProps(props: ViewportProps): ViewportProps {\n  const {width, height, pitch = 0} = props;\n  let {longitude, latitude, zoom, bearing = 0} = props;\n\n  // Normalize degrees\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  // Constrain zoom and shift center at low zoom levels\n  const minZoom = log2(height / TILE_SIZE);\n  if (zoom <= minZoom) {\n    zoom = minZoom;\n    latitude = 0;\n  } else {\n    // Eliminate white space above and below the map\n    const halfHeightPixels = height / 2 / Math.pow(2, zoom);\n    const minLatitude = worldToLngLat([0, halfHeightPixels])[1];\n    if (latitude < minLatitude) {\n      latitude = minLatitude;\n    } else {\n      const maxLatitude = worldToLngLat([0, TILE_SIZE - halfHeightPixels])[1];\n      if (latitude > maxLatitude) {\n        latitude = maxLatitude;\n      }\n    }\n  }\n\n  return {width, height, longitude, latitude, zoom, pitch, bearing};\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAC,aAAa,EAAC,gCAA6B;AACnD,OAAO,EAAC,GAAG,EAAE,IAAI,EAAC,wBAAqB;;;AAEvC,uBAAuB;AACvB,MAAM,SAAS,GAAG,GAAG,CAAC;AAkBhB,SAAU,sBAAsB,CAAC,KAAoB;IACzD,MAAM,EAAC,KAAK,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,EAAC,GAAG,KAAK,CAAC;IACzC,IAAI,EAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,GAAG,CAAC,EAAC,GAAG,KAAK,CAAC;IAErD,oBAAoB;IACpB,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;QACxC,SAAS,IAAG,kLAAA,AAAG,EAAC,SAAS,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;IAC9C,CAAC;IACD,IAAI,OAAO,GAAG,CAAC,GAAG,IAAI,OAAO,GAAG,GAAG,EAAE,CAAC;QACpC,OAAO,IAAG,kLAAA,AAAG,EAAC,OAAO,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;IAC1C,CAAC;IAED,qDAAqD;IACrD,MAAM,OAAO,gLAAG,OAAA,AAAI,EAAC,MAAM,GAAG,SAAS,CAAC,CAAC;IACzC,IAAI,IAAI,IAAI,OAAO,EAAE,CAAC;QACpB,IAAI,GAAG,OAAO,CAAC;QACf,QAAQ,GAAG,CAAC,CAAC;IACf,CAAC,MAAM,CAAC;QACN,gDAAgD;QAChD,MAAM,gBAAgB,GAAG,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACxD,MAAM,WAAW,GAAG,wMAAA,AAAa,EAAC;YAAC,CAAC;YAAE,gBAAgB;SAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;YAC3B,QAAQ,GAAG,WAAW,CAAC;QACzB,CAAC,MAAM,CAAC;YACN,MAAM,WAAW,IAAG,uMAAA,AAAa,EAAC;gBAAC,CAAC;gBAAE,SAAS,GAAG,gBAAgB;aAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,IAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;gBAC3B,QAAQ,GAAG,WAAW,CAAC;YACzB,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO;QAAC,KAAK;QAAE,MAAM;QAAE,SAAS;QAAE,QAAQ;QAAE,IAAI;QAAE,KAAK;QAAE,OAAO;IAAA,CAAC,CAAC;AACpE,CAAC","ignoreList":[0]}},
    {"offset": {"line": 911, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 917, "column": 0}, "map": {"version":3,"file":"fly-to-viewport.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/fly-to-viewport.ts"],"sourcesContent":["import {lerp} from './math-utils';\nimport {scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\nimport {vec2} from '@math.gl/core';\n\nimport type {ViewportProps} from './normalize-viewport-props';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'] as const;\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\nexport type FlytoTransitionOptions = {\n  curve?: number;\n  speed?: number;\n  screenSpeed?: number;\n  maxDuration?: number;\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport function flyToViewport(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  t: number,\n  options?: FlytoTransitionOptions\n): {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n} {\n  // Equations from above paper are referred where needed.\n\n  const {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0} = getFlyToTransitionParams(\n    startProps,\n    endProps,\n    options\n  );\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    const viewport = {};\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      // @ts-ignore-error properties are populated dynamically\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    // @ts-expect-error properties are populated dynamically\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n\n  const newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  options?: FlytoTransitionOptions\n): number {\n  const opts = {...DEFAULT_OPTS, ...options};\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length = 1000 * S;\n  let duration: number;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  opts: FlytoTransitionOptions\n): {\n  startZoom: number;\n  startCenterXY: number[];\n  uDelta: number[];\n  w0: number;\n  u1: number;\n  S: number;\n  rho: number;\n  rho2: number;\n  r0: number;\n  r1: number;\n} {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter);\n  const endCenterXY = lngLatToWorld(endCenter);\n  const uDelta = vec2.sub([] as number[], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta) * startScale;\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAC,IAAI,EAAC,wBAAqB;AAClC,OAAO,EAAC,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,aAAa,EAAC,gCAA6B;AAC5F,OAAO,EAAC,IAAI,EAAC,MAAM,eAAe,CAAC;;;;AAInC,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,MAAM,yBAAyB,GAAG;IAAC,WAAW;IAAE,UAAU;IAAE,MAAM;CAAU,CAAC;AAC7E,MAAM,YAAY,GAAG;IACnB,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,GAAG;CAEX,CAAC;AAcI,SAAU,aAAa,CAC3B,UAAyB,EACzB,QAAuB,EACvB,CAAS,EACT,OAAgC;IAMhC,wDAAwD;IAExD,MAAM,EAAC,SAAS,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAC,GAAG,wBAAwB,CAC3F,UAAU,EACV,QAAQ,EACR,OAAO,CACR,CAAC;IAEF,6DAA6D;IAC7D,IAAI,EAAE,GAAG,OAAO,EAAE,CAAC;QACjB,MAAM,QAAQ,GAAG,CAAA,CAAE,CAAC;QACpB,KAAK,MAAM,GAAG,IAAI,yBAAyB,CAAE,CAAC;YAC5C,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC/B,wDAAwD;YACxD,QAAQ,CAAC,GAAG,CAAC,IAAG,mLAAA,AAAI,EAAC,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAChD,CAAC;QACD,wDAAwD;QACxD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAEhB,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;IAClD,MAAM,CAAC,GAAG,AAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAG,EAAE,CAAC;IAEzF,MAAM,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,8BAA8B;IAC5D,MAAM,OAAO,GAAG,SAAS,2LAAG,cAAA,AAAW,EAAC,cAAc,CAAC,CAAC;IAExD,MAAM,cAAc,GAAG,4MAAI,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;yMACjD,OAAI,CAAC,GAAG,CAAC,cAAc,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;IAExD,MAAM,SAAS,OAAG,oMAAA,AAAa,EAAC,cAAc,CAAC,CAAC;IAChD,OAAO;QACL,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACvB,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;QACtB,IAAI,EAAE,OAAO;KACd,CAAC;AACJ,CAAC;AAGK,SAAU,gBAAgB,CAC9B,UAAyB,EACzB,QAAuB,EACvB,OAAgC;IAEhC,MAAM,IAAI,GAAG;QAAC,GAAG,YAAY;QAAE,GAAG,OAAO;IAAA,CAAC,CAAC;IAC3C,MAAM,EAAC,WAAW,EAAE,KAAK,EAAE,WAAW,EAAC,GAAG,IAAI,CAAC;IAC/C,MAAM,EAAC,CAAC,EAAE,GAAG,EAAC,GAAG,wBAAwB,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACtE,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC;IACxB,IAAI,QAAgB,CAAC;IACrB,IAAI,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;QACjC,QAAQ,GAAG,MAAM,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC;IAC1C,CAAC,MAAM,CAAC;QACN,QAAQ,GAAG,MAAM,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED,OAAO,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;AAC/E,CAAC;AAED,kBAAkB;AAElB,6EAA6E;AAC7E,SAAS,wBAAwB,CAC/B,UAAyB,EACzB,QAAuB,EACvB,IAA4B;IAa5B,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;IACvB,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC;IAClC,MAAM,WAAW,GAAG;QAAC,UAAU,CAAC,SAAS;QAAE,UAAU,CAAC,QAAQ;KAAC,CAAC;IAChE,MAAM,UAAU,2LAAG,cAAA,AAAW,EAAC,SAAS,CAAC,CAAC;IAC1C,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC9B,MAAM,SAAS,GAAG;QAAC,QAAQ,CAAC,SAAS;QAAE,QAAQ,CAAC,QAAQ;KAAC,CAAC;IAC1D,MAAM,KAAK,2LAAG,cAAA,AAAW,EAAC,OAAO,GAAG,SAAS,CAAC,CAAC;IAE/C,MAAM,aAAa,2LAAG,gBAAA,AAAa,EAAC,WAAW,CAAC,CAAC;IACjD,MAAM,WAAW,2LAAG,gBAAA,AAAa,EAAC,SAAS,CAAC,CAAC;IAC7C,MAAM,MAAM,wMAAG,OAAI,CAAC,GAAG,CAAC,EAAc,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IAEpE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IACzD,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;IACtB,MAAM,EAAE,wMAAG,OAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC;IAC5C,kCAAkC;IAElC,mDAAmD;IACnD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAElC,+CAA+C;IAC/C,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;IACjF,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;IACjF,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjD,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjD,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAE1B,OAAO;QAAC,SAAS;QAAE,aAAa;QAAE,MAAM;QAAE,EAAE;QAAE,EAAE;QAAE,CAAC;QAAE,GAAG;QAAE,IAAI;QAAE,EAAE;QAAE,EAAE;IAAA,CAAC,CAAC;AAC1E,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1034, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/web-mercator/src/index.ts"],"sourcesContent":["// Classic web-mercator-project\nexport {WebMercatorViewport} from './web-mercator-viewport';\n\nexport {getBounds} from './get-bounds';\nexport {fitBounds} from './fit-bounds';\nexport {normalizeViewportProps} from './normalize-viewport-props';\nexport {flyToViewport, getFlyToDuration} from './fly-to-viewport';\n\nexport {\n  MAX_LATITUDE,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld,\n  zoomToScale,\n  scaleToZoom,\n  altitudeToFovy,\n  fovyToAltitude,\n  getMeterZoom,\n  unitsPerMeter,\n  getDistanceScales,\n  addMetersToLngLat,\n  getViewMatrix,\n  getProjectionMatrix,\n  getProjectionParameters\n} from './web-mercator-utils';\n\n/** Types */\nexport type {FitBoundsOptions} from './fit-bounds';\nexport type {DistanceScales} from './web-mercator-utils';\n\n/** @deprecated default export */\nexport {WebMercatorViewport as default} from './web-mercator-viewport';\n"],"names":[],"mappings":"AAAA,+BAA+B","ignoreList":[0]}},
    {"offset": {"line": 1044, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1064, "column": 0}, "map": {"version":3,"file":"is-array.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/types/src/is-array.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {TypedArray, NumericArray, NumberArray} from './array-types';\n\n/**\n * Check is an array is a typed array\n * @param value value to be tested\n * @returns input with type narrowed to TypedArray, or null\n */\nexport function isTypedArray(value: unknown): value is TypedArray {\n  return ArrayBuffer.isView(value) && !(value instanceof DataView);\n}\n\n/**\n * Check is an array is an array of numbers)\n * @param value value to be tested\n * @returns input with type narrowed to NumberArray, or null\n */\nexport function isNumberArray(value: unknown): value is NumberArray {\n  if (Array.isArray(value)) {\n    return value.length === 0 || typeof value[0] === 'number';\n  }\n  return false;\n}\n\n/**\n * Check is an array is a numeric array (typed array or array of numbers)\n * @param value value to be tested\n * @returns input with type narrowed to NumericArray, or null\n */\nexport function isNumericArray(value: unknown): value is NumericArray {\n  return isTypedArray(value) || isNumberArray(value);\n}\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAIpC;;;;GAIG;;;;;AACG,SAAU,YAAY,CAAC,KAAc;IACzC,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,YAAY,QAAQ,CAAC,CAAC;AACnE,CAAC;AAOK,SAAU,aAAa,CAAC,KAAc;IAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACzB,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC;IAC5D,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAOK,SAAU,cAAc,CAAC,KAAc;IAC3C,OAAO,YAAY,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;AACrD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1088, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1094, "column": 0}, "map": {"version":3,"file":"polygon-utils.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/polygon-utils.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT and ISC\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\n\nimport {equals} from '@math.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nexport const WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n} as const;\n\n/** Polygon representation where each point is represented as a separate array of positions. */\ntype PointsArray = NumericArray[];\n\n/** Segment visitor callback type for polygons defined with flat arrays, */\ntype SegmentVisitorFlat = (\n  p1x: number,\n  p1y: number,\n  p2x: number,\n  p2y: number,\n  i1: number,\n  i2: number\n) => void;\n\n/** Segment visitor callback type for polygons defined with array of points. */\nexport type SegmentVisitorPoints = (\n  p1: NumericArray,\n  p2: NumericArray,\n  i1: number,\n  i2: number\n) => void;\n\nexport type Plane2D = 'xy' | 'yz' | 'xz';\n\n/** Parameters of a polygon. */\ntype PolygonParams = {\n  /**\n   * Start index of the polygon in the array of positions.\n   * @default `0`\n   */\n  start?: number;\n  /**\n   * End index of the polygon in the array of positions.\n   * @default number of positions\n   */\n  end?: number;\n  /**\n   * Size of a point, 2 (XZ) or 3 (XYZ). Affects only polygons stored in flat arrays.\n   * @default `2`\n   */\n  size?: number;\n  /**\n   * Indicates that the first point of the polygon is equal to the last point, and additional checks should be ommited.\n   */\n  isClosed?: boolean;\n  /**\n   * The 2D projection plane on which to calculate the area of a 3D polygon.\n   * @default `'xy'`\n   */\n  plane?: Plane2D;\n};\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points An array that represents points of the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirection(\n  points: NumericArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const windingDirection = getPolygonWindingDirection(points, options);\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirection(\n  points: NumericArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedArea(points, options));\n}\n\nexport const DimIndex: Record<string, number> = {\n  x: 0,\n  y: 1,\n  z: 2\n} as const;\n\n/**\n * Returns signed area of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n * https://en.wikipedia.org/wiki/Shoelace_formula\n */\nexport function getPolygonSignedArea(points: NumericArray, options: PolygonParams = {}): number {\n  const {start = 0, end = points.length, plane = 'xy'} = options;\n  const dim = options.size || 2;\n  let area = 0;\n  const i0 = DimIndex[plane[0]];\n  const i1 = DimIndex[plane[1]];\n\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    area += (points[i + i0] - points[j + i0]) * (points[i + i1] + points[j + i1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls the visitor callback for each segment in the polygon.\n * @param points An array that represents points of the polygon\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygon(\n  points: NumericArray,\n  visitor: SegmentVisitorFlat,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, size = 2, isClosed} = options;\n\n  const numPoints = (end - start) / size;\n  for (let i = 0; i < numPoints - 1; ++i) {\n    visitor(\n      points[start + i * size],\n      points[start + i * size + 1],\n      points[start + (i + 1) * size],\n      points[start + (i + 1) * size + 1],\n      i,\n      i + 1\n    );\n  }\n\n  const endPointIndex = start + (numPoints - 1) * size;\n  const isClosedEx =\n    isClosed ||\n    (equals(points[start], points[endPointIndex]) &&\n      equals(points[start + 1], points[endPointIndex + 1]));\n\n  if (!isClosedEx) {\n    visitor(\n      points[endPointIndex],\n      points[endPointIndex + 1],\n      points[start],\n      points[start + 1],\n      numPoints - 1,\n      0\n    );\n  }\n}\n\nfunction reversePolygon(\n  points: NumericArray,\n  options: {start?: number; end?: number; size?: number}\n): void {\n  const {start = 0, end = points.length, size = 2} = options;\n\n  const numPoints = (end - start) / size;\n  const numSwaps = Math.floor(numPoints / 2);\n  for (let i = 0; i < numSwaps; ++i) {\n    const b1 = start + i * size;\n    const b2 = start + (numPoints - 1 - i) * size;\n    for (let j = 0; j < size; ++j) {\n      const tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points Array of points that represent the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirectionPoints(\n  points: PointsArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const currentDirection = getPolygonWindingDirectionPoints(points, options);\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirectionPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\n\n/**\n * Returns signed area of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n */\nexport function getPolygonSignedAreaPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  const {start = 0, end = points.length, plane = 'xy'} = options;\n  let area = 0;\n  const i0 = DimIndex[plane[0]];\n  const i1 = DimIndex[plane[1]];\n\n  for (let i = start, j = end - 1; i < end; ++i) {\n    area += (points[i][i0] - points[j][i0]) * (points[i][i1] + points[j][i1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls visitor callback for each segment in the polygon.\n * @param points Array of points that represent the polygon.\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygonPoints(\n  points: PointsArray,\n  visitor: SegmentVisitorPoints,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, isClosed} = options;\n  for (let i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n\n  const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1208, "column": 0}, "map": {"version":3,"file":"polygon.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/polygon.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable no-undef, no-console */\nimport {isArray} from '@math.gl/core';\nimport type {SegmentVisitorPoints} from './polygon-utils';\nimport type {NumericArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport type PolygonOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\nexport class Polygon {\n  points: NumericArray | number[][];\n  isFlatArray: boolean;\n  options: PolygonOptions;\n\n  constructor(points: NumericArray | number[][], options: PolygonOptions = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns signed area of the polygon.\n   * @returns Signed area of the polygon.\n   */\n  getSignedArea(): number {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points as NumericArray, this.options);\n\n    return getPolygonSignedAreaPoints(this.points as number[][], this.options);\n  }\n\n  /**\n   * Returns absolute area of the polygon.\n   * @returns Absolute area of the polygon.\n   */\n  getArea(): number {\n    return Math.abs(this.getSignedArea());\n  }\n\n  /**\n   * Returns winding direction of the polygon.\n   * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n   */\n  getWindingDirection(): number {\n    return Math.sign(this.getSignedArea());\n  }\n\n  /**\n   * Calls the visitor callback for each segment in the polygon.\n   * @param visitor A callback to call for each segment.\n   */\n  forEachSegment(visitor: SegmentVisitorPoints): void {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points as NumericArray,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points as number[][], visitor, this.options);\n    }\n  }\n\n  /**\n   * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n   * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n   * @return Returns true if the winding direction was changed.\n   */\n  modifyWindingDirection(direction: number): boolean {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points as NumericArray, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points as number[][], direction, this.options);\n  }\n}\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAEpC,uCAAA,EAAyC;;;AAKzC,OAAO,EACL,oBAAoB,EACpB,uBAAuB,EACvB,6BAA6B,EAC7B,0BAA0B,EAC1B,6BAA6B,EAC7B,mCAAmC,EACpC,2BAAwB;AAXzB,OAAO,EAAC,OAAO,EAAC,MAAM,eAAe,CAAC;;;AAoBhC,MAAO,OAAO;IAKlB,YAAY,MAAiC,EAAE,UAA0B,CAAA,CAAE,CAAA;QACzE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,mKAAC,UAAO,AAAP,EAAQ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvC,IAAI,CAAC,OAAO,GAAG;YACb,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,CAAC;YACzB,GAAG,EAAE,OAAO,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM;YACjC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC;YACvB,QAAQ,EAAE,OAAO,CAAC,QAAQ;SAC3B,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAED;;;OAGG,CACH,aAAa,GAAA;QACX,IAAI,IAAI,CAAC,WAAW,EAAE,+KAAO,uBAAA,AAAoB,EAAC,IAAI,CAAC,MAAsB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE7F,+KAAO,6BAAA,AAA0B,EAAC,IAAI,CAAC,MAAoB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7E,CAAC;IAED;;;OAGG,CACH,OAAO,GAAA;QACL,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG,CACH,mBAAmB,GAAA;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;OAGG,CACH,cAAc,CAAC,OAA6B,EAAA;QAC1C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;oLACrB,0BAAA,AAAuB,EACrB,IAAI,CAAC,MAAsB,EAC3B,sCAAsC;YACtC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;gBACzB,iJAAiJ;gBACjJ,OAAO,CAAC;oBAAC,EAAE;oBAAE,EAAE;iBAAC,EAAE;oBAAC,EAAE;oBAAE,EAAE;iBAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACtC,CAAC,EACD,IAAI,CAAC,OAAO,CACb,CAAC;QACJ,CAAC,MAAM,CAAC;oLACN,gCAA6B,AAA7B,EAA8B,IAAI,CAAC,MAAoB,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;IAED;;;;OAIG,CACH,sBAAsB,CAAC,SAAiB,EAAA;QACtC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,+KAAO,gCAAA,AAA6B,EAAC,IAAI,CAAC,MAAsB,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7F,CAAC;QACD,+KAAO,sCAAA,AAAmC,EAAC,IAAI,CAAC,MAAoB,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACjG,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 1280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1286, "column": 0}, "map": {"version":3,"file":"earcut.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/earcut.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT and ISC\n// Copyright (c) vis.gl contributors\n\n/*\n  Adapted from https://github.com/mapbox/earcut to allow passing in\n  of outline and hole areas using the `areas` parameter. As the\n  areas are calcuted as part of classifying the polygon rings\n  we can pass them in again to avoid recomputation\n\n  ISC License\n\n  Copyright (c) 2016, Mapbox\n\n  Permission to use, copy, modify, and/or distribute this software for any purpose\n  with or without fee is hereby granted, provided that the above copyright notice\n  and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n  THIS SOFTWARE.\n\n */\n\n// @ts-nocheck\n\n/* eslint-disable */\n\nimport type {NumericArray} from '@math.gl/core';\nimport {getPolygonSignedArea, DimIndex, Plane2D} from './polygon-utils';\n\n/**\n * Computes a triangulation of a polygon\n * @param positions a flat array of the vertex positions that define the polygon.\n * @param holeIndices an array of hole indices if any (e.g. [5, 8] for a 12-vertex input would mean one hole with vertices 5–7 and another with 8–11).\n * @param dim the number of elements in each vertex. Size `2` will interpret `positions` as `[x0, y0, x1, y1, ...]` and size `3` will interpret `positions` as `[x0, y0, z0, x1, y1, z1, ...]`. Default `2`.\n * @param areas areas of outer polygon and holes as computed by `getPolygonSignedArea()`. Can be optionally supplied to speed up triangulation\n * @returns array of indices into the `positions` array that describes the triangulation of the polygon\n * Adapted from https://github.com/mapbox/earcut\n */\nexport function earcut(\n  positions: NumericArray,\n  holeIndices?: NumericArray,\n  dim: number = 2,\n  areas?: NumericArray,\n  plane: Plane2D = 'xy'\n): number[] {\n  const hasHoles = holeIndices && holeIndices.length;\n  const outerLen = hasHoles ? holeIndices[0] * dim : positions.length;\n  let outerNode = linkedList(positions, 0, outerLen, dim, true, areas && areas[0], plane);\n  const triangles = [];\n\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n  let invSize;\n  let maxX;\n  let maxY;\n  let minX;\n  let minY;\n  let x;\n  let y;\n\n  if (hasHoles) outerNode = eliminateHoles(positions, holeIndices, outerNode, dim, areas, plane);\n\n  // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n  if (positions.length > 80 * dim) {\n    minX = maxX = positions[0];\n    minY = maxY = positions[1];\n\n    for (let i = dim; i < outerLen; i += dim) {\n      x = positions[i];\n      y = positions[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    }\n\n    // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n    invSize = Math.max(maxX - minX, maxY - minY);\n    invSize = invSize !== 0 ? 32767 / invSize : 0;\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n  return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(\n  data: NumericArray,\n  start: number,\n  end: number,\n  dim: number,\n  clockwise: boolean,\n  area: number | undefined,\n  plane: Plane2D\n): Vertex {\n  let i;\n  let last;\n  if (area === undefined) {\n    area = getPolygonSignedArea(data, {start, end, size: dim, plane});\n  }\n\n  let i0 = DimIndex[plane[0]];\n  let i1 = DimIndex[plane[1]];\n  // Note that the signed area calculation in math.gl\n  // has the opposite sign to that which was originally\n  // present in earcut, thus the `< 0` is reversed\n  if (clockwise === area < 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i + i0], data[i + i1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim)\n      last = insertNode(i, data[i + i0], data[i + i1], last);\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end?) {\n  if (!start) return start;\n  if (!end) end = start;\n\n  let p = start;\n  let again;\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) break;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass?) {\n  if (!ear) return;\n\n  // interlink polygon nodes in z-order\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n  let stop = ear;\n  let prev;\n  let next;\n\n  // iterate through ears, slicing them one by one\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push((prev.i / dim) | 0);\n      triangles.push((ear.i / dim) | 0);\n      triangles.push((next.i / dim) | 0);\n\n      removeNode(ear);\n\n      // skipping the next vertex leads to less sliver triangles\n      ear = next.next;\n      stop = next.next;\n\n      continue;\n    }\n\n    ear = next;\n\n    // if we looped through the whole remaining polygon and can't find any more ears\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n        // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n        // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize);\n      }\n\n      break;\n    }\n  }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n  const a = ear.prev;\n  const b = ear;\n  const c = ear.next;\n\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  // now make sure we don't have other points inside the potential ear\n  const ax = a.x;\n  const bx = b.x;\n  const cx = c.x;\n  const ay = a.y;\n  const by = b.y;\n  const cy = c.y;\n\n  // triangle bbox; min & max are calculated like this for speed\n  const x0 = ax < bx ? (ax < cx ? ax : cx) : bx < cx ? bx : cx;\n  const y0 = ay < by ? (ay < cy ? ay : cy) : by < cy ? by : cy;\n  const x1 = ax > bx ? (ax > cx ? ax : cx) : bx > cx ? bx : cx;\n  const y1 = ay > by ? (ay > cy ? ay : cy) : by > cy ? by : cy;\n\n  let p = c.next;\n  while (p !== a) {\n    if (\n      p.x >= x0 &&\n      p.x <= x1 &&\n      p.y >= y0 &&\n      p.y <= y1 &&\n      pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n      area(p.prev, p, p.next) >= 0\n    )\n      return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n  const a = ear.prev;\n  const b = ear;\n  const c = ear.next;\n\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  const ax = a.x;\n  const bx = b.x;\n  const cx = c.x;\n  const ay = a.y;\n  const by = b.y;\n  const cy = c.y;\n\n  // triangle bbox; min & max are calculated like this for speed\n  const x0 = ax < bx ? (ax < cx ? ax : cx) : bx < cx ? bx : cx;\n  const y0 = ay < by ? (ay < cy ? ay : cy) : by < cy ? by : cy;\n  const x1 = ax > bx ? (ax > cx ? ax : cx) : bx > cx ? bx : cx;\n  const y1 = ay > by ? (ay > cy ? ay : cy) : by > cy ? by : cy;\n\n  // z-order range for the current triangle bbox;\n  const minZ = zOrder(x0, y0, minX, minY, invSize);\n  const maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n  let p = ear.prevZ;\n  let n = ear.nextZ;\n\n  // look for points inside the triangle in both directions\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (\n      p.x >= x0 &&\n      p.x <= x1 &&\n      p.y >= y0 &&\n      p.y <= y1 &&\n      p !== a &&\n      p !== c &&\n      pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n      area(p.prev, p, p.next) >= 0\n    )\n      return false;\n    p = p.prevZ;\n\n    if (\n      n.x >= x0 &&\n      n.x <= x1 &&\n      n.y >= y0 &&\n      n.y <= y1 &&\n      n !== a &&\n      n !== c &&\n      pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) &&\n      area(n.prev, n, n.next) >= 0\n    )\n      return false;\n    n = n.nextZ;\n  }\n\n  // look for remaining points in decreasing z-order\n  while (p && p.z >= minZ) {\n    if (\n      p.x >= x0 &&\n      p.x <= x1 &&\n      p.y >= y0 &&\n      p.y <= y1 &&\n      p !== a &&\n      p !== c &&\n      pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n      area(p.prev, p, p.next) >= 0\n    )\n      return false;\n    p = p.prevZ;\n  }\n\n  // look for remaining points in increasing z-order\n  while (n && n.z <= maxZ) {\n    if (\n      n.x >= x0 &&\n      n.x <= x1 &&\n      n.y >= y0 &&\n      n.y <= y1 &&\n      n !== a &&\n      n !== c &&\n      pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) &&\n      area(n.prev, n, n.next) >= 0\n    )\n      return false;\n    n = n.nextZ;\n  }\n\n  return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n  let p = start;\n  do {\n    const a = p.prev;\n    const b = p.next.next;\n\n    if (\n      !equals(a, b) &&\n      intersects(a, p, p.next, b) &&\n      locallyInside(a, b) &&\n      locallyInside(b, a)\n    ) {\n      triangles.push((a.i / dim) | 0);\n      triangles.push((p.i / dim) | 0);\n      triangles.push((b.i / dim) | 0);\n\n      // remove two nodes involved\n      removeNode(p);\n      removeNode(p.next);\n\n      p = start = b;\n    }\n    p = p.next;\n  } while (p !== start);\n\n  return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n  // look for a valid diagonal that divides the polygon into two\n  let a = start;\n  do {\n    let b = a.next.next;\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        let c = splitPolygon(a, b);\n\n        // filter colinear points around the cuts\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next);\n\n        // run earcut on each half\n        earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n        earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n        return;\n      }\n      b = b.next;\n    }\n    a = a.next;\n  } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(\n  data: NumericArray,\n  holeIndices: NumericArray,\n  outerNode: Vertex,\n  dim: number,\n  areas: NumericArray | undefined,\n  plane: Plane2D\n): Vertex {\n  const queue = [];\n  let i;\n  let len;\n  let start;\n  let end;\n  let list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false, areas && areas[i + 1], plane);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX);\n\n  // process holes from left to right\n  for (i = 0; i < queue.length; i++) {\n    outerNode = eliminateHole(queue[i], outerNode);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n  const bridge = findHoleBridge(hole, outerNode);\n  if (!bridge) {\n    return outerNode;\n  }\n\n  const bridgeReverse = splitPolygon(bridge, hole);\n\n  // filter collinear points around the cuts\n  filterPoints(bridgeReverse, bridgeReverse.next);\n  return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n  let p = outerNode;\n  const hx = hole.x;\n  const hy = hole.y;\n  let qx = -Infinity;\n  let m;\n\n  // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      const x = p.x + ((hy - p.y) * (p.next.x - p.x)) / (p.next.y - p.y);\n      if (x <= hx && x > qx) {\n        qx = x;\n        m = p.x < p.next.x ? p : p.next;\n        if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n      }\n    }\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null;\n\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  const stop = m;\n  const mx = m.x;\n  const my = m.y;\n  let tanMin = Infinity;\n  let tan;\n\n  p = m;\n\n  do {\n    if (\n      hx >= p.x &&\n      p.x >= mx &&\n      hx !== p.x &&\n      pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)\n    ) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if (\n        locallyInside(p, hole) &&\n        (tan < tanMin ||\n          (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))\n      ) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  } while (p !== stop);\n\n  return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n  let p = start;\n  do {\n    if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n\n  sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n  let e;\n  let i;\n  let inSize = 1;\n  let numMerges;\n  let p;\n  let pSize;\n  let q;\n  let qSize;\n  let tail;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n      qSize = inSize;\n\n      while (pSize > 0 || (qSize > 0 && q)) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;\n        else list = e;\n\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n\n  return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = ((x - minX) * invSize) | 0;\n  y = ((y - minY) * invSize) | 0;\n\n  x = (x | (x << 8)) & 0x00ff00ff;\n  x = (x | (x << 4)) & 0x0f0f0f0f;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y = (y | (y << 8)) & 0x00ff00ff;\n  y = (y | (y << 4)) & 0x0f0f0f0f;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n  let p = start;\n  let leftmost = start;\n  do {\n    if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (\n    (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n    (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n    (bx - px) * (cy - py) >= (cx - px) * (by - py)\n  );\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n  return (\n    a.next.i !== b.i &&\n    a.prev.i !== b.i &&\n    !intersectsPolygon(a, b) && // dones't intersect other edges\n    ((locallyInside(a, b) &&\n      locallyInside(b, a) &&\n      middleInside(a, b) && // locally visible\n      (area(a.prev, a, b.prev) || area(a, b.prev, b))) || // does not create opposite-facing sectors\n      (equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0))\n  ); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n  const o1 = sign(area(p1, q1, p2));\n  const o2 = sign(area(p1, q1, q2));\n  const o3 = sign(area(p2, q2, p1));\n  const o4 = sign(area(p2, q2, q1));\n\n  if (o1 !== o2 && o3 !== o4) return true; // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n  return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n  return (\n    q.x <= Math.max(p.x, r.x) &&\n    q.x >= Math.min(p.x, r.x) &&\n    q.y <= Math.max(p.y, r.y) &&\n    q.y >= Math.min(p.y, r.y)\n  );\n}\n\nfunction sign(num) {\n  return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n  let p = a;\n  do {\n    if (\n      p.i !== a.i &&\n      p.next.i !== a.i &&\n      p.i !== b.i &&\n      p.next.i !== b.i &&\n      intersects(p, p.next, a, b)\n    )\n      return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0\n    ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0\n    : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n  let p = a;\n  let inside = false;\n  const px = (a.x + b.x) / 2;\n  const py = (a.y + b.y) / 2;\n  do {\n    if (\n      p.y > py !== p.next.y > py &&\n      p.next.y !== p.y &&\n      px < ((p.next.x - p.x) * (py - p.y)) / (p.next.y - p.y) + p.x\n    )\n      inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n  const a2 = new Vertex(a.i, a.x, a.y);\n  const b2 = new Vertex(b.i, b.x, b.y);\n  const an = a.next;\n  const bp = b.prev;\n\n  a.next = b;\n  b.prev = a;\n\n  a2.next = an;\n  an.prev = a2;\n\n  b2.next = a2;\n  a2.prev = b2;\n\n  bp.next = b2;\n  b2.prev = bp;\n\n  return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n  const p = new Vertex(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nclass Vertex {\n  // vertex index in coordinates array\n  i: number;\n\n  // vertex coordinates\n  x: number;\n  y: number;\n\n  // previous and next vertex nodes in a polygon ring\n  prev: Vertex = null;\n  next: Vertex = null;\n\n  // z-order curve value\n  z: number = 0;\n\n  // previous and next nodes in z-order\n  prevZ: Vertex = null;\n  nextZ: Vertex = null;\n\n  // indicates whether this is a steiner point\n  steiner: boolean = false;\n\n  constructor(i: number, x: number, y: number) {\n    this.i = i;\n    this.x = x;\n    this.y = y;\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1808, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1814, "column": 0}, "map": {"version":3,"file":"utils.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/utils.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport function push(target: number[], source: number[]): boolean {\n  const size = source.length;\n  const startIndex = target.length;\n\n  // dedupe, if source is the same point as the last vertex\n  if (startIndex > 0) {\n    let isDuplicate = true;\n    for (let i = 0; i < size; i++) {\n      if (target[startIndex - size + i] !== source[i]) {\n        isDuplicate = false;\n        break;\n      }\n    }\n    if (isDuplicate) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < size; i++) {\n    target[startIndex + i] = source[i];\n  }\n  return true;\n}\n\nexport function copy(target: number[], source: Readonly<NumericArray>): void {\n  const size = source.length;\n  for (let i = 0; i < size; i++) {\n    target[i] = source[i];\n  }\n}\n\nexport function getPointAtIndex(\n  positions: Readonly<NumericArray>,\n  index: number,\n  size: number,\n  offset: number,\n  out: number[] = []\n): number[] {\n  const startI = offset + index * size;\n  for (let i = 0; i < size; i++) {\n    out[i] = positions[startI + i];\n  }\n  return out;\n}\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;;;AAI9B,SAAU,IAAI,CAAC,MAAgB,EAAE,MAAgB;IACrD,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;IAC3B,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;IAEjC,yDAAyD;IACzD,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;QACnB,IAAI,WAAW,GAAG,IAAI,CAAC;QACvB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,CAAE,CAAC;YAC9B,IAAI,MAAM,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBAChD,WAAW,GAAG,KAAK,CAAC;gBACpB,MAAM;YACR,CAAC;QACH,CAAC;QACD,IAAI,WAAW,EAAE,CAAC;YAChB,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,CAAE,CAAC;QAC9B,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAEK,SAAU,IAAI,CAAC,MAAgB,EAAE,MAA8B;IACnE,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;IAC3B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,CAAE,CAAC;QAC9B,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC;AACH,CAAC;AAEK,SAAU,eAAe,CAC7B,SAAiC,EACjC,KAAa,EACb,IAAY,EACZ,MAAc,EACd,MAAgB,EAAE;IAElB,MAAM,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC;IACrC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,CAAE,CAAC;QAC9B,GAAG,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACjC,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1856, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1862, "column": 0}, "map": {"version":3,"file":"lineclip.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/lineclip.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT and ISC\n// Copyright (c) vis.gl contributors\n\n/*\n  Adapted from https://github.com/mapbox/lineclip to work with flat arrays\n  and 3d positions\n\n  ISC License\n\n  Copyright (c) 2015, Mapbox\n\n  Permission to use, copy, modify, and/or distribute this software for any purpose\n  with or without fee is hereby granted, provided that the above copyright notice\n  and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n  THIS SOFTWARE.\n\n */\n\n/* eslint-disable max-statements, max-depth, complexity */\n\nimport {push, copy, getPointAtIndex} from './utils';\nimport type {NumericArray} from '@math.gl/core';\n\nexport type BoundingBox = [number, number, number, number];\n\n/**\n * Cohen-Sutherland line clipping algorithm, adapted to efficiently\n * handle polylines rather than just segments\n */\nexport function clipPolyline(\n  positions: Readonly<NumericArray>,\n  bbox: BoundingBox,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length} = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  const result: number[][] = [];\n  let part: number[] = [];\n  let a: number[];\n  let b: number[];\n  let codeA: number = -1;\n  let codeB: number;\n  let lastCode: number;\n\n  for (let i = 1; i < numPoints; i++) {\n    a = getPointAtIndex(positions, i - 1, size, startIndex, a);\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    if (codeA < 0) {\n      codeA = bitCode(a, bbox);\n    }\n    codeB = lastCode = bitCode(b, bbox);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (!(codeA | codeB)) {\n        // accept\n        push(part, a);\n\n        if (codeB !== lastCode) {\n          // segment went outside\n          push(part, b);\n\n          if (i < numPoints - 1) {\n            // start a new line\n            result.push(part);\n            part = [];\n          }\n        } else if (i === numPoints - 1) {\n          push(part, b);\n        }\n        break;\n      } else if (codeA & codeB) {\n        // trivial reject\n        break;\n      } else if (codeA) {\n        // a outside, intersect with clip edge\n        intersect(a, b, codeA, bbox, a);\n        codeA = bitCode(a, bbox);\n      } else {\n        // b outside\n        intersect(a, b, codeB, bbox, b);\n        codeB = bitCode(b, bbox);\n      }\n    }\n\n    codeA = lastCode;\n  }\n\n  if (part.length) result.push(part);\n\n  return result;\n}\n\n/**\n * Sutherland-Hodgeman polygon clipping algorithm\n * polygon must be closed (first vertex == last vertex)\n */\nexport function clipPolygon(\n  positions: Readonly<NumericArray>,\n  bbox: BoundingBox,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] {\n  const {size = 2, endIndex = positions.length} = options || {};\n  let {startIndex = 0} = options || {};\n  let numPoints = (endIndex - startIndex) / size;\n  let result: number[];\n  let p: number[];\n  let prev: number[];\n  let inside: boolean;\n  let prevInside: boolean;\n\n  // clip against each side of the clip rectangle\n  for (let edge = 1; edge <= 8; edge *= 2) {\n    result = [];\n    prev = getPointAtIndex(positions, numPoints - 1, size, startIndex, prev);\n    prevInside = !(bitCode(prev, bbox) & edge);\n\n    for (let i = 0; i < numPoints; i++) {\n      p = getPointAtIndex(positions, i, size, startIndex, p);\n      inside = !(bitCode(p, bbox) & edge);\n\n      // if segment goes through the clip window, add an intersection\n      if (inside !== prevInside) push(result, intersect(prev, p, edge, bbox));\n\n      if (inside) push(result, p); // add a point if it's inside\n\n      copy(prev, p);\n      prevInside = inside;\n    }\n\n    // close loop\n    positions = result;\n    startIndex = 0;\n    numPoints = result.length / size;\n\n    if (!numPoints) break;\n  }\n\n  return result;\n}\n\n/** intersect a segment against one of the 4 lines that make up the bbox */\n\nexport function intersect(\n  a: number[],\n  b: number[],\n  edge: number,\n  bbox: BoundingBox,\n  out: number[] = []\n): number[] {\n  let t;\n  // Forces out[snapI] to be on the bbox edge\n  // Interpolation introduces precision issue which may cause lineclip to be\n  // stuck in an infinite loop\n  let snap: number;\n  if (edge & 8) {\n    // top\n    t = (bbox[3] - a[1]) / (b[1] - a[1]);\n    snap = 3;\n  } else if (edge & 4) {\n    // bottom\n    t = (bbox[1] - a[1]) / (b[1] - a[1]);\n    snap = 1;\n  } else if (edge & 2) {\n    // right\n    t = (bbox[2] - a[0]) / (b[0] - a[0]);\n    snap = 2;\n  } else if (edge & 1) {\n    // left\n    t = (bbox[0] - a[0]) / (b[0] - a[0]);\n    snap = 0;\n  } else {\n    return null;\n  }\n  for (let i = 0; i < a.length; i++) {\n    out[i] = (snap & 1) === i ? bbox[snap] : t * (b[i] - a[i]) + a[i];\n  }\n  return out;\n}\n\n/**\n * bit code reflects the point position relative to the bbox:\n *         left  mid  right\n *    top  1001  1000  1010\n *    mid  0001  0000  0010\n * bottom  0101  0100  0110\n */\nexport function bitCode(p: number[], bbox: BoundingBox): number {\n  let code = 0;\n\n  if (p[0] < bbox[0]) code |= 1;\n  // left\n  else if (p[0] > bbox[2]) code |= 2; // right\n\n  if (p[1] < bbox[1]) code |= 4;\n  // bottom\n  else if (p[1] > bbox[3]) code |= 8; // top\n\n  return code;\n}\n"],"names":[],"mappings":"AAAA,UAAU;AACV,uCAAuC;AACvC,oCAAoC;AAEpC;;;;;;;;;;;;;;;;;;;;GAoBG,CAEH,wDAAA,EAA0D;;;;;;AAE1D,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,eAAe,EAAC,mBAAgB;;AAS9C,SAAU,YAAY,CAC1B,SAAiC,EACjC,IAAiB,EACjB,OAIC;IAED,MAAM,EAAC,IAAI,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,QAAQ,GAAG,SAAS,CAAC,MAAM,EAAC,GAAG,OAAO,IAAI,CAAA,CAAE,CAAC;IAC9E,MAAM,SAAS,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC;IACjD,MAAM,MAAM,GAAe,EAAE,CAAC;IAC9B,IAAI,IAAI,GAAa,EAAE,CAAC;IACxB,IAAI,CAAW,CAAC;IAChB,IAAI,CAAW,CAAC;IAChB,IAAI,KAAK,GAAW,CAAC,CAAC,CAAC;IACvB,IAAI,KAAa,CAAC;IAClB,IAAI,QAAgB,CAAC;IAErB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,CAAE,CAAC;QACnC,CAAC,gKAAG,kBAAA,AAAe,EAAC,SAAS,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAC,gKAAG,kBAAA,AAAe,EAAC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;QACvD,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YACd,KAAK,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3B,CAAC;QACD,KAAK,GAAG,QAAQ,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAEpC,iDAAiD;QACjD,MAAO,IAAI,CAAE,CAAC;YACZ,IAAI,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC;gBACrB,SAAS;6KACT,OAAA,AAAI,EAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAEd,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;oBACvB,uBAAuB;qBACvB,mKAAA,AAAI,EAAC,IAAI,EAAE,CAAC,CAAC,CAAC;oBAEd,IAAI,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC;wBACtB,mBAAmB;wBACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClB,IAAI,GAAG,EAAE,CAAC;oBACZ,CAAC;gBACH,CAAC,MAAM,IAAI,CAAC,KAAK,SAAS,GAAG,CAAC,EAAE,CAAC;iLAC/B,OAAA,AAAI,EAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChB,CAAC;gBACD,MAAM;YACR,CAAC,MAAM,IAAI,KAAK,GAAG,KAAK,EAAE,CAAC;gBAEzB,MAAM;YACR,CAAC,MAAM,IAAI,KAAK,EAAE,CAAC;gBACjB,sCAAsC;gBACtC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChC,KAAK,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3B,CAAC,MAAM,CAAC;gBACN,YAAY;gBACZ,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChC,KAAK,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,KAAK,GAAG,QAAQ,CAAC;IACnB,CAAC;IAED,IAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEnC,OAAO,MAAM,CAAC;AAChB,CAAC;AAMK,SAAU,WAAW,CACzB,SAAiC,EACjC,IAAiB,EACjB,OAIC;IAED,MAAM,EAAC,IAAI,GAAG,CAAC,EAAE,QAAQ,GAAG,SAAS,CAAC,MAAM,EAAC,GAAG,OAAO,IAAI,CAAA,CAAE,CAAC;IAC9D,IAAI,EAAC,UAAU,GAAG,CAAC,EAAC,GAAG,OAAO,IAAI,CAAA,CAAE,CAAC;IACrC,IAAI,SAAS,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC;IAC/C,IAAI,MAAgB,CAAC;IACrB,IAAI,CAAW,CAAC;IAChB,IAAI,IAAc,CAAC;IACnB,IAAI,MAAe,CAAC;IACpB,IAAI,UAAmB,CAAC;IAExB,+CAA+C;IAC/C,IAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,CAAE,CAAC;QACxC,MAAM,GAAG,EAAE,CAAC;QACZ,IAAI,gKAAG,kBAAA,AAAe,EAAC,SAAS,EAAE,SAAS,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACzE,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAE3C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,CAAE,CAAC;YACnC,CAAC,gKAAG,kBAAA,AAAe,EAAC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YAEpC,+DAA+D;YAC/D,IAAI,MAAM,KAAK,UAAU,+JAAE,OAAA,AAAI,EAAC,MAAM,EAAE,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAExE,IAAI,MAAM,GAAE,mKAAA,AAAI,EAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,6BAA6B;yKAE1D,OAAA,AAAI,EAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACd,UAAU,GAAG,MAAM,CAAC;QACtB,CAAC;QAED,aAAa;QACb,SAAS,GAAG,MAAM,CAAC;QACnB,UAAU,GAAG,CAAC,CAAC;QACf,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;QAEjC,IAAI,CAAC,SAAS,EAAE,MAAM;IACxB,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAIK,SAAU,SAAS,CACvB,CAAW,EACX,CAAW,EACX,IAAY,EACZ,IAAiB,EACjB,MAAgB,EAAE;IAElB,IAAI,CAAC,CAAC;IACN,2CAA2C;IAC3C,0EAA0E;IAC1E,4BAA4B;IAC5B,IAAI,IAAY,CAAC;IACjB,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC;QACb,MAAM;QACN,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,GAAG,CAAC,CAAC;IACX,CAAC,MAAM,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC;QACpB,SAAS;QACT,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,GAAG,CAAC,CAAC;IACX,CAAC,MAAM,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC;QACpB,QAAQ;QACR,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,GAAG,CAAC,CAAC;IACX,CAAC,MAAM,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC;QACpB,OAAO;QACP,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,GAAG,CAAC,CAAC;IACX,CAAC,MAAM,CAAC;QACN,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE,CAAC;QAClC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AASK,SAAU,OAAO,CAAC,CAAW,EAAE,IAAiB;IACpD,IAAI,IAAI,GAAG,CAAC,CAAC;IAEb,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC;SAEzB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ;IAE5C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC;SAEzB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM;IAE1C,OAAO,IAAI,CAAC;AACd,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2013, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2019, "column": 0}, "map": {"version":3,"file":"cut-by-grid.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/cut-by-grid.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport {bitCode, intersect, BoundingBox} from './lineclip';\nimport {getPointAtIndex, copy, push} from './utils';\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport type Polygon = {\n  positions: Readonly<NumericArray>;\n  holeIndices?: Readonly<NumericArray>;\n  edgeTypes?: Readonly<NumericArray>;\n};\n\nexport function cutPolylineByGrid(\n  positions: NumericArray,\n  options?: {\n    size?: number;\n    broken?: boolean;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] | number[][] {\n  const {\n    size = 2,\n    broken = false,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    startIndex = 0,\n    endIndex = positions.length\n  } = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  let part: number[] = [];\n  const result: number[][] = [part];\n  const a: number[] = getPointAtIndex(positions, 0, size, startIndex);\n  let b: number[];\n  let codeB: number;\n  const cell: BoundingBox = getGridCell(a, gridResolution, gridOffset, []);\n  const scratchPoint: number[] = [];\n  push(part, a);\n\n  for (let i = 1; i < numPoints; i++) {\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    codeB = bitCode(b, cell);\n\n    while (codeB) {\n      // find the intersection with the current cell\n      intersect(a, b, codeB, cell, scratchPoint);\n      const codeAlt = bitCode(scratchPoint, cell);\n      if (codeAlt) {\n        intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n      push(part, scratchPoint);\n      // move to the next cell\n      copy(a, scratchPoint);\n\n      moveToNeighborCell(cell, gridResolution, codeB);\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        push(part, a);\n      }\n\n      codeB = bitCode(b, cell);\n    }\n\n    push(part, b);\n    copy(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n\n/** Internal helper type during cutting, name TBD */\ntype PolygonCut = {\n  pos: Readonly<NumericArray>;\n  types: number[];\n  holes: Readonly<NumericArray>;\n};\n\n/** Internal helper type during cutting, name TBD */\ntype MutablePolygonCut = {\n  pos: number[];\n  types: number[];\n  holes: number[];\n};\n\n/**\n * Cuts a polygon by a pre-defined grid\n */\nexport function cutPolygonByGrid(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  if (!positions.length) {\n    // input is empty\n    return [];\n  }\n  const {size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false} = options || {};\n  const result: Polygon[] = [];\n  const queue: PolygonCut[] = [\n    {\n      pos: positions,\n      types: edgeTypes ? (new Array(positions.length / size).fill(TYPE_BORDER) as number[]) : null,\n      holes: holeIndices || []\n    }\n  ];\n  const bbox: number[][] = [[], []];\n  // @ts-ignore\n  let cell: BoundingBox = [];\n\n  // Recursively bisect polygon until every part fit in a single grid cell\n  while (queue.length) {\n    const {pos, types, holes} = queue.shift();\n\n    // Get the bounding box of the outer polygon\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    const code = bitCode(bbox[1], cell);\n\n    if (code) {\n      // Split the outer ring at the boundary\n      let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      const polygonLow: MutablePolygonCut = {pos: parts[0].pos, types: parts[0].types, holes: []};\n      const polygonHigh: MutablePolygonCut = {pos: parts[1].pos, types: parts[1].types, holes: []};\n      queue.push(polygonLow, polygonHigh);\n\n      // Split each hole at the boundary\n      for (let i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      // Polygon fits in a single cell, no more processing required\n      const polygon: Polygon = {positions: pos};\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n  return result;\n}\n\n// edgeTypes:\n// TYPE_BORDER - edge from the original polygon\n// TYPE_INSIDE - inside the original polygon\n// eslint-disable-next-line max-params\nfunction bisectPolygon(\n  positions: Readonly<NumericArray>,\n  edgeTypes: number[] | undefined,\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  bbox: BoundingBox,\n  edge: number\n): {\n  pos: number[];\n  types?: number[];\n}[] {\n  const numPoints = (endIndex - startIndex) / size;\n  const resultLow: number[] = [];\n  const resultHigh: number[] = [];\n  const typesLow: number[] = [];\n  const typesHigh: number[] = [];\n  const scratchPoint: number[] = [];\n\n  let p: number[];\n  let side: number;\n  let type: number;\n  const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n  let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  let prevType = edgeTypes && edgeTypes[numPoints - 1];\n  let lowPointCount = 0;\n  let highPointCount = 0;\n\n  for (let i = 0; i < numPoints; i++) {\n    p = getPointAtIndex(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    // if segment goes through the boundary, add an intersection\n    if (side && prevSide && prevSide !== side) {\n      intersect(prev, p, edge, bbox, scratchPoint);\n      push(resultLow, scratchPoint) && typesLow.push(prevType);\n      push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      push(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n    if (side >= 0) {\n      push(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    copy(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [\n    lowPointCount ? {pos: resultLow, types: edgeTypes && typesLow} : null,\n    highPointCount ? {pos: resultHigh, types: edgeTypes && typesHigh} : null\n  ];\n}\n\nfunction getGridCell(\n  p: number[],\n  gridResolution: number,\n  gridOffset: [number, number],\n  out: number[]\n): BoundingBox {\n  const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  const bottom =\n    Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out as BoundingBox;\n}\n\nfunction moveToNeighborCell(cell: number[], gridResolution: number, edge: number): void {\n  if (edge & 8) {\n    // top\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    // bottom\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    // right\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    // left\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(\n  positions: Readonly<NumericArray>,\n  size: number,\n  endIndex: number,\n  out: number[][]\n): number[][] {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  for (let i = 0; i < endIndex; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n\nfunction concatInPlace(arr1: number[], arr2: number[]): number[] {\n  for (let i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n  return arr1;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2268, "column": 0}, "map": {"version":3,"file":"cut-by-mercator-bounds.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/cut-by-mercator-bounds.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\nimport type {Polygon} from './cut-by-grid';\nimport type {NumericArray} from '@math.gl/core';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n    normalize?: boolean;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options || {};\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  }) as number[][];\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    normalize?: boolean;\n    maxLatitude?: number;\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  const {size = 2, normalize = true, edgeTypes = false} = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions: number[] = [];\n  const newHoleIndices: number[] = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(\n  positions: Readonly<NumericArray>,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): number {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions: number[],\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  maxLatitude: number = DEFAULT_MAX_LATITUDE\n): void {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(\n  positions: NumericArray,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): void {\n  let prevLng: number = positions[0];\n  let lng: number;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions: NumericArray, size: number): void {\n  let refLng: number;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2431, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/l03542515/Desktop/visioncityv1/src/frontend/node_modules/%40math.gl/polygon/src/index.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport {Polygon} from './polygon';\n\nexport {\n  getPolygonSignedArea,\n  getPolygonWindingDirection,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  WINDING\n} from './polygon-utils';\n\nexport {earcut} from './earcut';\n\nexport {clipPolygon, clipPolyline} from './lineclip';\n\nexport {cutPolygonByGrid, cutPolylineByGrid} from './cut-by-grid';\n\nexport {cutPolylineByMercatorBounds, cutPolygonByMercatorBounds} from './cut-by-mercator-bounds';\n\n/** @deprecated */\nexport {Polygon as _Polygon} from './polygon';\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC","ignoreList":[0]}},
    {"offset": {"line": 2443, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}