module.exports = {

"[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "COMPUTE_INTERVAL": (()=>COMPUTE_INTERVAL),
    "InputDirection": (()=>InputDirection),
    "InputEvent": (()=>InputEvent),
    "MOBILE_REGEX": (()=>MOBILE_REGEX)
});
const MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
const COMPUTE_INTERVAL = 25;
var InputEvent;
(function(InputEvent) {
    InputEvent[InputEvent["Start"] = 1] = "Start";
    InputEvent[InputEvent["Move"] = 2] = "Move";
    InputEvent[InputEvent["End"] = 4] = "End";
    InputEvent[InputEvent["Cancel"] = 8] = "Cancel";
})(InputEvent || (InputEvent = {}));
var InputDirection;
(function(InputDirection) {
    InputDirection[InputDirection["None"] = 0] = "None";
    InputDirection[InputDirection["Left"] = 1] = "Left";
    InputDirection[InputDirection["Right"] = 2] = "Right";
    InputDirection[InputDirection["Up"] = 4] = "Up";
    InputDirection[InputDirection["Down"] = 8] = "Down";
    InputDirection[InputDirection["Horizontal"] = 3] = "Horizontal";
    InputDirection[InputDirection["Vertical"] = 12] = "Vertical";
    InputDirection[InputDirection["All"] = 15] = "All";
})(InputDirection || (InputDirection = {})); //# sourceMappingURL=input-consts.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "RecognizerState": (()=>RecognizerState)
});
var RecognizerState;
(function(RecognizerState) {
    RecognizerState[RecognizerState["Possible"] = 1] = "Possible";
    RecognizerState[RecognizerState["Began"] = 2] = "Began";
    RecognizerState[RecognizerState["Changed"] = 4] = "Changed";
    RecognizerState[RecognizerState["Ended"] = 8] = "Ended";
    RecognizerState[RecognizerState["Recognized"] = 8] = "Recognized";
    RecognizerState[RecognizerState["Cancelled"] = 16] = "Cancelled";
    RecognizerState[RecognizerState["Failed"] = 32] = "Failed";
})(RecognizerState || (RecognizerState = {})); //# sourceMappingURL=recognizer-state.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// magical touchAction value
__turbopack_esm__({
    "TOUCH_ACTION_AUTO": (()=>TOUCH_ACTION_AUTO),
    "TOUCH_ACTION_COMPUTE": (()=>TOUCH_ACTION_COMPUTE),
    "TOUCH_ACTION_MANIPULATION": (()=>TOUCH_ACTION_MANIPULATION),
    "TOUCH_ACTION_NONE": (()=>TOUCH_ACTION_NONE),
    "TOUCH_ACTION_PAN_X": (()=>TOUCH_ACTION_PAN_X),
    "TOUCH_ACTION_PAN_Y": (()=>TOUCH_ACTION_PAN_Y)
});
const TOUCH_ACTION_COMPUTE = 'compute';
const TOUCH_ACTION_AUTO = 'auto';
const TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
const TOUCH_ACTION_NONE = 'none';
const TOUCH_ACTION_PAN_X = 'pan-x';
const TOUCH_ACTION_PAN_Y = 'pan-y'; //# sourceMappingURL=touchaction-Consts.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/clean-touch-actions.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>cleanTouchActions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)");
;
function cleanTouchActions(actions) {
    // none
    if (actions.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_NONE"])) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_NONE"];
    }
    const hasPanX = actions.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_PAN_X"]);
    const hasPanY = actions.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_PAN_Y"]);
    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_NONE"];
    }
    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_PAN_X"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_PAN_Y"];
    }
    // manipulation
    if (actions.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_MANIPULATION"])) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_MANIPULATION"];
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_AUTO"];
} //# sourceMappingURL=clean-touch-actions.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TouchAction": (()=>TouchAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$clean$2d$touch$2d$actions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/clean-touch-actions.js [app-ssr] (ecmascript)");
;
;
class TouchAction {
    constructor(manager, value){
        this.actions = '';
        this.manager = manager;
        this.set(value);
    }
    /**
     * set the touchAction value on the element or enable the polyfill
     */ set(value) {
        // find out the touch-action by the event handlers
        if (value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_COMPUTE"]) {
            value = this.compute();
        }
        if (this.manager.element) {
            this.manager.element.style.touchAction = value;
            this.actions = value;
        }
    }
    /**
     * just re-set the touchAction value
     */ update() {
        this.set(this.manager.options.touchAction);
    }
    /**
     * compute the value for the touchAction property based on the recognizer's settings
     */ compute() {
        let actions = [];
        for (const recognizer of this.manager.recognizers){
            if (recognizer.options.enable) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$clean$2d$touch$2d$actions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(actions.join(' '));
    }
} //# sourceMappingURL=touchaction.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/utils/split-str.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * split string on whitespace
 * @returns {Array} words
 */ __turbopack_esm__({
    "splitStr": (()=>splitStr)
});
function splitStr(str) {
    return str.trim().split(/\s+/g);
} //# sourceMappingURL=split-str.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/utils/event-listeners.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "addEventListeners": (()=>addEventListeners),
    "removeEventListeners": (()=>removeEventListeners)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$split$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/utils/split-str.js [app-ssr] (ecmascript)");
;
function addEventListeners(target, types, handler) {
    if (!target) {
        return;
    }
    for (const type of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$split$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["splitStr"])(types)){
        target.addEventListener(type, handler, false);
    }
}
function removeEventListeners(target, types, handler) {
    if (!target) {
        return;
    }
    for (const type of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$split$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["splitStr"])(types)){
        target.removeEventListener(type, handler, false);
    }
} //# sourceMappingURL=event-listeners.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/utils/get-window-for-element.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * get the window object of an element
 */ __turbopack_esm__({
    "getWindowForElement": (()=>getWindowForElement)
});
function getWindowForElement(element) {
    const doc = element.ownerDocument || element;
    return doc.defaultView;
} //# sourceMappingURL=get-window-for-element.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/utils/has-parent.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * find if a node is in the given parent
 */ __turbopack_esm__({
    "default": (()=>hasParent)
});
function hasParent(node, parent) {
    let ancestor = node;
    while(ancestor){
        if (ancestor === parent) {
            return true;
        }
        ancestor = ancestor.parentNode;
    }
    return false;
} //# sourceMappingURL=has-parent.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-center.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * get the center of all the pointers
 */ __turbopack_esm__({
    "getCenter": (()=>getCenter)
});
function getCenter(pointers) {
    const pointersLength = pointers.length;
    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: Math.round(pointers[0].clientX),
            y: Math.round(pointers[0].clientY)
        };
    }
    let x = 0;
    let y = 0;
    let i = 0;
    while(i < pointersLength){
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }
    return {
        x: Math.round(x / pointersLength),
        y: Math.round(y / pointersLength)
    };
} //# sourceMappingURL=get-center.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/simple-clone-input-data.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "simpleCloneInputData": (()=>simpleCloneInputData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$center$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-center.js [app-ssr] (ecmascript)");
;
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    const pointers = [];
    let i = 0;
    while(i < input.pointers.length){
        pointers[i] = {
            clientX: Math.round(input.pointers[i].clientX),
            clientY: Math.round(input.pointers[i].clientY)
        };
        i++;
    }
    return {
        timeStamp: Date.now(),
        pointers,
        center: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$center$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getCenter"])(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
} //# sourceMappingURL=simple-clone-input-data.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-distance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * calculate the absolute distance between two points
 * @returns distance
 */ __turbopack_esm__({
    "getEventDistance": (()=>getEventDistance),
    "getPointDistance": (()=>getPointDistance)
});
function getPointDistance(p1, p2) {
    const x = p2.x - p1.x;
    const y = p2.y - p1.y;
    return Math.sqrt(x * x + y * y);
}
function getEventDistance(p1, p2) {
    const x = p2.clientX - p1.clientX;
    const y = p2.clientY - p1.clientY;
    return Math.sqrt(x * x + y * y);
} //# sourceMappingURL=get-distance.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-angle.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * calculate the angle between two coordinates
 * @returns angle in degrees
 */ __turbopack_esm__({
    "getEventAngle": (()=>getEventAngle),
    "getPointAngle": (()=>getPointAngle)
});
function getPointAngle(p1, p2) {
    const x = p2.x - p1.x;
    const y = p2.y - p1.y;
    return Math.atan2(y, x) * 180 / Math.PI;
}
function getEventAngle(p1, p2) {
    const x = p2.clientX - p1.clientX;
    const y = p2.clientY - p1.clientY;
    return Math.atan2(y, x) * 180 / Math.PI;
} //# sourceMappingURL=get-angle.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-direction.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getDirection": (()=>getDirection)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
;
function getDirection(dx, dy) {
    if (dx === dy) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].None;
    }
    if (Math.abs(dx) >= Math.abs(dy)) {
        return dx < 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Left : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Right;
    }
    return dy < 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Up : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Down;
} //# sourceMappingURL=get-direction.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-delta-xy.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "computeDeltaXY": (()=>computeDeltaXY)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
;
function computeDeltaXY(session, input) {
    // getCenter is called before computeDeltaXY
    const center = input.center;
    let offset = session.offsetDelta;
    let prevDelta = session.prevDelta;
    const prevInput = session.prevInput;
    if (input.eventType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Start || prevInput?.eventType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End) {
        prevDelta = session.prevDelta = {
            x: prevInput?.deltaX || 0,
            y: prevInput?.deltaY || 0
        };
        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }
    return {
        deltaX: prevDelta.x + (center.x - offset.x),
        deltaY: prevDelta.y + (center.y - offset.y)
    };
} //# sourceMappingURL=get-delta-xy.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-velocity.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * calculate the velocity between two points. unit is in px per ms.
 */ __turbopack_esm__({
    "getVelocity": (()=>getVelocity)
});
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
} //# sourceMappingURL=get-velocity.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-scale.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getScale": (()=>getScale)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$distance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-distance.js [app-ssr] (ecmascript)");
;
function getScale(start, end) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$distance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEventDistance"])(end[0], end[1]) / (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$distance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEventDistance"])(start[0], start[1]);
} //# sourceMappingURL=get-scale.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-rotation.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getRotation": (()=>getRotation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$angle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-angle.js [app-ssr] (ecmascript)");
;
function getRotation(start, end) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$angle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEventAngle"])(end[1], end[0]) - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$angle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEventAngle"])(start[1], start[0]);
} //# sourceMappingURL=get-rotation.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/compute-interval-input-data.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "computeIntervalInputData": (()=>computeIntervalInputData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$velocity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-velocity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$direction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-direction.js [app-ssr] (ecmascript)");
;
;
;
function computeIntervalInputData(session, input) {
    const last = session.lastInterval || input;
    const deltaTime = input.timeStamp - last.timeStamp;
    let velocity;
    let velocityX;
    let velocityY;
    let direction;
    if (input.eventType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Cancel && (deltaTime > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["COMPUTE_INTERVAL"] || last.velocity === undefined)) {
        const deltaX = input.deltaX - last.deltaX;
        const deltaY = input.deltaY - last.deltaY;
        const v = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$velocity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getVelocity"])(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = Math.abs(v.x) > Math.abs(v.y) ? v.x : v.y;
        direction = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$direction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDirection"])(deltaX, deltaY);
        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }
    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
} //# sourceMappingURL=compute-interval-input-data.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/compute-input-data.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "computeInputData": (()=>computeInputData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$has$2d$parent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/utils/has-parent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$simple$2d$clone$2d$input$2d$data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/simple-clone-input-data.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$center$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-center.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$distance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-distance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$angle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-angle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$direction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-direction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$delta$2d$xy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-delta-xy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$velocity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-velocity.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$scale$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-scale.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$rotation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-rotation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$compute$2d$interval$2d$input$2d$data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/compute-interval-input-data.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
function computeInputData(manager, input) {
    const { session } = manager;
    const { pointers } = input;
    const { length: pointersLength } = pointers;
    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$simple$2d$clone$2d$input$2d$data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["simpleCloneInputData"])(input);
    }
    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$simple$2d$clone$2d$input$2d$data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["simpleCloneInputData"])(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }
    const { firstInput, firstMultiple } = session;
    const offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
    const center = input.center = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$center$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getCenter"])(pointers);
    input.timeStamp = Date.now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;
    input.angle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$angle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPointAngle"])(offsetCenter, center);
    input.distance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$distance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPointDistance"])(offsetCenter, center);
    const { deltaX, deltaY } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$delta$2d$xy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["computeDeltaXY"])(session, input);
    input.deltaX = deltaX;
    input.deltaY = deltaY;
    input.offsetDirection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$direction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDirection"])(input.deltaX, input.deltaY);
    const overallVelocity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$velocity$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getVelocity"])(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = Math.abs(overallVelocity.x) > Math.abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
    input.scale = firstMultiple ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$scale$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getScale"])(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$rotation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRotation"])(firstMultiple.pointers, pointers) : 0;
    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
    // find the correct target
    let target = manager.element;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$has$2d$parent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$compute$2d$interval$2d$input$2d$data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["computeIntervalInputData"])(session, input);
    // All the optional fields have been populated
    return input;
} //# sourceMappingURL=compute-input-data.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-handler.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "inputHandler": (()=>inputHandler)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$compute$2d$input$2d$data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/compute-input-data.js [app-ssr] (ecmascript)");
;
;
function inputHandler(manager, eventType, input) {
    const pointersLen = input.pointers.length;
    const changedPointersLen = input.changedPointers.length;
    const isFirst = eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Start && pointersLen - changedPointersLen === 0;
    const isFinal = eventType & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Cancel) && pointersLen - changedPointersLen === 0;
    input.isFirst = Boolean(isFirst);
    input.isFinal = Boolean(isFinal);
    if (isFirst) {
        manager.session = {};
    }
    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;
    // compute scale, rotation etc
    const processedInput = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$compute$2d$input$2d$data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["computeInputData"])(manager, input);
    // emit secret event
    manager.emit('hammer.input', processedInput);
    manager.recognize(processedInput);
    manager.session.prevInput = processedInput;
} //# sourceMappingURL=input-handler.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/input/input.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Input": (()=>Input)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$event$2d$listeners$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/utils/event-listeners.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$get$2d$window$2d$for$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/utils/get-window-for-element.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$handler$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-handler.js [app-ssr] (ecmascript)");
;
;
;
class Input {
    constructor(manager){
        this.evEl = '';
        this.evWin = '';
        this.evTarget = '';
        /** smaller wrapper around the handler, for the scope and the enabled state of the manager,
         * so when disabled the input events are completely bypassed.
         */ this.domHandler = (ev)=>{
            if (this.manager.options.enable) {
                this.handler(ev);
            }
        };
        this.manager = manager;
        this.element = manager.element;
        this.target = manager.options.inputTarget || manager.element;
    }
    callback(eventType, input) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$handler$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inputHandler"])(this.manager, eventType, input);
    }
    // eslint-disable @typescript-eslint/unbound-method
    /**
     * bind the events
     */ init() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$event$2d$listeners$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addEventListeners"])(this.element, this.evEl, this.domHandler);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$event$2d$listeners$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addEventListeners"])(this.target, this.evTarget, this.domHandler);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$event$2d$listeners$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addEventListeners"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$get$2d$window$2d$for$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWindowForElement"])(this.element), this.evWin, this.domHandler);
    }
    /**
     * unbind the events
     */ destroy() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$event$2d$listeners$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["removeEventListeners"])(this.element, this.evEl, this.domHandler);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$event$2d$listeners$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["removeEventListeners"])(this.target, this.evTarget, this.domHandler);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$event$2d$listeners$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["removeEventListeners"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$get$2d$window$2d$for$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWindowForElement"])(this.element), this.evWin, this.domHandler);
    }
} //# sourceMappingURL=input.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/inputs/pointerevent.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PointerEventInput": (()=>PointerEventInput)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input.js [app-ssr] (ecmascript)");
;
;
const POINTER_INPUT_MAP = {
    pointerdown: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Start,
    pointermove: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Move,
    pointerup: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End,
    pointercancel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Cancel,
    pointerout: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Cancel
};
const POINTER_ELEMENT_EVENTS = 'pointerdown';
const POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
class PointerEventInput extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Input"] {
    constructor(manager){
        super(manager);
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;
        this.store = this.manager.session.pointerEvents = [];
        this.init();
    }
    /**
     * handle mouse events
     */ handler(ev) {
        const { store } = this;
        let removePointer = false;
        // @ts-ignore
        const eventType = POINTER_INPUT_MAP[ev.type];
        const pointerType = ev.pointerType;
        const isTouch = pointerType === 'touch';
        // get index of the event in the store
        let storeIndex = store.findIndex((e)=>e.pointerId === ev.pointerId);
        // start and mouse must be down
        if (eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Start && (ev.buttons || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Cancel)) {
            removePointer = true;
        }
        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }
        // update the event in the store
        store[storeIndex] = ev;
        this.callback(eventType, {
            pointers: store,
            changedPointers: [
                ev
            ],
            eventType,
            pointerType,
            srcEvent: ev
        });
        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
} //# sourceMappingURL=pointerevent.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/utils/prefixed.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "prefixed": (()=>prefixed)
});
const VENDOR_PREFIXES = [
    '',
    'webkit',
    'Moz',
    'MS',
    'ms',
    'o'
];
function prefixed(obj, property) {
    const camelProp = property[0].toUpperCase() + property.slice(1);
    for (const prefix of VENDOR_PREFIXES){
        const prop = prefix ? prefix + camelProp : property;
        if (prop in obj) {
            return prop;
        }
    }
    return undefined;
} //# sourceMappingURL=prefixed.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Manager": (()=>Manager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$inputs$2f$pointerevent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/inputs/pointerevent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$split$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/utils/split-str.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$prefixed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/utils/prefixed.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
;
;
;
;
;
const STOP = 1;
const FORCED_STOP = 2;
const defaultOptions = {
    touchAction: 'compute',
    enable: true,
    inputTarget: null,
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         */ userSelect: 'none',
        /**
         * (Webkit) Disable default dragging behavior
         */ // @ts-ignore
        userDrag: 'none',
        /**
         * (iOS only) Disables the default callout shown when you touch and hold a touch target.
         * When you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         */ // @ts-ignore
        touchCallout: 'none',
        /**
         * (iOS only) Sets the color of the highlight that appears over a link while it's being tapped.
         */ // @ts-ignore
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};
class Manager {
    constructor(element, options){
        this.options = {
            ...defaultOptions,
            ...options,
            cssProps: {
                ...defaultOptions.cssProps,
                ...options.cssProps
            },
            inputTarget: options.inputTarget || element
        };
        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};
        this.element = element;
        this.input = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$inputs$2f$pointerevent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PointerEventInput"](this);
        this.touchAction = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TouchAction"](this, this.options.touchAction);
        this.toggleCssProps(true);
    }
    /**
     * set options
     */ set(options) {
        Object.assign(this.options, options);
        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    }
    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     */ stop(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    }
    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     */ recognize(inputData) {
        const { session } = this;
        if (session.stopped) {
            return;
        }
        // run the touch-action polyfill
        if (this.session.prevented) {
            inputData.srcEvent.preventDefault();
        }
        let recognizer;
        const { recognizers } = this;
        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        let { curRecognizer } = session;
        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || curRecognizer && curRecognizer.state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized) {
            curRecognizer = session.curRecognizer = null;
        }
        let i = 0;
        while(i < recognizers.length){
            recognizer = recognizers[i];
            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && // 1
            (!curRecognizer || recognizer === curRecognizer || // 2
            recognizer.canRecognizeWith(curRecognizer))) {
                // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }
            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Changed | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Ended)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    }
    /**
     * get a recognizer by its event name.
     */ get(recognizerName) {
        const { recognizers } = this;
        for(let i = 0; i < recognizers.length; i++){
            if (recognizers[i].options.event === recognizerName) {
                return recognizers[i];
            }
        }
        return null;
    }
    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     */ add(recognizer) {
        if (Array.isArray(recognizer)) {
            for (const item of recognizer){
                this.add(item);
            }
            return this;
        }
        // remove existing
        const existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }
        this.recognizers.push(recognizer);
        recognizer.manager = this;
        this.touchAction.update();
        return recognizer;
    }
    /**
     * remove a recognizer by name or instance
     */ remove(recognizerOrName) {
        if (Array.isArray(recognizerOrName)) {
            for (const item of recognizerOrName){
                this.remove(item);
            }
            return this;
        }
        const recognizer = typeof recognizerOrName === 'string' ? this.get(recognizerOrName) : recognizerOrName;
        // let's make sure this recognizer exists
        if (recognizer) {
            const { recognizers } = this;
            const index = recognizers.indexOf(recognizer);
            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }
        return this;
    }
    /**
     * bind event
     */ on(events, handler) {
        if (!events || !handler) {
            return;
        }
        const { handlers } = this;
        for (const event of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$split$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["splitStr"])(events)){
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        }
    }
    /**
     * unbind event, leave hander blank to remove all handlers
     */ off(events, handler) {
        if (!events) {
            return;
        }
        const { handlers } = this;
        for (const event of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$split$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["splitStr"])(events)){
            if (!handler) {
                delete handlers[event];
            } else if (handlers[event]) {
                handlers[event].splice(handlers[event].indexOf(handler), 1);
            }
        }
    }
    /**
     * emit event to the listeners
     */ emit(event, data) {
        // no handlers, so skip it all
        const handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }
        const evt = data;
        evt.type = event;
        evt.preventDefault = function() {
            data.srcEvent.preventDefault();
        };
        let i = 0;
        while(i < handlers.length){
            handlers[i](evt);
            i++;
        }
    }
    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */ destroy() {
        this.toggleCssProps(false);
        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
    /**
     * add/remove the css properties as defined in manager.options.cssProps
     */ toggleCssProps(add) {
        const { element } = this;
        if (!element) {
            return;
        }
        for (const [name, value] of Object.entries(this.options.cssProps)){
            const prop = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$prefixed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["prefixed"])(element.style, name);
            if (add) {
                this.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else {
                element.style[prop] = this.oldCssProps[prop] || '';
            }
        }
        if (!add) {
            this.oldCssProps = {};
        }
    }
} //# sourceMappingURL=manager.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/utils/unique-id.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * get a unique id
 */ __turbopack_esm__({
    "uniqueId": (()=>uniqueId)
});
let _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
} //# sourceMappingURL=unique-id.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/state-str.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "stateStr": (()=>stateStr)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
;
function stateStr(state) {
    if (state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Cancelled) {
        return 'cancel';
    } else if (state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Ended) {
        return 'end';
    } else if (state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Changed) {
        return 'move';
    } else if (state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began) {
        return 'start';
    }
    return '';
} //# sourceMappingURL=state-str.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Recognizer": (()=>Recognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$unique$2d$id$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/utils/unique-id.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$state$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/state-str.js [app-ssr] (ecmascript)");
;
;
;
class Recognizer {
    constructor(options){
        this.options = options;
        this.id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$utils$2f$unique$2d$id$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["uniqueId"])();
        this.state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Possible;
        this.simultaneous = {};
        this.requireFail = [];
    }
    /**
     * set options
     */ set(options) {
        Object.assign(this.options, options);
        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager.touchAction.update();
        return this;
    }
    /**
     * recognize simultaneous with an other recognizer.
     */ recognizeWith(recognizerOrName) {
        if (Array.isArray(recognizerOrName)) {
            for (const item of recognizerOrName){
                this.recognizeWith(item);
            }
            return this;
        }
        let otherRecognizer;
        if (typeof recognizerOrName === 'string') {
            otherRecognizer = this.manager.get(recognizerOrName);
            if (!otherRecognizer) {
                throw new Error(`Cannot find recognizer ${recognizerOrName}`);
            }
        } else {
            otherRecognizer = recognizerOrName;
        }
        const { simultaneous } = this;
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    }
    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     */ dropRecognizeWith(recognizerOrName) {
        if (Array.isArray(recognizerOrName)) {
            for (const item of recognizerOrName){
                this.dropRecognizeWith(item);
            }
            return this;
        }
        let otherRecognizer;
        if (typeof recognizerOrName === 'string') {
            otherRecognizer = this.manager.get(recognizerOrName);
        } else {
            otherRecognizer = recognizerOrName;
        }
        if (otherRecognizer) {
            delete this.simultaneous[otherRecognizer.id];
        }
        return this;
    }
    /**
     * recognizer can only run when an other is failing
     */ requireFailure(recognizerOrName) {
        if (Array.isArray(recognizerOrName)) {
            for (const item of recognizerOrName){
                this.requireFailure(item);
            }
            return this;
        }
        let otherRecognizer;
        if (typeof recognizerOrName === 'string') {
            otherRecognizer = this.manager.get(recognizerOrName);
            if (!otherRecognizer) {
                throw new Error(`Cannot find recognizer ${recognizerOrName}`);
            }
        } else {
            otherRecognizer = recognizerOrName;
        }
        const { requireFail } = this;
        if (requireFail.indexOf(otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    }
    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     */ dropRequireFailure(recognizerOrName) {
        if (Array.isArray(recognizerOrName)) {
            for (const item of recognizerOrName){
                this.dropRequireFailure(item);
            }
            return this;
        }
        let otherRecognizer;
        if (typeof recognizerOrName === 'string') {
            otherRecognizer = this.manager.get(recognizerOrName);
        } else {
            otherRecognizer = recognizerOrName;
        }
        if (otherRecognizer) {
            const index = this.requireFail.indexOf(otherRecognizer);
            if (index > -1) {
                this.requireFail.splice(index, 1);
            }
        }
        return this;
    }
    /**
     * has require failures boolean
     */ hasRequireFailures() {
        return Boolean(this.requireFail.find((recognier)=>recognier.options.enable));
    }
    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     */ canRecognizeWith(otherRecognizer) {
        return Boolean(this.simultaneous[otherRecognizer.id]);
    }
    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     */ emit(input) {
        // Some recognizers override emit() with their own logic
        if (!input) return;
        const { state } = this;
        // 'panstart' and 'panmove'
        if (state < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Ended) {
            this.manager.emit(this.options.event + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$state$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stateStr"])(state), input);
        }
        // simple 'eventName' events
        this.manager.emit(this.options.event, input);
        // additional event(panleft, panright, pinchin, pinchout...)
        if (input.additionalEvent) {
            this.manager.emit(input.additionalEvent, input);
        }
        // panend and pancancel
        if (state >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Ended) {
            this.manager.emit(this.options.event + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$state$2d$str$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stateStr"])(state), input);
        }
    }
    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     */ tryEmit(input) {
        if (this.canEmit()) {
            this.emit(input);
        } else {
            // it's failing anyway
            this.state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed;
        }
    }
    /**
     * can we emit?
     */ canEmit() {
        let i = 0;
        while(i < this.requireFail.length){
            if (!(this.requireFail[i].state & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Possible))) {
                return false;
            }
            i++;
        }
        return true;
    }
    /**
     * update the recognizer
     */ recognize(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        const inputDataClone = {
            ...inputData
        };
        // is is enabled and allow recognizing?
        if (!this.options.enable) {
            this.reset();
            this.state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed;
            return;
        }
        // reset when we've reached the end
        if (this.state & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Cancelled | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed)) {
            this.state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Possible;
        }
        this.state = this.process(inputDataClone);
        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Changed | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Ended | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Cancelled)) {
            this.tryEmit(inputDataClone);
        }
    }
    /**
     * return the event names that are emitted by this recognizer
     */ getEventNames() {
        return [
            this.options.event
        ];
    }
    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     */ reset() {}
} //# sourceMappingURL=recognizer.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AttrRecognizer": (()=>AttrRecognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
;
;
;
class AttrRecognizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Recognizer"] {
    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     */ attrTest(input) {
        const optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    }
    /**
     * Process the input and return the state for the recognizer
     */ process(input) {
        const { state } = this;
        const { eventType } = input;
        const isRecognized = state & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Changed);
        const isValid = this.attrTest(input);
        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Cancel || !isValid)) {
            return state | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Cancelled;
        } else if (isRecognized || isValid) {
            if (eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End) {
                return state | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Ended;
            } else if (!(state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began)) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began;
            }
            return state | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Changed;
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed;
    }
} //# sourceMappingURL=attribute.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/tap.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/* global setTimeout, clearTimeout */ __turbopack_esm__({
    "TapRecognizer": (()=>TapRecognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$distance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/get-distance.js [app-ssr] (ecmascript)");
;
;
;
;
;
class TapRecognizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Recognizer"] {
    constructor(options = {}){
        super({
            enable: true,
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300,
            time: 250,
            threshold: 9,
            posThreshold: 10,
            ...options
        });
        /** previous time for tap counting */ this.pTime = null;
        /** previous center for tap counting */ this.pCenter = null;
        this._timer = null;
        this._input = null;
        this.count = 0;
    }
    getTouchAction() {
        return [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_MANIPULATION"]
        ];
    }
    process(input) {
        const { options } = this;
        const validPointers = input.pointers.length === options.pointers;
        const validMovement = input.distance < options.threshold;
        const validTouchTime = input.deltaTime < options.time;
        this.reset();
        if (input.eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Start && this.count === 0) {
            return this.failTimeout();
        }
        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End) {
                return this.failTimeout();
            }
            const validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
            const validMultiTap = !this.pCenter || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$get$2d$distance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPointDistance"])(this.pCenter, input.center) < options.posThreshold;
            this.pTime = input.timeStamp;
            this.pCenter = input.center;
            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }
            this._input = input;
            // if tap count matches we have recognized it,
            // else it has began recognizing...
            const tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized;
                }
                this._timer = setTimeout(()=>{
                    this.state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized;
                    this.tryEmit(this._input);
                }, options.interval);
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began;
            }
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed;
    }
    failTimeout() {
        this._timer = setTimeout(()=>{
            this.state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed;
        }, this.options.interval);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed;
    }
    reset() {
        clearTimeout(this._timer);
    }
    emit(input) {
        if (this.state === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized) {
            input.tapCount = this.count;
            this.manager.emit(this.options.event, input);
        }
    }
} //# sourceMappingURL=tap.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PanRecognizer": (()=>PanRecognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)");
;
;
;
;
const EVENT_NAMES = [
    '',
    'start',
    'move',
    'end',
    'cancel',
    'up',
    'down',
    'left',
    'right'
];
class PanRecognizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AttrRecognizer"] {
    constructor(options = {}){
        super({
            enable: true,
            pointers: 1,
            event: 'pan',
            threshold: 10,
            direction: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].All,
            ...options
        });
        this.pX = null;
        this.pY = null;
    }
    getTouchAction() {
        const { options: { direction } } = this;
        const actions = [];
        if (direction & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Horizontal) {
            actions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_PAN_Y"]);
        }
        if (direction & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Vertical) {
            actions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_PAN_X"]);
        }
        return actions;
    }
    getEventNames() {
        return EVENT_NAMES.map((suffix)=>this.options.event + suffix);
    }
    directionTest(input) {
        const { options } = this;
        let hasMoved = true;
        let { distance } = input;
        let { direction } = input;
        const x = input.deltaX;
        const y = input.deltaY;
        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Horizontal) {
                direction = x === 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].None : x < 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Left : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Right;
                hasMoved = x !== this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = y === 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].None : y < 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Up : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Down;
                hasMoved = y !== this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && Boolean(direction & options.direction);
    }
    attrTest(input) {
        return super.attrTest(input) && (Boolean(this.state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began) || !(this.state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began) && this.directionTest(input));
    }
    emit(input) {
        this.pX = input.deltaX;
        this.pY = input.deltaY;
        const direction = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"][input.direction].toLowerCase();
        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        super.emit(input);
    }
} //# sourceMappingURL=pan.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/swipe.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SwipeRecognizer": (()=>SwipeRecognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js [app-ssr] (ecmascript)");
;
;
;
const EVENT_NAMES = [
    '',
    'up',
    'down',
    'left',
    'right'
];
class SwipeRecognizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AttrRecognizer"] {
    constructor(options = {}){
        super({
            enable: true,
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].All,
            pointers: 1,
            ...options
        });
    }
    getTouchAction() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PanRecognizer"].prototype.getTouchAction.call(this);
    }
    getEventNames() {
        return EVENT_NAMES.map((suffix)=>this.options.event + suffix);
    }
    attrTest(input) {
        const { direction } = this.options;
        let velocity = 0;
        if (direction & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].All) {
            velocity = input.overallVelocity;
        } else if (direction & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Horizontal) {
            velocity = input.overallVelocityX;
        } else if (direction & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"].Vertical) {
            velocity = input.overallVelocityY;
        }
        return super.attrTest(input) && Boolean(direction & input.offsetDirection) && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && Math.abs(velocity) > this.options.velocity && Boolean(input.eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End);
    }
    emit(input) {
        const direction = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputDirection"][input.offsetDirection].toLowerCase();
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }
        this.manager.emit(this.options.event, input);
    }
} //# sourceMappingURL=swipe.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pinch.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PinchRecognizer": (()=>PinchRecognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
;
;
;
const EVENT_NAMES = [
    '',
    'start',
    'move',
    'end',
    'cancel',
    'in',
    'out'
];
class PinchRecognizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AttrRecognizer"] {
    constructor(options = {}){
        super({
            enable: true,
            event: 'pinch',
            threshold: 0,
            pointers: 2,
            ...options
        });
    }
    getTouchAction() {
        return [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_NONE"]
        ];
    }
    getEventNames() {
        return EVENT_NAMES.map((suffix)=>this.options.event + suffix);
    }
    attrTest(input) {
        return super.attrTest(input) && (Math.abs(input.scale - 1) > this.options.threshold || Boolean(this.state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began));
    }
    emit(input) {
        if (input.scale !== 1) {
            const inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        super.emit(input);
    }
} //# sourceMappingURL=pinch.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/rotate.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "RotateRecognizer": (()=>RotateRecognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
;
;
;
const EVENT_NAMES = [
    '',
    'start',
    'move',
    'end',
    'cancel'
];
class RotateRecognizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AttrRecognizer"] {
    constructor(options = {}){
        super({
            enable: true,
            event: 'rotate',
            threshold: 0,
            pointers: 2,
            ...options
        });
    }
    getTouchAction() {
        return [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_NONE"]
        ];
    }
    getEventNames() {
        return EVENT_NAMES.map((suffix)=>this.options.event + suffix);
    }
    attrTest(input) {
        return super.attrTest(input) && (Math.abs(input.rotation) > this.options.threshold || Boolean(this.state & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Began));
    }
} //# sourceMappingURL=rotate.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/press.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/* global setTimeout, clearTimeout */ __turbopack_esm__({
    "PressRecognizer": (()=>PressRecognizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
;
;
;
;
const EVENT_NAMES = [
    '',
    'up'
];
class PressRecognizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Recognizer"] {
    constructor(options = {}){
        super({
            enable: true,
            event: 'press',
            pointers: 1,
            time: 251,
            threshold: 9,
            ...options
        });
        this._timer = null;
        this._input = null;
    }
    getTouchAction() {
        return [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2d$Consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TOUCH_ACTION_AUTO"]
        ];
    }
    getEventNames() {
        return EVENT_NAMES.map((suffix)=>this.options.event + suffix);
    }
    process(input) {
        const { options } = this;
        const validPointers = input.pointers.length === options.pointers;
        const validMovement = input.distance < options.threshold;
        const validTime = input.deltaTime > options.time;
        this._input = input;
        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || input.eventType & (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Cancel) && !validTime) {
            this.reset();
        } else if (input.eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].Start) {
            this.reset();
            this._timer = setTimeout(()=>{
                this.state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized;
                this.tryEmit();
            }, options.time);
        } else if (input.eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized;
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Failed;
    }
    reset() {
        clearTimeout(this._timer);
    }
    emit(input) {
        if (this.state !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RecognizerState"].Recognized) {
            return;
        }
        if (input && input.eventType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InputEvent"].End) {
            this.manager.emit(`${this.options.event}up`, input);
        } else {
            this._input.timeStamp = Date.now();
            this.manager.emit(this.options.event, this._input);
        }
    }
} //# sourceMappingURL=press.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2d$consts$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2d$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$input$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/input/input.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$touchaction$2f$touchaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$inputs$2f$pointerevent$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/inputs/pointerevent.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizer$2f$recognizer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$attribute$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$tap$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/tap.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$swipe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/swipe.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pinch$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pinch.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$rotate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/rotate.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$press$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/press.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/mjolnir.js/dist/inputs/input.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "Input": (()=>Input)
});
class Input {
    constructor(element, callback, options){
        this.element = element;
        this.callback = callback;
        this.options = options;
    }
} //# sourceMappingURL=input.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/utils/globals.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Purpose: include this in your module to avoids adding dependencies on
// micro modules like 'global'
/* global window, global, document, navigator */ __turbopack_esm__({
    "document": (()=>document_),
    "global": (()=>global_),
    "userAgent": (()=>userAgent),
    "window": (()=>window_)
});
const userAgent = typeof navigator !== 'undefined' && navigator.userAgent ? navigator.userAgent.toLowerCase() : '';
const window_ = typeof window !== 'undefined' ? window : global;
const global_ = typeof global !== 'undefined' ? global : window;
const document_ = typeof document !== 'undefined' ? document : {};
;
 //# sourceMappingURL=globals.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/inputs/wheel-input.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "WheelInput": (()=>WheelInput)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/input.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$utils$2f$globals$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/utils/globals.js [app-ssr] (ecmascript)");
;
;
const firefox = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$utils$2f$globals$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["userAgent"].indexOf('firefox') !== -1;
// Constants for normalizing input delta
const WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;
const WHEEL_DELTA_PER_LINE = 40;
// Slow down zoom if shift key is held for more precise zooming
const SHIFT_MULTIPLIER = 0.25;
class WheelInput extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Input"] {
    constructor(element, callback, options){
        super(element, callback, {
            enable: true,
            ...options
        });
        /* eslint-disable complexity, max-statements */ this.handleEvent = (event)=>{
            if (!this.options.enable) {
                return;
            }
            let value = event.deltaY;
            if (globalThis.WheelEvent) {
                // Firefox doubles the values on retina screens...
                if (firefox && event.deltaMode === globalThis.WheelEvent.DOM_DELTA_PIXEL) {
                    value /= globalThis.devicePixelRatio;
                }
                if (event.deltaMode === globalThis.WheelEvent.DOM_DELTA_LINE) {
                    value *= WHEEL_DELTA_PER_LINE;
                }
            }
            if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {
                // This one is definitely a mouse wheel event.
                // Normalize this value to match trackpad.
                value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);
            }
            if (event.shiftKey && value) {
                value = value * SHIFT_MULTIPLIER;
            }
            this.callback({
                type: 'wheel',
                center: {
                    x: event.clientX,
                    y: event.clientY
                },
                delta: -value,
                srcEvent: event,
                pointerType: 'mouse',
                target: event.target
            });
        };
        element.addEventListener('wheel', this.handleEvent, {
            passive: false
        });
    }
    destroy() {
        this.element.removeEventListener('wheel', this.handleEvent);
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        if (eventType === 'wheel') {
            this.options.enable = enabled;
        }
    }
} //# sourceMappingURL=wheel-input.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/inputs/move-input.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "MoveInput": (()=>MoveInput)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/input.js [app-ssr] (ecmascript)");
;
const MOUSE_EVENTS = [
    'mousedown',
    'mousemove',
    'mouseup',
    'mouseover',
    'mouseout',
    'mouseleave'
];
class MoveInput extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Input"] {
    constructor(element, callback, options){
        super(element, callback, {
            enable: true,
            ...options
        });
        this.handleEvent = (event)=>{
            this.handleOverEvent(event);
            this.handleOutEvent(event);
            this.handleEnterEvent(event);
            this.handleLeaveEvent(event);
            this.handleMoveEvent(event);
        };
        this.pressed = false;
        const { enable } = this.options;
        this.enableMoveEvent = enable;
        this.enableLeaveEvent = enable;
        this.enableEnterEvent = enable;
        this.enableOutEvent = enable;
        this.enableOverEvent = enable;
        MOUSE_EVENTS.forEach((event)=>element.addEventListener(event, this.handleEvent));
    }
    destroy() {
        MOUSE_EVENTS.forEach((event)=>this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        switch(eventType){
            case 'pointermove':
                this.enableMoveEvent = enabled;
                break;
            case 'pointerover':
                this.enableOverEvent = enabled;
                break;
            case 'pointerout':
                this.enableOutEvent = enabled;
                break;
            case 'pointerenter':
                this.enableEnterEvent = enabled;
                break;
            case 'pointerleave':
                this.enableLeaveEvent = enabled;
                break;
            default:
        }
    }
    handleOverEvent(event) {
        if (this.enableOverEvent && event.type === 'mouseover') {
            this._emit('pointerover', event);
        }
    }
    handleOutEvent(event) {
        if (this.enableOutEvent && event.type === 'mouseout') {
            this._emit('pointerout', event);
        }
    }
    handleEnterEvent(event) {
        if (this.enableEnterEvent && event.type === 'mouseenter') {
            this._emit('pointerenter', event);
        }
    }
    handleLeaveEvent(event) {
        if (this.enableLeaveEvent && event.type === 'mouseleave') {
            this._emit('pointerleave', event);
        }
    }
    handleMoveEvent(event) {
        if (this.enableMoveEvent) {
            switch(event.type){
                case 'mousedown':
                    if (event.button >= 0) {
                        // Button is down
                        this.pressed = true;
                    }
                    break;
                case 'mousemove':
                    // Move events use `bottons` to track the button being pressed
                    if (event.buttons === 0) {
                        // Button is not down
                        this.pressed = false;
                    }
                    if (!this.pressed) {
                        // Drag events are emitted by hammer already
                        // we just need to emit the move event on hover
                        this._emit('pointermove', event);
                    }
                    break;
                case 'mouseup':
                    this.pressed = false;
                    break;
                default:
            }
        }
    }
    _emit(type, event) {
        this.callback({
            type,
            center: {
                x: event.clientX,
                y: event.clientY
            },
            srcEvent: event,
            pointerType: 'mouse',
            target: event.target
        });
    }
} //# sourceMappingURL=move-input.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/inputs/key-input.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "KeyInput": (()=>KeyInput)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/input.js [app-ssr] (ecmascript)");
;
const KEY_EVENTS = [
    'keydown',
    'keyup'
];
class KeyInput extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Input"] {
    constructor(element, callback, options){
        super(element, callback, {
            enable: true,
            tabIndex: 0,
            ...options
        });
        this.handleEvent = (event)=>{
            // Ignore if focused on text input
            const targetElement = event.target || event.srcElement;
            if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {
                return;
            }
            if (this.enableDownEvent && event.type === 'keydown') {
                this.callback({
                    type: 'keydown',
                    srcEvent: event,
                    key: event.key,
                    target: event.target
                });
            }
            if (this.enableUpEvent && event.type === 'keyup') {
                this.callback({
                    type: 'keyup',
                    srcEvent: event,
                    key: event.key,
                    target: event.target
                });
            }
        };
        this.enableDownEvent = this.options.enable;
        this.enableUpEvent = this.options.enable;
        element.tabIndex = this.options.tabIndex;
        element.style.outline = 'none';
        KEY_EVENTS.forEach((event)=>element.addEventListener(event, this.handleEvent));
    }
    destroy() {
        KEY_EVENTS.forEach((event)=>this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        if (eventType === 'keydown') {
            this.enableDownEvent = enabled;
        }
        if (eventType === 'keyup') {
            this.enableUpEvent = enabled;
        }
    }
} //# sourceMappingURL=key-input.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/inputs/contextmenu-input.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "ContextmenuInput": (()=>ContextmenuInput)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/input.js [app-ssr] (ecmascript)");
;
class ContextmenuInput extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Input"] {
    constructor(element, callback, options){
        super(element, callback, options);
        this.handleEvent = (event)=>{
            if (!this.options.enable) {
                return;
            }
            this.callback({
                type: 'contextmenu',
                center: {
                    x: event.clientX,
                    y: event.clientY
                },
                srcEvent: event,
                pointerType: 'mouse',
                target: event.target
            });
        };
        element.addEventListener('contextmenu', this.handleEvent);
    }
    destroy() {
        this.element.removeEventListener('contextmenu', this.handleEvent);
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        if (eventType === 'contextmenu') {
            this.options.enable = enabled;
        }
    }
} //# sourceMappingURL=contextmenu-input.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/utils/event-utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* Constants */ __turbopack_esm__({
    "getOffsetPosition": (()=>getOffsetPosition),
    "whichButtons": (()=>whichButtons)
});
const DOWN_EVENT = 1;
const MOVE_EVENT = 2;
const UP_EVENT = 4;
const MOUSE_EVENTS = {
    pointerdown: DOWN_EVENT,
    pointermove: MOVE_EVENT,
    pointerup: UP_EVENT,
    mousedown: DOWN_EVENT,
    mousemove: MOVE_EVENT,
    mouseup: UP_EVENT
};
// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
const MOUSE_EVENT_BUTTON_LEFT = 0;
const MOUSE_EVENT_BUTTON_MIDDLE = 1;
const MOUSE_EVENT_BUTTON_RIGHT = 2;
// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons
const MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;
const MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;
const MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;
function whichButtons(event) {
    const eventType = MOUSE_EVENTS[event.srcEvent.type];
    if (!eventType) {
        // Not a mouse evet
        return null;
    }
    const { buttons, button } = event.srcEvent;
    let leftButton = false;
    let middleButton = false;
    let rightButton = false;
    if (eventType === MOVE_EVENT) {
        leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);
        middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);
        rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);
    } else {
        leftButton = button === MOUSE_EVENT_BUTTON_LEFT;
        middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;
        rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;
    }
    return {
        leftButton,
        middleButton,
        rightButton
    };
}
function getOffsetPosition(event, rootElement) {
    const center = event.center;
    // `center` is a hammer.js event property
    if (!center) {
        // Not a gestural event
        return null;
    }
    const rect = rootElement.getBoundingClientRect();
    // Fix scale for map affected by a CSS transform.
    // See https://stackoverflow.com/a/26893663/3528533
    const scaleX = rect.width / rootElement.offsetWidth || 1;
    const scaleY = rect.height / rootElement.offsetHeight || 1;
    // Calculate center relative to the root element
    const offsetCenter = {
        x: (center.x - rect.left - rootElement.clientLeft) / scaleX,
        y: (center.y - rect.top - rootElement.clientTop) / scaleY
    };
    return {
        center,
        offsetCenter
    };
} //# sourceMappingURL=event-utils.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/utils/event-registrar.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "EventRegistrar": (()=>EventRegistrar)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$utils$2f$event$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/utils/event-utils.js [app-ssr] (ecmascript)");
;
const DEFAULT_OPTIONS = {
    srcElement: 'root',
    priority: 0
};
class EventRegistrar {
    constructor(eventManager, recognizerName){
        /**
         * Handles hammerjs event
         */ this.handleEvent = (event)=>{
            if (this.isEmpty()) {
                return;
            }
            const mjolnirEvent = this._normalizeEvent(event);
            let target = event.srcEvent.target;
            while(target && target !== mjolnirEvent.rootElement){
                this._emit(mjolnirEvent, target);
                if (mjolnirEvent.handled) {
                    return;
                }
                target = target.parentNode;
            }
            this._emit(mjolnirEvent, 'root');
        };
        this.eventManager = eventManager;
        this.recognizerName = recognizerName;
        this.handlers = [];
        // Element -> handler map
        this.handlersByElement = new Map();
        this._active = false;
    }
    // Returns true if there are no non-passive handlers
    isEmpty() {
        return !this._active;
    }
    add(type, handler, options, once = false, passive = false) {
        const { handlers, handlersByElement } = this;
        const opts = {
            ...DEFAULT_OPTIONS,
            ...options
        };
        let entries = handlersByElement.get(opts.srcElement);
        if (!entries) {
            entries = [];
            handlersByElement.set(opts.srcElement, entries);
        }
        const entry = {
            type,
            handler,
            srcElement: opts.srcElement,
            priority: opts.priority
        };
        if (once) {
            entry.once = true;
        }
        if (passive) {
            entry.passive = true;
        }
        handlers.push(entry);
        this._active = this._active || !entry.passive;
        // Sort handlers by descending priority
        // Handlers with the same priority are excuted in the order of registration
        let insertPosition = entries.length - 1;
        while(insertPosition >= 0){
            if (entries[insertPosition].priority >= entry.priority) {
                break;
            }
            insertPosition--;
        }
        entries.splice(insertPosition + 1, 0, entry);
    }
    remove(type, handler) {
        const { handlers, handlersByElement } = this;
        for(let i = handlers.length - 1; i >= 0; i--){
            const entry = handlers[i];
            if (entry.type === type && entry.handler === handler) {
                handlers.splice(i, 1);
                const entries = handlersByElement.get(entry.srcElement);
                entries.splice(entries.indexOf(entry), 1);
                if (entries.length === 0) {
                    handlersByElement.delete(entry.srcElement);
                }
            }
        }
        this._active = handlers.some((entry)=>!entry.passive);
    }
    /**
     * Invoke handlers on a particular element
     */ _emit(event, srcElement) {
        const entries = this.handlersByElement.get(srcElement);
        if (entries) {
            let immediatePropagationStopped = false;
            // Prevents the current event from bubbling up
            const stopPropagation = ()=>{
                event.handled = true;
            };
            // Prevent any remaining listeners from being called
            const stopImmediatePropagation = ()=>{
                event.handled = true;
                immediatePropagationStopped = true;
            };
            const entriesToRemove = [];
            for(let i = 0; i < entries.length; i++){
                const { type, handler, once } = entries[i];
                // @ts-ignore
                handler({
                    ...event,
                    type,
                    stopPropagation,
                    stopImmediatePropagation
                });
                if (once) {
                    entriesToRemove.push(entries[i]);
                }
                if (immediatePropagationStopped) {
                    break;
                }
            }
            for(let i = 0; i < entriesToRemove.length; i++){
                const { type, handler } = entriesToRemove[i];
                this.remove(type, handler);
            }
        }
    }
    /**
     * Normalizes hammerjs and custom events to have predictable fields.
     */ _normalizeEvent(event) {
        const rootElement = this.eventManager.getElement();
        // @ts-ignore
        return {
            ...event,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$utils$2f$event$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["whichButtons"])(event),
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$utils$2f$event$2d$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOffsetPosition"])(event, rootElement),
            preventDefault: ()=>{
                event.srcEvent.preventDefault();
            },
            stopImmediatePropagation: null,
            stopPropagation: null,
            handled: false,
            rootElement
        };
    }
} //# sourceMappingURL=event-registrar.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/event-manager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({
    "EventManager": (()=>EventManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$wheel$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/wheel-input.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$move$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/move-input.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$key$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/key-input.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$contextmenu$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/inputs/contextmenu-input.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$utils$2f$event$2d$registrar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/utils/event-registrar.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/manager.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
function normalizeRecognizer(item) {
    if ('recognizer' in item) {
        return item;
    }
    let recognizer;
    const itemArray = Array.isArray(item) ? [
        ...item
    ] : [
        item
    ];
    if (typeof itemArray[0] === 'function') {
        // Backward compatibility: v2 / hammerjs style
        const RecognizerType = itemArray.shift();
        const options = itemArray.shift() || {};
        recognizer = new RecognizerType(options);
    } else {
        recognizer = itemArray.shift();
    }
    return {
        recognizer,
        recognizeWith: typeof itemArray[0] === 'string' ? [
            itemArray[0]
        ] : itemArray[0],
        requireFailure: typeof itemArray[1] === 'string' ? [
            itemArray[1]
        ] : itemArray[1]
    };
}
class EventManager {
    constructor(element = null, options = {}){
        /**
         * Handle basic events using the 'hammer.input' Hammer.js API:
         * Before running Recognizers, Hammer emits a 'hammer.input' event
         * with the basic event info. This function emits all basic events
         * aliased to the "class" of event received.
         * See constants.BASIC_EVENT_CLASSES basic event class definitions.
         */ this._onBasicInput = (event)=>{
            this.manager.emit(event.srcEvent.type, event);
        };
        /**
         * Handle events not supported by Hammer.js,
         * and pipe back out through same (Hammer) channel used by other events.
         */ this._onOtherEvent = (event)=>{
            // console.log('onotherevent', event.type, event)
            this.manager.emit(event.type, event);
        };
        this.options = {
            recognizers: [],
            events: {},
            touchAction: 'compute',
            tabIndex: 0,
            cssProps: {},
            ...options
        };
        this.events = new Map();
        this.element = element;
        if (!element) return;
        this.manager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Manager"](element, this.options);
        for (const item of this.options.recognizers){
            const { recognizer, recognizeWith, requireFailure } = normalizeRecognizer(item);
            this.manager.add(recognizer);
            if (recognizeWith) {
                recognizer.recognizeWith(recognizeWith);
            }
            if (requireFailure) {
                recognizer.requireFailure(requireFailure);
            }
        }
        this.manager.on('hammer.input', this._onBasicInput);
        // Handle events not handled by Hammer.js:
        // - mouse wheel
        // - pointer/touch/mouse move
        this.wheelInput = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$wheel$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WheelInput"](element, this._onOtherEvent, {
            enable: false
        });
        this.moveInput = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$move$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MoveInput"](element, this._onOtherEvent, {
            enable: false
        });
        this.keyInput = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$key$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KeyInput"](element, this._onOtherEvent, {
            enable: false,
            tabIndex: options.tabIndex
        });
        this.contextmenuInput = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$inputs$2f$contextmenu$2d$input$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextmenuInput"](element, this._onOtherEvent, {
            enable: false
        });
        // Register all passed events.
        this.on(this.options.events);
    }
    getElement() {
        return this.element;
    }
    // Tear down internal event management implementations.
    destroy() {
        // manager etc. cannot exist if there is no element
        if (!this.element) return;
        this.wheelInput.destroy();
        this.moveInput.destroy();
        this.keyInput.destroy();
        this.contextmenuInput.destroy();
        this.manager.destroy();
    }
    /** Register an event handler function to be called on `event` */ on(event, handler, opts) {
        this._addEventHandler(event, handler, opts, false);
    }
    once(event, handler, opts) {
        this._addEventHandler(event, handler, opts, true);
    }
    watch(event, handler, opts) {
        this._addEventHandler(event, handler, opts, false, true);
    }
    off(event, handler) {
        this._removeEventHandler(event, handler);
    }
    /*
     * Enable/disable recognizer for the given event
     */ _toggleRecognizer(name, enabled) {
        const { manager } = this;
        if (!manager) {
            return;
        }
        const recognizer = manager.get(name);
        if (recognizer) {
            recognizer.set({
                enable: enabled
            });
            manager.touchAction.update();
        }
        this.wheelInput?.enableEventType(name, enabled);
        this.moveInput?.enableEventType(name, enabled);
        this.keyInput?.enableEventType(name, enabled);
        this.contextmenuInput?.enableEventType(name, enabled);
    }
    /**
     * Process the event registration for a single event + handler.
     */ _addEventHandler(event, handler, opts, once, passive) {
        if (typeof event !== 'string') {
            // @ts-ignore
            opts = handler;
            // If `event` is a map, call `on()` for each entry.
            for (const [eventName, eventHandler] of Object.entries(event)){
                this._addEventHandler(eventName, eventHandler, opts, once, passive);
            }
            return;
        }
        const { manager, events } = this;
        if (!manager) return;
        let eventRegistrar = events.get(event);
        if (!eventRegistrar) {
            // Enable recognizer for this event.
            const recognizerName = this._getRecognizerName(event) || event;
            eventRegistrar = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$utils$2f$event$2d$registrar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventRegistrar"](this, recognizerName);
            events.set(event, eventRegistrar);
            // Listen to the event
            if (manager) {
                manager.on(event, eventRegistrar.handleEvent);
            }
        }
        eventRegistrar.add(event, handler, opts, once, passive);
        if (!eventRegistrar.isEmpty()) {
            this._toggleRecognizer(eventRegistrar.recognizerName, true);
        }
    }
    /**
     * Process the event deregistration for a single event + handler.
     */ _removeEventHandler(event, handler) {
        if (typeof event !== 'string') {
            // If `event` is a map, call `off()` for each entry.
            for (const [eventName, eventHandler] of Object.entries(event)){
                this._removeEventHandler(eventName, eventHandler);
            }
            return;
        }
        const { events } = this;
        const eventRegistrar = events.get(event);
        if (!eventRegistrar) {
            return;
        }
        eventRegistrar.remove(event, handler);
        if (eventRegistrar.isEmpty()) {
            const { recognizerName } = eventRegistrar;
            // Disable recognizer if no more handlers are attached to its events
            let isRecognizerUsed = false;
            for (const eh of events.values()){
                if (eh.recognizerName === recognizerName && !eh.isEmpty()) {
                    isRecognizerUsed = true;
                    break;
                }
            }
            if (!isRecognizerUsed) {
                this._toggleRecognizer(recognizerName, false);
            }
        }
    }
    _getRecognizerName(event) {
        return this.manager.recognizers.find((recognizer)=>{
            return recognizer.getEventNames().includes(event);
        })?.options.event;
    }
} //# sourceMappingURL=event-manager.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// mjolnir.js
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_esm__({});
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/mjolnir.js/dist/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$event$2d$manager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/event-manager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js [app-ssr] (ecmascript) <export PanRecognizer as Pan>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Pan": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PanRecognizer"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pan$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pinch.js [app-ssr] (ecmascript) <export PinchRecognizer as Pinch>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Pinch": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pinch$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PinchRecognizer"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$pinch$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/pinch.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/tap.js [app-ssr] (ecmascript) <export TapRecognizer as Tap>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Tap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$tap$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TapRecognizer"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mjolnir$2e$js$2f$dist$2f$hammerjs$2f$recognizers$2f$tap$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mjolnir.js/dist/hammerjs/recognizers/tap.js [app-ssr] (ecmascript)");
}}),

};

//# sourceMappingURL=node_modules_mjolnir_js_dist_df5f9a._.js.map