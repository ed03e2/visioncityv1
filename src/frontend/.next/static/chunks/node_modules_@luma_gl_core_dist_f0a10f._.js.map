{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"log.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/utils/log.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {Log} from '@probe.gl/log';\r\n\r\n/** Global log instance */\r\nexport const log: Log = new Log({id: 'luma.gl'});\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAEpC,OAAO,EAAC,GAAG,EAAC,MAAM,eAAe,CAAC;;AAG3B,MAAM,GAAG,GAAQ,2JAAI,MAAG,CAAC;IAAC,EAAE,EAAE,SAAS;AAAA,CAAC,CAAC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"file":"uid.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/utils/uid.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nconst uidCounters: Record<string, number> = {};\r\n\r\n/**\r\n * Returns a UID.\r\n * @param id= - Identifier base name\r\n * @return uid\r\n **/\r\nexport function uid(id: string = 'id'): string {\r\n  uidCounters[id] = uidCounters[id] || 1;\r\n  const count = uidCounters[id]++;\r\n  return `${id}-${count}`;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAEpC,MAAM,WAAW,GAA2B,CAAA,CAAE,CAAC;AAOzC,SAAU,GAAG,CAAC,KAAa,IAAI;IACnC,WAAW,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,KAAK,GAAG,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC;IAChC,OAAO,GAAG,EAAE,CAAA,CAAA,EAAI,KAAK,EAAE,CAAC;AAC1B,CAAC","ignoreList":[0]}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"file":"stats-manager.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/utils/stats-manager.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {Stats} from '@probe.gl/stats';\r\n\r\n/**\r\n * Helper class managing a collection of probe.gl stats objects\r\n */\r\nexport class StatsManager {\r\n  stats = new Map();\r\n\r\n  getStats(name: string): Stats {\r\n    return this.get(name);\r\n  }\r\n\r\n  get(name: string): Stats {\r\n    if (!this.stats.has(name)) {\r\n      this.stats.set(name, new Stats({id: name}));\r\n    }\r\n\r\n    return this.stats.get(name);\r\n  }\r\n}\r\n\r\n/** Global stats for all luma.gl devices */\r\nexport const lumaStats: StatsManager = new StatsManager();\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;;;AAEpC,OAAO,EAAC,KAAK,EAAC,MAAM,iBAAiB,CAAC;;AAKhC,MAAO,YAAY;IACvB,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IAElB,QAAQ,CAAC,IAAY,EAAA;QACnB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED,GAAG,CAAC,IAAY,EAAA;QACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,0MAAI,QAAK,CAAC;gBAAC,EAAE,EAAE,IAAI;YAAA,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;CACF;AAGM,MAAM,SAAS,GAAiB,IAAI,YAAY,EAAE,CAAC","ignoreList":[0]}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"file":"texture-format-table.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/texture-format-table.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {TextureFormat} from './texture-formats';\r\nimport {TextureFeature} from './texture-features';\r\nimport {TextureFormatInfo} from './texture-format-info';\r\n\r\n/* eslint-disable camelcase */\r\n\r\n// Define local device feature strings to optimize minification\r\nconst texture_compression_bc: TextureFeature = 'texture-compression-bc';\r\nconst texture_compression_astc: TextureFeature = 'texture-compression-astc';\r\nconst texture_compression_etc2: TextureFeature = 'texture-compression-etc2';\r\nconst texture_compression_etc1_webgl: TextureFeature = 'texture-compression-etc1-webgl';\r\nconst texture_compression_pvrtc_webgl: TextureFeature = 'texture-compression-pvrtc-webgl';\r\nconst texture_compression_atc_webgl: TextureFeature = 'texture-compression-atc-webgl';\r\n\r\nconst float32_renderable: TextureFeature = 'float32-renderable-webgl';\r\nconst float16_renderable: TextureFeature = 'float16-renderable-webgl';\r\nconst rgb9e5ufloat_renderable: TextureFeature = 'rgb9e5ufloat-renderable-webgl';\r\nconst snorm8_renderable: TextureFeature = 'snorm8-renderable-webgl';\r\nconst norm16_renderable: TextureFeature = 'norm16-renderable-webgl';\r\nconst snorm16_renderable: TextureFeature = 'snorm16-renderable-webgl';\r\n\r\nconst float32_filterable: TextureFeature = 'float32-filterable';\r\nconst float16_filterable: TextureFeature = 'float16-filterable-webgl';\r\n\r\n/** https://www.w3.org/TR/webgpu/#texture-format-caps */\r\n\r\n/** Internal type representing texture capabilities */\r\ntype TextureFormatDefinition = Partial<TextureFormatInfo> & {\r\n  /** for compressed texture formats */\r\n  f?: TextureFeature;\r\n  /** renderable if feature is present. false means the spec does not support this format */\r\n  render?: TextureFeature | false;\r\n  /** filterable if feature is present. false means the spec does not support this format */\r\n  filter?: TextureFeature | false;\r\n  blend?: TextureFeature | false;\r\n  store?: TextureFeature | false;\r\n\r\n  /** (bytes per pixel), for memory usage calculations. */\r\n  b?: number;\r\n  /** channels */\r\n  c?: number;\r\n  bpp?: number;\r\n  /** packed */\r\n  p?: number;\r\n\r\n  /** If not supported on WebGPU */\r\n  wgpu?: false;\r\n};\r\n\r\nexport function getTextureFormatDefinition(format: TextureFormat): TextureFormatDefinition {\r\n  const info = TEXTURE_FORMAT_TABLE[format];\r\n  if (!info) {\r\n    throw new Error(`Unsupported texture format ${format}`);\r\n  }\r\n  return info;\r\n}\r\n\r\nexport function getTextureFormatTable(): Readonly<Record<TextureFormat, TextureFormatDefinition>> {\r\n  return TEXTURE_FORMAT_TABLE;\r\n}\r\n\r\n// prettier-ignore\r\nconst TEXTURE_FORMAT_TABLE: Readonly<Record<TextureFormat, TextureFormatDefinition>> = {\r\n  // 8-bit formats\r\n  'r8unorm': {},\r\n  'r8snorm': {render: snorm8_renderable},\r\n  'r8uint': {},\r\n  'r8sint': {},\r\n\r\n  // 16-bit formats\r\n  'rg8unorm': {},\r\n  'rg8snorm': {render: snorm8_renderable},\r\n  'rg8uint': {},\r\n  'rg8sint': {},\r\n\r\n  'r16uint': {},\r\n  'r16sint': {},\r\n  'r16float': {render: float16_renderable, filter: 'float16-filterable-webgl'},\r\n  'r16unorm-webgl': {f: norm16_renderable},\r\n  'r16snorm-webgl': {f: snorm16_renderable},\r\n\r\n  // Packed 16-bit formats\r\n  'rgba4unorm-webgl': {channels: 'rgba', bitsPerChannel: [4, 4, 4, 4], packed: true},\r\n  'rgb565unorm-webgl': {channels: 'rgb', bitsPerChannel: [5, 6, 5, 0], packed: true},\r\n  'rgb5a1unorm-webgl': {channels: 'rgba', bitsPerChannel: [5, 5, 5, 1], packed: true},\r\n\r\n  // 24-bit formats\r\n  'rgb8unorm-webgl': {},\r\n  'rgb8snorm-webgl': {},\r\n\r\n  // 32-bit formats  \r\n  'rgba8unorm': {},\r\n  'rgba8unorm-srgb': {},\r\n  'rgba8snorm': {render: snorm8_renderable},\r\n  'rgba8uint': {},\r\n  'rgba8sint': {},\r\n\r\n  // 32-bit, reverse colors, webgpu only\r\n  'bgra8unorm': {},\r\n  'bgra8unorm-srgb': {},\r\n\r\n  'rg16uint': {},\r\n  'rg16sint': {},\r\n  'rg16float': {render: float16_renderable, filter: float16_filterable},\r\n  'rg16unorm-webgl': {render: norm16_renderable},\r\n  'rg16snorm-webgl': {render: snorm16_renderable},\r\n\r\n  'r32uint': {},\r\n  'r32sint': {},\r\n  'r32float': {render: float32_renderable, filter: float32_filterable},\r\n\r\n  // Packed 32 bit formats\r\n  'rgb9e5ufloat': {channels: 'rgb', packed: true, render: rgb9e5ufloat_renderable}, // , filter: true},\r\n  'rg11b10ufloat': {channels: 'rgb', bitsPerChannel: [11, 11, 10, 0], packed: true, p: 1,render: float32_renderable},\r\n  'rgb10a2unorm': {channels: 'rgba',  bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1},\r\n  'rgb10a2uint-webgl': {channels: 'rgba', bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1, wgpu: false},\r\n\r\n  // 48-bit formats\r\n  'rgb16unorm-webgl': {f: norm16_renderable}, // rgb not renderable\r\n  'rgb16snorm-webgl': {f: norm16_renderable}, // rgb not renderable\r\n\r\n  // 64-bit formats\r\n  'rg32uint': {},\r\n  'rg32sint': {},\r\n  'rg32float': {render: false, filter: float32_filterable},\r\n  'rgba16uint': {},\r\n  'rgba16sint': {},\r\n  'rgba16float': {render: float16_renderable, filter: float16_filterable},\r\n  'rgba16unorm-webgl': {render: norm16_renderable},\r\n  'rgba16snorm-webgl': {render: snorm16_renderable},\r\n\r\n  // 96-bit formats (deprecated!)\r\n  'rgb32float-webgl': {render: float32_renderable, filter: float32_filterable},\r\n  \r\n  // 128-bit formats\r\n  'rgba32uint': {},\r\n  'rgba32sint': {},\r\n  'rgba32float': {render: float32_renderable, filter: float32_filterable},\r\n\r\n  // Depth/stencil\r\n  \r\n  // Depth and stencil formats\r\n  stencil8: {attachment: 'stencil', bitsPerChannel: [8, 0, 0, 0], dataType: 'uint8'},\r\n  'depth16unorm': {attachment: 'depth',  bitsPerChannel: [16, 0, 0, 0], dataType: 'uint16'},\r\n  'depth24plus': {attachment: 'depth', bitsPerChannel: [24, 0, 0, 0], dataType: 'uint32'},\r\n  'depth32float': {attachment: 'depth', bitsPerChannel: [32, 0, 0, 0], dataType: 'float32'},\r\n  // The depth component of the \"depth24plus\" and \"depth24plus-stencil8\" formats may be implemented as either a 24-bit depth value or a \"depth32float\" value.\r\n  'depth24plus-stencil8': {attachment: 'depth-stencil', bitsPerChannel: [24, 8, 0, 0], packed: true},\r\n  // \"depth32float-stencil8\" feature\r\n  'depth32float-stencil8': {attachment: 'depth-stencil', bitsPerChannel: [32, 8, 0, 0], packed: true},\r\n\r\n  // BC compressed formats: check device.features.has(\"texture-compression-bc\");\r\n\r\n  'bc1-rgb-unorm-webgl': {f: texture_compression_bc},\r\n  'bc1-rgb-unorm-srgb-webgl': {f: texture_compression_bc},\r\n\r\n  'bc1-rgba-unorm': {f: texture_compression_bc},\r\n  'bc1-rgba-unorm-srgb': {f: texture_compression_bc},\r\n  'bc2-rgba-unorm': {f: texture_compression_bc},\r\n  'bc2-rgba-unorm-srgb': {f: texture_compression_bc},\r\n  'bc3-rgba-unorm': {f: texture_compression_bc},\r\n  'bc3-rgba-unorm-srgb': {f: texture_compression_bc},\r\n  'bc4-r-unorm': {f: texture_compression_bc},\r\n  'bc4-r-snorm': {f: texture_compression_bc},\r\n  'bc5-rg-unorm': {f: texture_compression_bc},\r\n  'bc5-rg-snorm': {f: texture_compression_bc},\r\n  'bc6h-rgb-ufloat': {f: texture_compression_bc},\r\n  'bc6h-rgb-float': {f: texture_compression_bc},\r\n  'bc7-rgba-unorm': {f: texture_compression_bc},\r\n  'bc7-rgba-unorm-srgb': {f: texture_compression_bc},\r\n\r\n  // WEBGL_compressed_texture_etc: device.features.has(\"texture-compression-etc2\")\r\n  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression\r\n\r\n  'etc2-rgb8unorm': {f: texture_compression_etc2},\r\n  'etc2-rgb8unorm-srgb': {f: texture_compression_etc2},\r\n  'etc2-rgb8a1unorm': {f: texture_compression_etc2},\r\n  'etc2-rgb8a1unorm-srgb': {f: texture_compression_etc2},\r\n  'etc2-rgba8unorm': {f: texture_compression_etc2},\r\n  'etc2-rgba8unorm-srgb': {f: texture_compression_etc2},\r\n\r\n  'eac-r11unorm': {f: texture_compression_etc2},\r\n  'eac-r11snorm': {f: texture_compression_etc2},\r\n  'eac-rg11unorm': {f: texture_compression_etc2},\r\n  'eac-rg11snorm': {f: texture_compression_etc2},\r\n\r\n  // X_ASTC compressed formats: device.features.has(\"texture-compression-astc\")\r\n\r\n  'astc-4x4-unorm': {f: texture_compression_astc},\r\n  'astc-4x4-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-5x4-unorm': {f: texture_compression_astc},\r\n  'astc-5x4-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-5x5-unorm': {f: texture_compression_astc},\r\n  'astc-5x5-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-6x5-unorm': {f: texture_compression_astc},\r\n  'astc-6x5-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-6x6-unorm': {f: texture_compression_astc},\r\n  'astc-6x6-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-8x5-unorm': {f: texture_compression_astc},\r\n  'astc-8x5-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-8x6-unorm': {f: texture_compression_astc},\r\n  'astc-8x6-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-8x8-unorm': {f: texture_compression_astc},\r\n  'astc-8x8-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-10x5-unorm': {f: texture_compression_astc},\r\n  'astc-10x5-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-10x6-unorm': {f: texture_compression_astc},\r\n  'astc-10x6-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-10x8-unorm': {f: texture_compression_astc},\r\n  'astc-10x8-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-10x10-unorm': {f: texture_compression_astc},\r\n  'astc-10x10-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-12x10-unorm': {f: texture_compression_astc},\r\n  'astc-12x10-unorm-srgb': {f: texture_compression_astc},\r\n  'astc-12x12-unorm': {f: texture_compression_astc},\r\n  'astc-12x12-unorm-srgb': {f: texture_compression_astc},\r\n\r\n  // WEBGL_compressed_texture_pvrtc\r\n\r\n  'pvrtc-rgb4unorm-webgl': {f: texture_compression_pvrtc_webgl},\r\n  'pvrtc-rgba4unorm-webgl': {f: texture_compression_pvrtc_webgl},\r\n  'pvrtc-rbg2unorm-webgl': {f: texture_compression_pvrtc_webgl},\r\n  'pvrtc-rgba2unorm-webgl': {f: texture_compression_pvrtc_webgl},\r\n\r\n  // WEBGL_compressed_texture_etc1\r\n\r\n  'etc1-rbg-unorm-webgl': {f: texture_compression_etc1_webgl},\r\n\r\n  // WEBGL_compressed_texture_atc\r\n\r\n  'atc-rgb-unorm-webgl': {f: texture_compression_atc_webgl},\r\n  'atc-rgba-unorm-webgl': {f: texture_compression_atc_webgl},\r\n  'atc-rgbai-unorm-webgl': {f: texture_compression_atc_webgl}\r\n};\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"file":"decode-data-type.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/decode-data-type.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {DataType, NormalizedDataType} from './vertex-formats';\r\n\r\nexport type DecodedVertexType = {\r\n  /** WebGPU data type */\r\n  dataType: DataType;\r\n  /** Length in bytes of the data for one vertex */\r\n  byteLength: number;\r\n  /** Whether this is for integer or float vert */\r\n  integer: boolean;\r\n  /** Whether this data type is signed */\r\n  signed: boolean;\r\n  /** Whether this is a normalized integer (that must be used as float) */\r\n  normalized: boolean;\r\n};\r\n\r\n/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */\r\nexport function decodeVertexType(type: NormalizedDataType): DecodedVertexType {\r\n  const dataType = TYPE_MAP[type];\r\n  const bytes = getDataTypeBytes(dataType);\r\n  const normalized: boolean = type.includes('norm');\r\n  const integer: boolean = !normalized && !type.startsWith('float');\r\n  const signed: boolean = type.startsWith('s');\r\n  return {\r\n    dataType: TYPE_MAP[type],\r\n    byteLength: bytes,\r\n    integer,\r\n    signed,\r\n    normalized\r\n  };\r\n}\r\n\r\nfunction getDataTypeBytes(type: DataType): number {\r\n  const bytes = TYPE_SIZES[type];\r\n  // assert(bytes);\r\n  return bytes;\r\n}\r\n\r\nconst TYPE_MAP: Record<NormalizedDataType, DataType> = {\r\n  uint8: 'uint8',\r\n  sint8: 'sint8',\r\n  unorm8: 'uint8',\r\n  snorm8: 'sint8',\r\n  uint16: 'uint16',\r\n  sint16: 'sint16',\r\n  unorm16: 'uint16',\r\n  snorm16: 'sint16',\r\n  float16: 'float16',\r\n  float32: 'float32',\r\n  uint32: 'uint32',\r\n  sint32: 'sint32'\r\n};\r\n\r\nconst TYPE_SIZES: Record<DataType, number> = {\r\n  uint8: 1,\r\n  sint8: 1,\r\n  uint16: 2,\r\n  sint16: 2,\r\n  float16: 2,\r\n  float32: 4,\r\n  uint32: 4,\r\n  sint32: 4\r\n};\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAiBpC,yFAAA,EAA2F;;;AACrF,SAAU,gBAAgB,CAAC,IAAwB;IACvD,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChC,MAAM,KAAK,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACzC,MAAM,UAAU,GAAY,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAClD,MAAM,OAAO,GAAY,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAClE,MAAM,MAAM,GAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC7C,OAAO;QACL,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC;QACxB,UAAU,EAAE,KAAK;QACjB,OAAO;QACP,MAAM;QACN,UAAU;KACX,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAc;IACtC,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/B,iBAAiB;IACjB,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,QAAQ,GAAyC;IACrD,KAAK,EAAE,OAAO;IACd,KAAK,EAAE,OAAO;IACd,MAAM,EAAE,OAAO;IACf,MAAM,EAAE,OAAO;IACf,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,QAAQ;IAChB,OAAO,EAAE,QAAQ;IACjB,OAAO,EAAE,QAAQ;IACjB,OAAO,EAAE,SAAS;IAClB,OAAO,EAAE,SAAS;IAClB,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,QAAQ;CACjB,CAAC;AAEF,MAAM,UAAU,GAA6B;IAC3C,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,MAAM,EAAE,CAAC;IACT,MAAM,EAAE,CAAC;IACT,OAAO,EAAE,CAAC;IACV,OAAO,EAAE,CAAC;IACV,MAAM,EAAE,CAAC;IACT,MAAM,EAAE,CAAC;CACV,CAAC","ignoreList":[0]}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 594, "column": 0}, "map": {"version":3,"file":"decode-texture-format.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/decode-texture-format.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {TextureFormat, CompressedTextureFormat} from './texture-formats';\r\nimport {VertexType} from './vertex-formats';\r\nimport {decodeVertexType} from './decode-data-type';\r\nimport {TextureFormatInfo} from './texture-format-info';\r\n\r\nimport {getTextureFormatDefinition} from './texture-format-table';\r\n\r\n// prettier-ignore\r\nconst COMPRESSED_TEXTURE_FORMAT_PREFIXES = [\r\n  'bc1', 'bc2', 'bc3', 'bc4', 'bc5', 'bc6', 'bc7', 'etc1', 'etc2', 'eac', 'atc', 'astc', 'pvrtc'\r\n];\r\n\r\nconst RGB_FORMAT_REGEX = /^(r|rg|rgb|rgba|bgra)([0-9]*)([a-z]*)(-srgb)?(-webgl)?$/;\r\n\r\n/**\r\n * Returns true if a texture format is GPU compressed\r\n */\r\nexport function isTextureFormatCompressed(\r\n  format: TextureFormat\r\n): format is CompressedTextureFormat {\r\n  return COMPRESSED_TEXTURE_FORMAT_PREFIXES.some(prefix => (format as string).startsWith(prefix));\r\n}\r\n\r\n/**\r\n * Decodes a texture format, returning e.g. attatchment type, components, byte length and flags (integer, signed, normalized)\r\n */\r\nexport function decodeTextureFormat(format: TextureFormat): TextureFormatInfo {\r\n  let formatInfo: TextureFormatInfo = decodeTextureFormatUsingTable(format);\r\n\r\n  if (isTextureFormatCompressed(format)) {\r\n    formatInfo.channels = 'rgb';\r\n    formatInfo.components = 3;\r\n    formatInfo.bytesPerPixel = 1;\r\n    formatInfo.srgb = false;\r\n    formatInfo.compressed = true;\r\n\r\n    const blockSize = getCompressedTextureBlockSize(format);\r\n    if (blockSize) {\r\n      formatInfo.blockWidth = blockSize.blockWidth;\r\n      formatInfo.blockHeight = blockSize.blockHeight;\r\n    }\r\n  }\r\n\r\n  // Fill in missing information that can be derived from the format string\r\n  const matches = RGB_FORMAT_REGEX.exec(format as string);\r\n  if (matches) {\r\n    const [, channels, length, type, srgb, suffix] = matches;\r\n    const dataType = `${type}${length}` as VertexType;\r\n    const decodedType = decodeVertexType(dataType);\r\n    const bits = decodedType.byteLength * 8;\r\n    const components = channels.length as 1 | 2 | 3 | 4;\r\n    const bitsPerChannel: [number, number, number, number] = [\r\n      bits,\r\n      components >= 2 ? bits : 0,\r\n      components >= 3 ? bits : 0,\r\n      components >= 4 ? bits : 0\r\n    ];\r\n\r\n    formatInfo = {\r\n      format,\r\n      attachment: formatInfo.attachment,\r\n      dataType: decodedType.dataType,\r\n      components,\r\n      channels: channels as 'r' | 'rg' | 'rgb' | 'rgba',\r\n      integer: decodedType.integer,\r\n      signed: decodedType.signed,\r\n      normalized: decodedType.normalized,\r\n      bitsPerChannel,\r\n      bytesPerPixel: decodedType.byteLength * channels.length,\r\n      packed: formatInfo.packed,\r\n      srgb: formatInfo.srgb\r\n    };\r\n\r\n    if (suffix === '-webgl') {\r\n      formatInfo.webgl = true;\r\n    }\r\n    // dataType - overwritten by decodedType\r\n    if (srgb === '-srgb') {\r\n      formatInfo.srgb = true;\r\n    }\r\n  }\r\n\r\n  if (format.endsWith('-webgl')) {\r\n    formatInfo.webgl = true;\r\n  }\r\n  if (format.endsWith('-srgb')) {\r\n    formatInfo.srgb = true;\r\n  }\r\n\r\n  return formatInfo;\r\n}\r\n\r\n/** Decode texture format info from the table */\r\nfunction decodeTextureFormatUsingTable(format: TextureFormat): TextureFormatInfo {\r\n  const info = getTextureFormatDefinition(format);\r\n\r\n  const bytesPerPixel = info.bytesPerPixel || 1;\r\n  const bitsPerChannel = info.bitsPerChannel || [8, 8, 8, 8];\r\n  delete info.bitsPerChannel;\r\n  delete info.bytesPerPixel;\r\n  delete info.f;\r\n  delete info.render;\r\n  delete info.filter;\r\n  delete info.blend;\r\n  delete info.store;\r\n\r\n  const formatInfo: TextureFormatInfo = {\r\n    ...info,\r\n    format,\r\n    attachment: info.attachment || 'color',\r\n    channels: info.channels || 'r',\r\n    components: (info.components || info.channels?.length || 1) as 1 | 2 | 3 | 4,\r\n    bytesPerPixel,\r\n    bitsPerChannel,\r\n    dataType: info.dataType || 'uint8',\r\n    srgb: info.srgb ?? false,\r\n    packed: info.packed ?? false,\r\n    webgl: info.webgl ?? false,\r\n    integer: info.integer ?? false,\r\n    signed: info.signed ?? false,\r\n    normalized: info.normalized ?? false,\r\n    compressed: info.compressed ?? false\r\n  };\r\n\r\n  return formatInfo;\r\n}\r\n\r\n/** Parses ASTC block widths from format string */\r\nfunction getCompressedTextureBlockSize(\r\n  format: CompressedTextureFormat\r\n): {blockWidth: number; blockHeight: number} | null {\r\n  const REGEX = /.*-(\\d+)x(\\d+)-.*/;\r\n  const matches = REGEX.exec(format as string);\r\n  if (matches) {\r\n    const [, blockWidth, blockHeight] = matches;\r\n    return {blockWidth: Number(blockWidth), blockHeight: Number(blockHeight)};\r\n  }\r\n  return null;\r\n}\r\n\r\n/*\r\n'r8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t},\r\n'r8snorm':\t{s: \"float\"}, // \t\t✓\t\t},\r\n'r8uint':\t{s: \"uint\"}, // \t✓\t✓\t\t},\r\n'r8sint':\t{s: \"sint\"}, // \t✓\t✓\t\t},\r\n'rg8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t},\r\n'rg8snorm':\t{s: \"float\"}, // \t\t✓\t\t},\r\n'rg8uint':\t{s: \"uint\"}, // \t✓\t✓\t\t},\r\n'rg8sint':\t{s: \"sint\"}, // \t✓\t✓\t\t},\r\n'rgba8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t✓},\r\n'rgba8unorm-srgb': {s: \"float\"}, // \t✓\t✓\t✓\t},\r\n'rgba8snorm':\t{s: \"float\"}, // \t\t✓\t\t✓},\r\n'rgba8uint':\t{s: \"uint\"}, // \t✓\t✓\t\t✓},\r\n'rgba8sint':\t{s: \"sint\"}, // \t✓\t✓\t\t✓},\r\n'bgra8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t},\r\n'bgra8unorm-srgb': {s: \"float\"}, // \t✓\t✓\t✓\t},\r\n// 16-bit per component\t\t\t\t\t\r\n'r16uint': {s: \"uint\"}, // \t✓\t✓\t\t},\r\n'r16sint': {s: \"sint\"}, // \t✓\t✓\t\t},\r\n'r16float': {s: \"float\"}, // \t✓\t✓\t✓\t},\r\n'rg16uint': {s: \"uint\"}, // \t✓\t✓\t\t},\r\n'rg16sint': {s: \"sint\"}, // \t✓\t✓\t\t},\r\n'rg16float': {s: \"float\"}, // \t✓\t✓\t✓\t},\r\n'rgba16uint': {s: \"uint\"}, // \t✓\t✓\t\t✓},\r\n'rgba16sint': {s: \"sint\"}, // \t✓\t✓\t\t✓},\r\n'rgba16float': {s: \"float\"}, // \t✓\t✓\t✓\t✓},\r\n// 32-bit per component\t\t\t\t\t\r\n'r32uint': {s: \"uint\"}, // \t✓\t\t\t✓},\r\n'r32sint': {s: \"sint\"}, // \t✓\t\t\t✓},\r\n'r32float': {\"unfilterable-float\"\t✓\t✓\t\t✓},\r\n'rg32uint': {s: \"uint\"}, // \t✓\t\t\t✓},\r\n'rg32sint': {s: \"sint\"}, // \t✓\t\t\t✓},\r\n'rg32float': {\"unfilterable-float\"\t✓\t\t\t✓},\r\n'rgba32uint': {s: \"uint\"}, // \t✓\t\t\t✓},\r\n'rgba32sint': {s: \"sint\"}, // \t✓\t\t\t✓},\r\n'rgba32float': {\"unfilterable-float\"\t✓\t\t\t✓},\r\n// mixed component width\t\t\t\t\t\r\n'rgb10a2unorm': {s: \"float\"}, // \t✓\t✓\t✓\t}\r\n'rg11b10ufloat': {s: \"float\"}, // \t\t✓\t\t}\r\n// Format\tBytes per texel\tAspect\tGPUTextureSampleType\tValid image copy source\tValid image copy destination\r\n'stencil8': {1 − 4\tstencil\t\"uint\"\t✓}\r\n'depth16unorm': {2\tdepth\t\"depth\"\t✓}\r\n'depth24plus': {4\tdepth\t\"depth\"\t✗}\r\n'depth24plus': {stencil8\t4 − 8\tdepth\t\"depth\"\t✗}\r\n'stencil': {s: \"uint\"}, // \t✓}\r\n'depth32float': {4\tdepth\t\"depth\"\t✓\t✗}\r\n'depth24unorm': {stencil8\t4\tdepth\t\"depth\"\t✗}\r\n'stencil': {s: \"uint\"}, // \t✓}\r\n'depth32float': {stencil8}\r\n\r\n// Format\tBytes per block\tGPUTextureSampleType\tBlock Size\tFeature\r\n'rgb9e5ufloat': {c: 4, s: \"float\",\tbpp: 4/(1*1)},\r\n\r\n'bc1-rgba-unorm': {c: 4. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\r\n'bc1-rgba-unorm-srgb': {c: 4. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\r\n'bc2-rgba-unorm': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\r\n'bc2-rgba-unorm-srgb': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\r\n'bc3-rgba-unorm': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\r\n'bc3-rgba-unorm-srgb': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\r\n'bc4-r-unorm': {c: 1. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\r\n'bc4-r-snorm': {c: 1. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\r\n'bc5-rg-unorm': {c: 2. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\r\n'bc5-rg-snorm': { },\r\n'bc6h-rgb-ufloat': {\t16 },\r\n'bc6h-rgb-float': { },\r\n'bc7-rgba-unorm': {\t16 },\r\n'bc7-rgba-unorm-srgb': { },\r\n\r\n'etc2-rgb8unorm': {\t8\t\"float\"\t4 × 4\ttexture-compression-etc2 },\r\n'etc2-rgb8unorm-srgb': { },\r\n'etc2-rgb8a1unorm': {\t8 },\r\n'etc2-rgb8a1unorm-srgb': { },\r\n'etc2-rgba8unorm': {\t16 },\r\n'etc2-rgba8unorm-srgb': { },\r\n\r\n'eac-r11unorm': {\t8 },\r\n'eac-r11snorm': { },\r\n'eac-rg11unorm': {\t16 },\r\n'eac-rg11snorm': { },\r\n\r\n'astc-4x4-unorm': {\t16\t\"float\"\t4 × 4\ttexture-compression-astc },\r\n'astc-4x4-unorm-srgb': { },\r\n'astc-5x4-unorm': {\t16\t5 × 4 },\r\n'astc-5x4-unorm-srgb': { },\r\n'astc-5x5-unorm': {\t16\t5 × 5 },\r\n'astc-5x5-unorm-srgb': { },\r\n'astc-6x5-unorm': {\t16\t6 × 5 },\r\n'astc-6x5-unorm-srgb': { },\r\n'astc-6x6-unorm': {\t16\t6 × 6 },\r\n'astc-6x6-unorm-srgb': { },\r\n'astc-8x5-unorm': {\t16\t8 × 5 },\r\n'astc-8x5-unorm-srgb': { },\r\n'astc-8x6-unorm': {\t16\t8 × 6 },\r\n'astc-8x6-unorm-srgb': { },\r\n'astc-8x8-unorm': {\t16\t8 × 8 },\r\n'astc-8x8-unorm-srgb': { },\r\n'astc-10x5-unorm': {\t16\t10 × 5 },\r\n'astc-10x5-unorm-srgb': { },\r\n'astc-10x6-unorm': {\t16\t10 × 6 },\r\n'astc-10x6-unorm-srgb': { },\r\n'astc-10x8-unorm': {\t16\t10 × 8 },\r\n'astc-10x8-unorm-srgb': { },\r\n'astc-10x10-unorm': {\t16\t10 × 10 },\r\n'astc-10x10-unorm-srgb': { },\r\n'astc-12x10-unorm': {\t16\t12 × 10 },\r\n'astc-12x10-unorm-srgb': { },\r\n'astc-12x12-unorm': {\t16 },\r\n*/\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 837, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 843, "column": 0}, "map": {"version":3,"file":"texture-format-capabilities.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/texture-format-capabilities.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {TextureFormat} from './texture-formats';\r\nimport type {TextureFeature} from './texture-features';\r\nimport {decodeTextureFormat} from './decode-texture-format';\r\n\r\nimport {getTextureFormatDefinition} from './texture-format-table';\r\n\r\n/**\r\n * Texture format capabilities.\r\n * @note Not directly usable. Can contain TextureFeature strings that need to be checked against a specific device.\r\n */\r\nexport type TextureFormatCapabilities = {\r\n  format: TextureFormat;\r\n  /** Can the format be created */\r\n  create: TextureFeature | boolean;\r\n  /** If a feature string, the specified device feature determines if format is renderable. */\r\n  render: TextureFeature | boolean;\r\n  /** If a feature string, the specified device feature determines if format is filterable. */\r\n  filter: TextureFeature | boolean;\r\n  /** If a feature string, the specified device feature determines if format is blendable. */\r\n  blend: TextureFeature | boolean;\r\n  /** If a feature string, the specified device feature determines if format is storeable. */\r\n  store: TextureFeature | boolean;\r\n};\r\n\r\nexport function getTextureFormatCapabilities(format: TextureFormat): TextureFormatCapabilities {\r\n  const info = getTextureFormatDefinition(format);\r\n\r\n  const formatCapabilities: Required<TextureFormatCapabilities> = {\r\n    format,\r\n    create: info.f ?? true,\r\n    render: info.render ?? true,\r\n    filter: info.filter ?? true,\r\n    blend: info.blend ?? true,\r\n    store: info.store ?? true\r\n  };\r\n\r\n  const formatInfo = decodeTextureFormat(format);\r\n  const isDepthStencil = format.startsWith('depth') || format.startsWith('stencil');\r\n  const isSigned = formatInfo?.signed;\r\n  const isInteger = formatInfo?.integer;\r\n  const isWebGLSpecific = formatInfo?.webgl;\r\n\r\n  // signed formats are not renderable\r\n  formatCapabilities.render &&= !isSigned;\r\n  // signed and integer formats are not filterable\r\n  formatCapabilities.filter &&= !isDepthStencil && !isSigned && !isInteger && !isWebGLSpecific;\r\n\r\n  return formatCapabilities;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAMpC,OAAO,EAAC,0BAA0B,EAAC,kCAA+B;AAFlE,OAAO,EAAC,mBAAmB,EAAC,mCAAgC;;;AAsBtD,SAAU,4BAA4B,CAAC,MAAqB;IAChE,MAAM,IAAI,6MAAG,6BAAA,AAA0B,EAAC,MAAM,CAAC,CAAC;IAEhD,MAAM,kBAAkB,GAAwC;QAC9D,MAAM;QACN,MAAM,EAAE,IAAI,CAAC,CAAC,IAAI,IAAI;QACtB,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI;QAC3B,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI;QACzB,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI;KAC1B,CAAC;IAEF,MAAM,UAAU,IAAG,gOAAA,AAAmB,EAAC,MAAM,CAAC,CAAC;IAC/C,MAAM,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAClF,MAAM,QAAQ,GAAG,UAAU,EAAE,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,UAAU,EAAE,OAAO,CAAC;IACtC,MAAM,eAAe,GAAG,UAAU,EAAE,KAAK,CAAC;IAE1C,oCAAoC;IACpC,kBAAkB,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC;IACxC,gDAAgD;IAChD,kBAAkB,CAAC,MAAM,KAAK,CAAC,cAAc,IAAI,CAAC,QAAQ,IAAI,CAAC,SAAS,IAAI,CAAC,eAAe,CAAC;IAE7F,OAAO,kBAAkB,CAAC;AAC5B,CAAC","ignoreList":[0]}},
    {"offset": {"line": 874, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 880, "column": 0}, "map": {"version":3,"file":"resource.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/resource.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport {uid} from '../../utils/uid';\r\n\r\nexport type ResourceProps = {\r\n  /** Name of resource, mainly for debugging purposes. A unique name will be assigned if not provided */\r\n  id?: string;\r\n  /** Handle for the underlying resources (WebGL object or WebGPU handle) */\r\n  handle?: any;\r\n  /** User provided data stored on this resource  */\r\n  userData?: {[key: string]: any};\r\n};\r\n\r\n/**\r\n * Base class for GPU (WebGPU/WebGL) Resources\r\n */\r\nexport abstract class Resource<Props extends ResourceProps> {\r\n  /** Default properties for resource */\r\n  static defaultProps: Required<ResourceProps> = {\r\n    id: 'undefined',\r\n    handle: undefined,\r\n    userData: undefined!\r\n  };\r\n\r\n  abstract get [Symbol.toStringTag](): string;\r\n\r\n  toString(): string {\r\n    return `${this[Symbol.toStringTag] || this.constructor.name}:\"${this.id}\"`;\r\n  }\r\n\r\n  /** props.id, for debugging. */\r\n  id: string;\r\n  readonly props: Required<Props>;\r\n  readonly userData: Record<string, unknown> = {};\r\n  abstract readonly device: Device;\r\n  private _device: Device;\r\n\r\n  /** Whether this resource has been destroyed */\r\n  destroyed: boolean = false;\r\n  /** For resources that allocate GPU memory */\r\n  private allocatedBytes: number = 0;\r\n  /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created \"sub\" resources. */\r\n  private _attachedResources = new Set<Resource<ResourceProps>>();\r\n\r\n  /**\r\n   * Create a new Resource. Called from Subclass\r\n   */\r\n  constructor(device: Device, props: Props, defaultProps: Required<Props>) {\r\n    if (!device) {\r\n      throw new Error('no device');\r\n    }\r\n    this._device = device;\r\n    this.props = selectivelyMerge<Props>(props, defaultProps);\r\n\r\n    const id =\r\n      this.props.id !== 'undefined' ? (this.props.id as string) : uid(this[Symbol.toStringTag]);\r\n    this.props.id = id;\r\n    this.id = id;\r\n    this.userData = this.props.userData || {};\r\n\r\n    this.addStats();\r\n  }\r\n\r\n  /**\r\n   * destroy can be called on any resource to release it before it is garbage collected.\r\n   */\r\n  destroy(): void {\r\n    this.destroyResource();\r\n  }\r\n\r\n  /** @deprecated Use destroy() */\r\n  delete(): this {\r\n    this.destroy();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Combines a map of user props and default props, only including props from defaultProps\r\n   * @returns returns a map of overridden default props\r\n   */\r\n  getProps(): object {\r\n    return this.props;\r\n  }\r\n\r\n  // ATTACHED RESOURCES\r\n\r\n  /**\r\n   * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed\r\n   * Called automatically when sub resources are auto created but can be called by application\r\n   */\r\n  attachResource(resource: Resource<ResourceProps>): void {\r\n    this._attachedResources.add(resource);\r\n  }\r\n\r\n  /**\r\n   * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.\r\n   */\r\n  detachResource(resource: Resource<ResourceProps>): void {\r\n    this._attachedResources.delete(resource);\r\n  }\r\n\r\n  /**\r\n   * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.\r\n   */\r\n  destroyAttachedResource(resource: Resource<ResourceProps>): void {\r\n    if (this._attachedResources.delete(resource)) {\r\n      resource.destroy();\r\n    }\r\n  }\r\n\r\n  /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */\r\n  destroyAttachedResources(): void {\r\n    for (const resource of Object.values(this._attachedResources)) {\r\n      resource.destroy();\r\n    }\r\n    // don't remove while we are iterating\r\n    this._attachedResources = new Set<Resource<ResourceProps>>();\r\n  }\r\n\r\n  // PROTECTED METHODS\r\n\r\n  /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */\r\n  protected destroyResource(): void {\r\n    this.destroyAttachedResources();\r\n    this.removeStats();\r\n    this.destroyed = true;\r\n  }\r\n\r\n  /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */\r\n  protected removeStats(): void {\r\n    const stats = this._device.statsManager.getStats('Resource Counts');\r\n    const name = this[Symbol.toStringTag];\r\n    stats.get(`${name}s Active`).decrementCount();\r\n  }\r\n\r\n  /** Called by subclass to track memory allocations */\r\n  protected trackAllocatedMemory(bytes: number, name = this[Symbol.toStringTag]): void {\r\n    const stats = this._device.statsManager.getStats('Resource Counts');\r\n    stats.get('GPU Memory').addCount(bytes);\r\n    stats.get(`${name} Memory`).addCount(bytes);\r\n    this.allocatedBytes = bytes;\r\n  }\r\n\r\n  /** Called by subclass to track memory deallocations */\r\n  protected trackDeallocatedMemory(name = this[Symbol.toStringTag]): void {\r\n    const stats = this._device.statsManager.getStats('Resource Counts');\r\n    stats.get('GPU Memory').subtractCount(this.allocatedBytes);\r\n    stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);\r\n    this.allocatedBytes = 0;\r\n  }\r\n\r\n  /** Called by resource constructor to track object creation */\r\n  private addStats(): void {\r\n    const stats = this._device.statsManager.getStats('Resource Counts');\r\n    const name = this[Symbol.toStringTag];\r\n    stats.get('Resources Created').incrementCount();\r\n    stats.get(`${name}s Created`).incrementCount();\r\n    stats.get(`${name}s Active`).incrementCount();\r\n  }\r\n}\r\n\r\n/**\r\n * Combines a map of user props and default props, only including props from defaultProps\r\n * @param props\r\n * @param defaultProps\r\n * @returns returns a map of overridden default props\r\n */\r\nfunction selectivelyMerge<Props>(props: Props, defaultProps: Required<Props>): Required<Props> {\r\n  const mergedProps = {...defaultProps};\r\n  for (const key in props) {\r\n    if (props[key] !== undefined) {\r\n      mergedProps[key] = props[key];\r\n    }\r\n  }\r\n  return mergedProps;\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1006, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1012, "column": 0}, "map": {"version":3,"file":"buffer.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/buffer.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport {Resource, ResourceProps} from './resource';\r\n\r\nexport type BufferProps = ResourceProps & {\r\n  /** Supply a handle to connect to an existing device-specific buffer */\r\n  handle?: WebGLBuffer;\r\n  /** Specifies how this buffer can be used */\r\n  usage?: number;\r\n  /** Length in bytes of memory to be allocated. If not specified, `byteLength` of  `props.data` will be used. */\r\n  byteLength?: number;\r\n  /** Data to initialize the buffer with. */\r\n  data?: ArrayBuffer | ArrayBufferView | null;\r\n  /** Byte offset into the newly created Buffer to store data at */\r\n  byteOffset?: number;\r\n  /** If props.usage includes Buffer.INDEX */\r\n  indexType?: 'uint16' | 'uint32';\r\n\r\n  // TBD\r\n  mappedAtCreation?: boolean;\r\n};\r\n\r\n/** Abstract GPU buffer */\r\nexport abstract class Buffer extends Resource<BufferProps> {\r\n  static override defaultProps: Required<BufferProps> = {\r\n    ...Resource.defaultProps,\r\n    usage: 0, // Buffer.COPY_DST | Buffer.COPY_SRC\r\n    byteLength: 0,\r\n    byteOffset: 0,\r\n    data: null,\r\n    indexType: 'uint16',\r\n    mappedAtCreation: false\r\n  };\r\n\r\n  // Usage Flags\r\n  static MAP_READ = 0x01;\r\n  static MAP_WRITE = 0x02;\r\n  static COPY_SRC = 0x0004;\r\n  static COPY_DST = 0x0008;\r\n  /** Index buffer */\r\n  static INDEX = 0x0010;\r\n  /** Vertex buffer */\r\n  static VERTEX = 0x0020;\r\n  /** Uniform buffer */\r\n  static UNIFORM = 0x0040;\r\n  /** Storage buffer */\r\n  static STORAGE = 0x0080;\r\n  static INDIRECT = 0x0100;\r\n  static QUERY_RESOLVE = 0x0200;\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'Buffer';\r\n  }\r\n\r\n  /** The usage with which this buffer was created */\r\n  readonly usage: number;\r\n  /** For index buffers, whether indices are 16 or 32 bit */\r\n  readonly indexType?: 'uint16' | 'uint32';\r\n  /** Length of buffer in bytes */\r\n  abstract byteLength: number;\r\n  /** \"Time\" of last update, can be used to check if redraw is needed */\r\n  updateTimestamp: number;\r\n\r\n  constructor(device: Device, props: BufferProps) {\r\n    const deducedProps = {...props};\r\n\r\n    // Deduce indexType\r\n    if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {\r\n      if (props.data instanceof Uint32Array) {\r\n        deducedProps.indexType = 'uint32';\r\n      } else if (props.data instanceof Uint16Array) {\r\n        deducedProps.indexType = 'uint16';\r\n      }\r\n    }\r\n\r\n    // Remove data from props before storing, we don't want to hold on to a big chunk of memory\r\n    delete deducedProps.data;\r\n\r\n    super(device, deducedProps, Buffer.defaultProps);\r\n\r\n    this.usage = deducedProps.usage || 0;\r\n    this.indexType = deducedProps.indexType;\r\n\r\n    // TODO - perhaps this should be set on async write completion?\r\n    this.updateTimestamp = device.incrementTimestamp();\r\n  }\r\n\r\n  /**\r\n   * Create a copy of this Buffer with new byteLength, with same props but of the specified size.\r\n   * @note Does not copy contents of the cloned Buffer.\r\n   */\r\n  clone(props: {byteLength: number}): Buffer {\r\n    return this.device.createBuffer({...this.props, ...props});\r\n  }\r\n\r\n  /** Write data to buffer */\r\n  abstract write(data: ArrayBufferView, byteOffset?: number): void;\r\n\r\n  /** Read data asynchronously */\r\n  abstract readAsync(byteOffset?: number, byteLength?: number): Promise<Uint8Array>;\r\n\r\n  /** Read data synchronously. @note WebGL2 only */\r\n  readSyncWebGL(byteOffset?: number, byteLength?: number): Uint8Array {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\r\n\r\n  /** Max amount of debug data saved. Two vec4's */\r\n  static DEBUG_DATA_MAX_LENGTH = 32;\r\n\r\n  /** A partial CPU-side copy of the data in this buffer, for debugging purposes */\r\n  debugData: ArrayBuffer = new ArrayBuffer(0);\r\n\r\n  /** This doesn't handle partial non-zero offset updates correctly */\r\n  protected _setDebugData(\r\n    data: ArrayBufferView | ArrayBuffer | null,\r\n    byteOffset: number,\r\n    byteLength: number\r\n  ): void {\r\n    const arrayBuffer: ArrayBuffer | null = ArrayBuffer.isView(data) ? data.buffer : data;\r\n    const debugDataLength = Math.min(\r\n      data ? data.byteLength : byteLength,\r\n      Buffer.DEBUG_DATA_MAX_LENGTH\r\n    );\r\n    if (arrayBuffer === null) {\r\n      this.debugData = new ArrayBuffer(debugDataLength);\r\n    } else if (byteOffset === 0 && byteLength === arrayBuffer.byteLength) {\r\n      this.debugData = arrayBuffer.slice(0, debugDataLength);\r\n    } else {\r\n      this.debugData = arrayBuffer.slice(byteOffset, byteOffset + debugDataLength);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAGpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAqB7C,MAAgB,MAAO,6LAAQ,WAAqB;IACxD,MAAM,CAAU,YAAY,GAA0B;QACpD,uLAAG,WAAQ,CAAC,YAAY;QACxB,KAAK,EAAE,CAAC,EAAE,oCAAoC;QAC9C,UAAU,EAAE,CAAC;QACb,UAAU,EAAE,CAAC;QACb,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,QAAQ;QACnB,gBAAgB,EAAE,KAAK;KACxB,CAAC;IAEF,cAAc;IACd,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC;IACzB,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC;IACzB,iBAAA,EAAmB,CACnB,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;IACtB,kBAAA,EAAoB,CACpB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,mBAAA,EAAqB,CACrB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,mBAAA,EAAqB,CACrB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC;IACzB,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC;IAE9B,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,iDAAA,EAAmD,CAC1C,KAAK,CAAS;IACvB,wDAAA,EAA0D,CACjD,SAAS,CAAuB;IAGzC,oEAAA,EAAsE,CACtE,eAAe,CAAS;IAExB,YAAY,MAAc,EAAE,KAAkB,CAAA;QAC5C,MAAM,YAAY,GAAG;YAAC,GAAG,KAAK;QAAA,CAAC,CAAC;QAEhC,mBAAmB;QACnB,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;YAC1D,IAAI,KAAK,CAAC,IAAI,YAAY,WAAW,EAAE,CAAC;gBACtC,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC;YACpC,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,YAAY,WAAW,EAAE,CAAC;gBAC7C,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC;YACpC,CAAC;QACH,CAAC;QAED,2FAA2F;QAC3F,OAAO,YAAY,CAAC,IAAI,CAAC;QAEzB,KAAK,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;QAEjD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC;QAExC,+DAA+D;QAC/D,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,kBAAkB,EAAE,CAAC;IACrD,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,KAA2B,EAAA;QAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YAAC,GAAG,IAAI,CAAC,KAAK;YAAE,GAAG,KAAK;QAAA,CAAC,CAAC,CAAC;IAC7D,CAAC;IAQD,+CAAA,EAAiD,CACjD,aAAa,CAAC,UAAmB,EAAE,UAAmB,EAAA;QACpD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,oEAAoE;IAEpE,+CAAA,EAAiD,CACjD,MAAM,CAAC,qBAAqB,GAAG,EAAE,CAAC;IAElC,+EAAA,EAAiF,CACjF,SAAS,GAAgB,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;IAE5C,kEAAA,EAAoE,CAC1D,aAAa,CACrB,IAA0C,EAC1C,UAAkB,EAClB,UAAkB,EAAA;QAElB,MAAM,WAAW,GAAuB,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QACtF,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAC9B,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,EACnC,MAAM,CAAC,qBAAqB,CAC7B,CAAC;QACF,IAAI,WAAW,KAAK,IAAI,EAAE,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC;QACpD,CAAC,MAAM,IAAI,UAAU,KAAK,CAAC,IAAI,UAAU,KAAK,WAAW,CAAC,UAAU,EAAE,CAAC;YACrE,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;QACzD,CAAC,MAAM,CAAC;YACN,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,GAAG,eAAe,CAAC,CAAC;QAC/E,CAAC;IACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1094, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1100, "column": 0}, "map": {"version":3,"file":"device.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/device.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {StatsManager, lumaStats} from '../utils/stats-manager';\r\nimport {log} from '../utils/log';\r\nimport {uid} from '../utils/uid';\r\nimport type {TextureFormat} from '../gpu-type-utils/texture-formats';\r\nimport type {TextureFormatCapabilities} from '../gpu-type-utils/texture-format-capabilities';\r\nimport type {CanvasContext, CanvasContextProps} from './canvas-context';\r\nimport type {BufferProps} from './resources/buffer';\r\nimport {Buffer} from './resources/buffer';\r\nimport type {RenderPipeline, RenderPipelineProps} from './resources/render-pipeline';\r\nimport type {ComputePipeline, ComputePipelineProps} from './resources/compute-pipeline';\r\nimport type {Sampler, SamplerProps} from './resources/sampler';\r\nimport type {Shader, ShaderProps} from './resources/shader';\r\nimport type {Texture, TextureProps} from './resources/texture';\r\nimport type {ExternalTexture, ExternalTextureProps} from './resources/external-texture';\r\nimport type {Framebuffer, FramebufferProps} from './resources/framebuffer';\r\nimport type {RenderPass, RenderPassProps} from './resources/render-pass';\r\nimport type {ComputePass, ComputePassProps} from './resources/compute-pass';\r\nimport type {CommandEncoder, CommandEncoderProps} from './resources/command-encoder';\r\nimport type {VertexArray, VertexArrayProps} from './resources/vertex-array';\r\nimport type {TransformFeedback, TransformFeedbackProps} from './resources/transform-feedback';\r\nimport type {QuerySet, QuerySetProps} from './resources/query-set';\r\n\r\nimport {isTextureFormatCompressed} from '../gpu-type-utils/decode-texture-format';\r\nimport {getTextureFormatCapabilities} from '../gpu-type-utils/texture-format-capabilities';\r\n\r\n/**\r\n * Identifies the GPU vendor and driver.\r\n * @note Chrome WebGPU does not provide much information, though more can be enabled with\r\n * @see https://developer.chrome.com/blog/new-in-webgpu-120#adapter_information_updates\r\n * chrome://flags/#enable-webgpu-developer-features\r\n */\r\nexport type DeviceInfo = {\r\n  /** Type of device */\r\n  type: 'webgl' | 'webgpu' | 'unknown';\r\n  /** Vendor (name of GPU vendor, Apple, nVidia etc */\r\n  vendor: string;\r\n  /** Renderer (usually driver name) */\r\n  renderer: string;\r\n  /** version of driver */\r\n  version: string;\r\n  /** family of GPU */\r\n  gpu: 'nvidia' | 'amd' | 'intel' | 'apple' | 'software' | 'unknown';\r\n  /** Type of GPU () */\r\n  gpuType: 'discrete' | 'integrated' | 'cpu' | 'unknown';\r\n  /** GPU architecture */\r\n  gpuArchitecture?: string; // 'common-3' on Apple\r\n  /** GPU driver backend. Can sometimes be sniffed */\r\n  gpuBackend?: 'opengl' | 'opengles' | 'metal' | 'd3d11' | 'd3d12' | 'vulkan' | 'unknown';\r\n  /** If this is a fallback adapter */\r\n  fallback?: boolean;\r\n  /** Shader language supported by device.createShader() */\r\n  shadingLanguage: 'wgsl' | 'glsl';\r\n  /** Highest supported shader language version: GLSL 3.00 = 300, WGSL 1.00 = 100 */\r\n  shadingLanguageVersion: number;\r\n};\r\n\r\n/** Limits for a device (max supported sizes of resources, max number of bindings etc) */\r\nexport abstract class DeviceLimits {\r\n  /** max number of TextureDimension1D */\r\n  abstract maxTextureDimension1D: number;\r\n  /** max number of TextureDimension2D */\r\n  abstract maxTextureDimension2D: number;\r\n  /** max number of TextureDimension3D */\r\n  abstract maxTextureDimension3D: number;\r\n  /** max number of TextureArrayLayers */\r\n  abstract maxTextureArrayLayers: number;\r\n  /** max number of BindGroups */\r\n  abstract maxBindGroups: number;\r\n  /** max number of DynamicUniformBuffers per PipelineLayout */\r\n  abstract maxDynamicUniformBuffersPerPipelineLayout: number;\r\n  /** max number of DynamicStorageBuffers per PipelineLayout */\r\n  abstract maxDynamicStorageBuffersPerPipelineLayout: number;\r\n  /** max number of SampledTextures per ShaderStage */\r\n  abstract maxSampledTexturesPerShaderStage: number;\r\n  /** max number of Samplers per ShaderStage */\r\n  abstract maxSamplersPerShaderStage: number;\r\n  /** max number of StorageBuffers per ShaderStage */\r\n  abstract maxStorageBuffersPerShaderStage: number;\r\n  /** max number of StorageTextures per ShaderStage */\r\n  abstract maxStorageTexturesPerShaderStage: number;\r\n  /** max number of UniformBuffers per ShaderStage */\r\n  abstract maxUniformBuffersPerShaderStage: number;\r\n  /** max number of UniformBufferBindingSize */\r\n  abstract maxUniformBufferBindingSize: number;\r\n  /** max number of StorageBufferBindingSize */\r\n  abstract maxStorageBufferBindingSize: number;\r\n  /** min UniformBufferOffsetAlignment */\r\n  abstract minUniformBufferOffsetAlignment: number;\r\n  /** min StorageBufferOffsetAlignment */\r\n  abstract minStorageBufferOffsetAlignment: number;\r\n  /** max number of VertexBuffers */\r\n  abstract maxVertexBuffers: number;\r\n  /** max number of VertexAttributes */\r\n  abstract maxVertexAttributes: number;\r\n  /** max number of VertexBufferArrayStride */\r\n  abstract maxVertexBufferArrayStride: number;\r\n  /** max number of InterStageShaderComponents */\r\n  abstract maxInterStageShaderComponents: number;\r\n  /** max number of ComputeWorkgroupStorageSize */\r\n  abstract maxComputeWorkgroupStorageSize: number;\r\n  /** max number of ComputeInvocations per Workgroup */\r\n  abstract maxComputeInvocationsPerWorkgroup: number;\r\n  /** max ComputeWorkgroupSizeX */\r\n  abstract maxComputeWorkgroupSizeX: number;\r\n  /** max ComputeWorkgroupSizeY */\r\n  abstract maxComputeWorkgroupSizeY: number;\r\n  /** max ComputeWorkgroupSizeZ */\r\n  abstract maxComputeWorkgroupSizeZ: number;\r\n  /** max ComputeWorkgroupsPerDimension */\r\n  abstract maxComputeWorkgroupsPerDimension: number;\r\n}\r\n\r\n/** Set-like class for features (lets apps check for WebGL / WebGPU extensions) */\r\nexport class DeviceFeatures {\r\n  protected features: Set<DeviceFeature>;\r\n  protected disabledFeatures?: Partial<Record<DeviceFeature, boolean>>;\r\n\r\n  constructor(\r\n    features: DeviceFeature[] = [],\r\n    disabledFeatures: Partial<Record<DeviceFeature, boolean>>\r\n  ) {\r\n    this.features = new Set<DeviceFeature>(features);\r\n    this.disabledFeatures = disabledFeatures || {};\r\n  }\r\n\r\n  *[Symbol.iterator](): IterableIterator<DeviceFeature> {\r\n    yield* this.features;\r\n  }\r\n\r\n  has(feature: DeviceFeature): boolean {\r\n    return !this.disabledFeatures?.[feature] && this.features.has(feature);\r\n  }\r\n}\r\n\r\n/** Device feature names */\r\nexport type DeviceFeature =\r\n  | WebGPUDeviceFeature\r\n  | WebGLDeviceFeature\r\n  | WebGLCompressedTextureFeatures;\r\n\r\nexport type WebGPUDeviceFeature =\r\n  | 'depth-clip-control'\r\n  | 'indirect-first-instance'\r\n  | 'timestamp-query'\r\n  | 'shader-f16'\r\n  | 'depth32float-stencil8'\r\n  | 'rg11b10ufloat-renderable' // Is the rg11b10ufloat texture format renderable?\r\n  | 'float32-filterable' // Is the float32 format filterable?\r\n  | 'bgra8unorm-storage' // Can the bgra8unorm texture format be used in storage buffers?\r\n  | 'texture-compression-bc'\r\n  | 'texture-compression-etc2'\r\n  | 'texture-compression-astc';\r\n// | 'depth-clamping' // removed from the WebGPU spec...\r\n// | 'pipeline-statistics-query' // removed from the WebGPU spec...\r\n\r\nexport type WebGLDeviceFeature =\r\n  // webgl extension features\r\n  | 'timer-query-webgl' // unify with WebGPU timestamp-query?\r\n  | 'compilation-status-async-webgl' // Non-blocking shader compile/link status query available\r\n  | 'provoking-vertex-webgl' // parameters.provokingVertex\r\n  | 'polygon-mode-webgl' // parameters.polygonMode and parameters.polygonOffsetLine\r\n\r\n  // GLSL extension features\r\n  | 'shader-noperspective-interpolation-webgl' // Vertex outputs & fragment inputs can have a `noperspective` interpolation qualifier.\r\n  | 'shader-conservative-depth-webgl' // GLSL `gl_FragDepth` qualifiers `depth_unchanged` etc can enable early depth test\r\n  | 'shader-clip-cull-distance-webgl' // Makes gl_ClipDistance and gl_CullDistance available in shaders\r\n\r\n  // texture rendering\r\n  | 'float32-renderable-webgl'\r\n  | 'float16-renderable-webgl'\r\n  | 'rgb9e5ufloat-renderable-webgl'\r\n  | 'snorm8-renderable-webgl'\r\n  | 'norm16-renderable-webgl'\r\n  | 'snorm16-renderable-webgl'\r\n\r\n  // texture filtering\r\n  | 'float16-filterable-webgl'\r\n  | 'texture-filterable-anisotropic-webgl'\r\n\r\n  // texture storage bindings\r\n  | 'bgra8unorm-storage'\r\n\r\n  // texture blending\r\n  | 'texture-blend-float-webgl';\r\n\r\ntype WebGLCompressedTextureFeatures =\r\n  | 'texture-compression-bc5-webgl'\r\n  | 'texture-compression-bc7-webgl'\r\n  | 'texture-compression-etc1-webgl'\r\n  | 'texture-compression-pvrtc-webgl'\r\n  | 'texture-compression-atc-webgl';\r\n\r\n/** Texture format capabilities that have been checked against a specific device */\r\nexport type DeviceTextureFormatCapabilities = {\r\n  format: TextureFormat;\r\n  /** Can the format be created */\r\n  create: boolean;\r\n  /** If a feature string, the specified device feature determines if format is renderable. */\r\n  render: boolean;\r\n  /** If a feature string, the specified device feature determines if format is filterable. */\r\n  filter: boolean;\r\n  /** If a feature string, the specified device feature determines if format is blendable. */\r\n  blend: boolean;\r\n  /** If a feature string, the specified device feature determines if format is storeable. */\r\n  store: boolean;\r\n};\r\n\r\n/** Device properties */\r\nexport type DeviceProps = {\r\n  /** string id for debugging. Stored on the object, used in logging and set on underlying GPU objects when feasible. */\r\n  id?: string;\r\n  /** Properties for creating a default canvas context */\r\n  createCanvasContext?: CanvasContextProps | true;\r\n  /** Control which type of GPU is preferred on systems with both integrated and discrete GPU. Defaults to \"high-performance\" / discrete GPU. */\r\n  powerPreference?: 'default' | 'high-performance' | 'low-power';\r\n  /** Hints that device creation should fail if no hardware GPU is available (if the system performance is \"low\"). */\r\n  failIfMajorPerformanceCaveat?: boolean;\r\n  /** Error handling */\r\n  onError?: (error: Error) => unknown;\r\n\r\n  /** WebGL specific: Properties passed through to WebGL2RenderingContext creation: `canvas.getContext('webgl2', props.webgl)` */\r\n  webgl?: WebGLContextProps;\r\n\r\n  // DEBUG SETTINGS\r\n\r\n  /** Turn on implementation defined checks that slow down execution but help break where errors occur */\r\n  debug?: boolean;\r\n  /** Show shader source in browser? The default is`'error'`, meaning that logs are shown when shader compilation has errors */\r\n  debugShaders?: 'never' | 'errors' | 'warnings' | 'always';\r\n  /** Renders a small version of updated Framebuffers into the primary canvas context. Can be set in console luma.log.set('debug-framebuffers', true) */\r\n  debugFramebuffers?: boolean;\r\n  /** WebGL specific - Trace WebGL calls (instruments WebGL2RenderingContext at the expense of performance). Can be set in console luma.log.set('debug-webgl', true)  */\r\n  debugWebGL?: boolean;\r\n  /** WebGL specific - Initialize the SpectorJS WebGL debugger. Can be set in console luma.log.set('debug-spectorjs', true)  */\r\n  debugSpectorJS?: boolean;\r\n  /** WebGL specific - SpectorJS URL. Override if CDN is down or different SpectorJS version is desired. */\r\n  debugSpectorJSUrl?: string;\r\n\r\n  // EXPERIMENTAL SETTINGS - subject to change\r\n\r\n  /** adapter.create() returns the existing Device if the provided canvas' WebGL context is already associated with a Device.  */\r\n  _reuseDevices?: boolean;\r\n  /** WebGPU specific - Request a Device with the highest limits supported by platform. On WebGPU devices can be created with minimal limits. */\r\n  _requestMaxLimits?: boolean;\r\n  /** Disable specific features */\r\n  _disabledFeatures?: Partial<Record<DeviceFeature, boolean>>;\r\n  /** WebGL specific - Initialize all features on startup */\r\n  _initializeFeatures?: boolean;\r\n  /** Never destroy cached shaders and pipelines */\r\n  _factoryDestroyPolicy?: 'unused' | 'never';\r\n  /** Resource default overrides */\r\n  _resourceDefaults?: {\r\n    texture?: Partial<TextureProps>;\r\n    sampler?: Partial<SamplerProps>;\r\n    renderPass?: Partial<RenderPassProps>;\r\n  };\r\n\r\n  /** @deprecated Internal, Do not use directly! Use `luma.attachDevice()` to attach to pre-created contexts/devices. */\r\n  _handle?: unknown; // WebGL2RenderingContext | GPUDevice | null;\r\n};\r\n\r\n/** WebGL independent copy of WebGLContextAttributes */\r\ntype WebGLContextProps = {\r\n  alpha?: boolean; // indicates if the canvas contains an alpha buffer.\r\n  desynchronized?: boolean; // hints the user agent to reduce the latency by desynchronizing the canvas paint cycle from the event loop\r\n  antialias?: boolean; // indicates whether or not to perform anti-aliasing.\r\n  depth?: boolean; // indicates that the drawing buffer has a depth buffer of at least 16 bits.\r\n  failIfMajorPerformanceCaveat?: boolean; // indicates if a context will be created if the system performance is low or if no hardware GPU is available.\r\n  powerPreference?: 'default' | 'high-performance' | 'low-power';\r\n  premultipliedAlpha?: boolean; // page compositor will assume the drawing buffer contains colors with pre-multiplied alpha.\r\n  preserveDrawingBuffer?: boolean; // buffers will not be cleared and will preserve their values until cleared or overwritten by the author.\r\n};\r\n\r\n/**\r\n * Create and attach devices for a specific backend. Currently static methods on each device\r\n */\r\nexport interface DeviceFactory {\r\n  // new (props: DeviceProps): Device; Constructor isn't used\r\n  type: string;\r\n  isSupported(): boolean;\r\n  create(props: DeviceProps): Promise<Device>;\r\n  attach?(handle: unknown): Device;\r\n}\r\n\r\n/**\r\n * WebGPU Device/WebGL context abstraction\r\n */\r\nexport abstract class Device {\r\n  static defaultProps: Required<DeviceProps> = {\r\n    id: null!,\r\n    powerPreference: 'high-performance',\r\n    failIfMajorPerformanceCaveat: false,\r\n    createCanvasContext: undefined!,\r\n\r\n    // Callbacks\r\n    onError: (error: Error) => log.error(error.message)(),\r\n\r\n    // Experimental\r\n    _reuseDevices: false,\r\n    _requestMaxLimits: true,\r\n    _factoryDestroyPolicy: 'unused',\r\n    // TODO - Change these after confirming things work as expected\r\n    _initializeFeatures: true,\r\n    _disabledFeatures: {\r\n      'compilation-status-async-webgl': true\r\n    },\r\n    _resourceDefaults: {},\r\n\r\n    // WebGL specific\r\n    webgl: {},\r\n\r\n    debug: log.get('debug') || undefined!,\r\n    debugShaders: log.get('debug-shaders') || undefined!,\r\n    debugFramebuffers: Boolean(log.get('debug-framebuffers')),\r\n    debugWebGL: Boolean(log.get('debug-webgl')),\r\n    debugSpectorJS: undefined!, // Note: log setting is queried by the spector.js code\r\n    debugSpectorJSUrl: undefined!,\r\n\r\n    // INTERNAL\r\n    _handle: undefined!\r\n  };\r\n\r\n  get [Symbol.toStringTag](): string {\r\n    return 'Device';\r\n  }\r\n\r\n  constructor(props: DeviceProps) {\r\n    this.props = {...Device.defaultProps, ...props};\r\n    this.id = this.props.id || uid(this[Symbol.toStringTag].toLowerCase());\r\n  }\r\n\r\n  /** id of this device, primarily for debugging */\r\n  readonly id: string;\r\n  /** type of this device */\r\n  abstract readonly type: 'webgl' | 'webgpu' | 'unknown';\r\n  /** A copy of the device props  */\r\n  readonly props: Required<DeviceProps>;\r\n  /** Available for the application to store data on the device */\r\n  userData: {[key: string]: unknown} = {};\r\n  /** stats */\r\n  readonly statsManager: StatsManager = lumaStats;\r\n  /** An abstract timestamp used for change tracking */\r\n  timestamp: number = 0;\r\n\r\n  /** True if this device has been reused during device creation (app has multiple references) */\r\n  _reused: boolean = false;\r\n  /** Used by other luma.gl modules to store data on the device */\r\n  _lumaData: {[key: string]: unknown} = {};\r\n\r\n  abstract destroy(): void;\r\n\r\n  // Capabilities\r\n\r\n  /** Information about the device (vendor, versions etc) */\r\n  abstract info: DeviceInfo;\r\n  /** Optional capability discovery */\r\n  abstract features: DeviceFeatures;\r\n  /** WebGPU style device limits */\r\n  abstract get limits(): DeviceLimits;\r\n\r\n  /** Determines what operations are supported on a texture format, checking against supported device features */\r\n  getTextureFormatCapabilities(format: TextureFormat): DeviceTextureFormatCapabilities {\r\n    const genericCapabilities = getTextureFormatCapabilities(format);\r\n\r\n    // Check standard features\r\n    const checkFeature = (featureOrBoolean: DeviceFeature | boolean | undefined) =>\r\n      (typeof featureOrBoolean === 'string'\r\n        ? this.features.has(featureOrBoolean)\r\n        : featureOrBoolean) ?? true;\r\n\r\n    const supported = checkFeature(genericCapabilities.create);\r\n\r\n    const deviceCapabilities: DeviceTextureFormatCapabilities = {\r\n      format,\r\n      create: supported,\r\n      render: supported && checkFeature(genericCapabilities.render),\r\n      filter: supported && checkFeature(genericCapabilities.filter),\r\n      blend: supported && checkFeature(genericCapabilities.blend),\r\n      store: supported && checkFeature(genericCapabilities.store)\r\n    };\r\n\r\n    return this._getDeviceSpecificTextureFormatCapabilities(deviceCapabilities);\r\n  }\r\n\r\n  /** Check if device supports a specific texture format (creation and `nearest` sampling) */\r\n  isTextureFormatSupported(\r\n    format: TextureFormat,\r\n    capabilities: Partial<TextureFormatCapabilities>\r\n  ): boolean {\r\n    return this.getTextureFormatCapabilities(format).create;\r\n  }\r\n\r\n  /** Check if linear filtering (sampler interpolation) is supported for a specific texture format */\r\n  isTextureFormatFilterable(format: TextureFormat): boolean {\r\n    return this.getTextureFormatCapabilities(format).filter;\r\n  }\r\n\r\n  /** Check if device supports rendering to a framebuffer color attachment of a specific texture format */\r\n  isTextureFormatRenderable(format: TextureFormat): boolean {\r\n    return this.getTextureFormatCapabilities(format).render;\r\n  }\r\n\r\n  /** Check if a specific texture format is GPU compressed */\r\n  isTextureFormatCompressed(format: TextureFormat): boolean {\r\n    return isTextureFormatCompressed(format);\r\n  }\r\n\r\n  // Device loss\r\n\r\n  /** `true` if device is already lost */\r\n  abstract get isLost(): boolean;\r\n\r\n  /** Promise that resolves when device is lost */\r\n  abstract readonly lost: Promise<{reason: 'destroyed'; message: string}>;\r\n\r\n  /**\r\n   * Trigger device loss.\r\n   * @returns `true` if context loss could actually be triggered.\r\n   * @note primarily intended for testing how application reacts to device loss\r\n   */\r\n  loseDevice(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /** Report error (normally called for unhandled device errors) */\r\n  reportError(error: Error): void {\r\n    this.props.onError(error);\r\n  }\r\n\r\n  // Canvas context\r\n\r\n  /** Default / primary canvas context. Can be null as WebGPU devices can be created without a CanvasContext */\r\n  abstract canvasContext: CanvasContext | null;\r\n\r\n  /** Returns the default / primary canvas context. Throws an error if no canvas context is available (a WebGPU compute device) */\r\n  getDefaultCanvasContext(): CanvasContext {\r\n    if (!this.canvasContext) {\r\n      throw new Error('Device has no default CanvasContext. See props.createCanvasContext');\r\n    }\r\n    return this.canvasContext;\r\n  }\r\n\r\n  /** Creates a new CanvasContext (WebGPU only) */\r\n  abstract createCanvasContext(props?: CanvasContextProps): CanvasContext;\r\n\r\n  /** Call after rendering a frame (necessary e.g. on WebGL OffscreenCanvas) */\r\n  abstract submit(): void;\r\n\r\n  // Resource creation\r\n\r\n  /** Create a buffer */\r\n  abstract createBuffer(props: BufferProps | ArrayBuffer | ArrayBufferView): Buffer;\r\n\r\n  /** Create a texture */\r\n  abstract createTexture(props: TextureProps): Texture;\r\n\r\n  /** Create a temporary texture view of a video source */\r\n  abstract createExternalTexture(props: ExternalTextureProps): ExternalTexture;\r\n\r\n  /** Create a sampler */\r\n  abstract createSampler(props: SamplerProps): Sampler;\r\n\r\n  /** Create a Framebuffer. Must have at least one attachment. */\r\n  abstract createFramebuffer(props: FramebufferProps): Framebuffer;\r\n\r\n  /** Create a shader */\r\n  abstract createShader(props: ShaderProps): Shader;\r\n\r\n  /** Create a render pipeline (aka program) */\r\n  abstract createRenderPipeline(props: RenderPipelineProps): RenderPipeline;\r\n\r\n  /** Create a compute pipeline (aka program). WebGPU only. */\r\n  abstract createComputePipeline(props: ComputePipelineProps): ComputePipeline;\r\n\r\n  /** Create a vertex array */\r\n  abstract createVertexArray(props: VertexArrayProps): VertexArray;\r\n\r\n  /** Create a RenderPass */\r\n  abstract beginRenderPass(props?: RenderPassProps): RenderPass;\r\n\r\n  /** Create a ComputePass */\r\n  abstract beginComputePass(props?: ComputePassProps): ComputePass;\r\n\r\n  /** Create a transform feedback (immutable set of output buffer bindings). WebGL only. */\r\n  abstract createTransformFeedback(props: TransformFeedbackProps): TransformFeedback;\r\n\r\n  abstract createQuerySet(props: QuerySetProps): QuerySet;\r\n\r\n  createCommandEncoder(props: CommandEncoderProps = {}): CommandEncoder {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /** A monotonic counter for tracking buffer and texture updates */\r\n  incrementTimestamp(): number {\r\n    return this.timestamp++;\r\n  }\r\n\r\n  // Error Handling\r\n\r\n  /** Report unhandled device errors */\r\n  onError(error: Error) {\r\n    this.props.onError(error);\r\n  }\r\n\r\n  // DEPRECATED METHODS\r\n\r\n  /** @deprecated Use getDefaultCanvasContext() */\r\n  getCanvasContext(): CanvasContext {\r\n    return this.getDefaultCanvasContext();\r\n  }\r\n\r\n  // WebGL specific HACKS - enables app to remove webgl import\r\n  // Use until we have a better way to handle these\r\n\r\n  /** @deprecated - will be removed - should use command encoder */\r\n  readPixelsToArrayWebGL(\r\n    source: Framebuffer | Texture,\r\n    options?: {\r\n      sourceX?: number;\r\n      sourceY?: number;\r\n      sourceFormat?: number;\r\n      sourceAttachment?: number;\r\n      target?: Uint8Array | Uint16Array | Float32Array;\r\n      // following parameters are auto deduced if not provided\r\n      sourceWidth?: number;\r\n      sourceHeight?: number;\r\n      sourceType?: number;\r\n    }\r\n  ): Uint8Array | Uint16Array | Float32Array {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /** @deprecated - will be removed - should use command encoder */\r\n  readPixelsToBufferWebGL(\r\n    source: Framebuffer | Texture,\r\n    options?: {\r\n      sourceX?: number;\r\n      sourceY?: number;\r\n      sourceFormat?: number;\r\n      target?: Buffer; // A new Buffer object is created when not provided.\r\n      targetByteOffset?: number; // byte offset in buffer object\r\n      // following parameters are auto deduced if not provided\r\n      sourceWidth?: number;\r\n      sourceHeight?: number;\r\n      sourceType?: number;\r\n    }\r\n  ): Buffer {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */\r\n  setParametersWebGL(parameters: any): void {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */\r\n  getParametersWebGL(parameters: any): void {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */\r\n  withParametersWebGL(parameters: any, func: any): any {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /** @deprecated - will be removed - should use clear arguments in RenderPass */\r\n  clearWebGL(options?: {framebuffer?: Framebuffer; color?: any; depth?: any; stencil?: any}): void {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /** @deprecated - will be removed - should use for debugging only */\r\n  resetWebGL(): void {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  // IMPLEMENTATION\r\n\r\n  /** Helper to get the canvas context props */\r\n  static _getCanvasContextProps(props: DeviceProps): CanvasContextProps | undefined {\r\n    return props.createCanvasContext === true ? {} : props.createCanvasContext;\r\n  }\r\n\r\n  /**\r\n   * Determines what operations are supported on a texture format, checking against supported device features\r\n   * Subclasses override to apply additional checks\r\n   */\r\n  protected abstract _getDeviceSpecificTextureFormatCapabilities(\r\n    format: DeviceTextureFormatCapabilities\r\n  ): DeviceTextureFormatCapabilities;\r\n\r\n  /** Subclasses use this to support .createBuffer() overloads */\r\n  protected _normalizeBufferProps(props: BufferProps | ArrayBuffer | ArrayBufferView): BufferProps {\r\n    if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {\r\n      props = {data: props};\r\n    }\r\n\r\n    // TODO - fragile, as this is done before we merge with default options\r\n    // inside the Buffer constructor\r\n\r\n    const newProps = {...props};\r\n    // Deduce indexType\r\n    if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {\r\n      if (props.data instanceof Uint32Array) {\r\n        newProps.indexType = 'uint32';\r\n      } else if (props.data instanceof Uint16Array) {\r\n        newProps.indexType = 'uint16';\r\n      } else {\r\n        log.warn('indices buffer content must be of integer type')();\r\n      }\r\n    }\r\n    return newProps;\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;;;AAGpC,OAAO,EAAC,GAAG,EAAC,wBAAqB;AACjC,OAAO,EAAC,GAAG,EAAC,wBAAqB;AAFjC,OAAO,EAAe,SAAS,EAAC,kCAA+B;AAuB/D,OAAO,EAAC,4BAA4B,EAAC,yDAAsD;AAD3F,OAAO,EAAC,yBAAyB,EAAC,mDAAgD;AAflF,OAAO,EAAC,MAAM,EAAC,8BAA2B;;;;;;;AAkDpC,MAAgB,YAAY;CAqDjC;AAGK,MAAO,cAAc;IACf,QAAQ,CAAqB;IAC7B,gBAAgB,CAA2C;IAErE,YACE,WAA4B,EAAE,EAC9B,gBAAyD,CAAA;QAEzD,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAgB,QAAQ,CAAC,CAAC;QACjD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,CAAA,CAAE,CAAC;IACjD,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAA;QAChB,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,GAAG,CAAC,OAAsB,EAAA;QACxB,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACzE,CAAC;CACF;AA2JK,MAAgB,MAAM;IAC1B,MAAM,CAAC,YAAY,GAA0B;QAC3C,EAAE,EAAE,IAAK;QACT,eAAe,EAAE,kBAAkB;QACnC,4BAA4B,EAAE,KAAK;QACnC,mBAAmB,EAAE,SAAU;QAE/B,YAAY;QACZ,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE,+JAAC,MAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;QAErD,eAAe;QACf,aAAa,EAAE,KAAK;QACpB,iBAAiB,EAAE,IAAI;QACvB,qBAAqB,EAAE,QAAQ;QAC/B,+DAA+D;QAC/D,mBAAmB,EAAE,IAAI;QACzB,iBAAiB,EAAE;YACjB,gCAAgC,EAAE,IAAI;SACvC;QACD,iBAAiB,EAAE,CAAA,CAAE;QAErB,iBAAiB;QACjB,KAAK,EAAE,CAAA,CAAE;QAET,KAAK,kKAAE,MAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,SAAU;QACrC,YAAY,kKAAE,MAAG,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,SAAU;QACpD,iBAAiB,EAAE,OAAO,iKAAC,MAAG,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QACzD,UAAU,EAAE,OAAO,iKAAC,MAAG,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3C,cAAc,EAAE,SAAU,EAAE,sDAAsD;QAClF,iBAAiB,EAAE,SAAU;QAE7B,WAAW;QACX,OAAO,EAAE,SAAU;KACpB,CAAC;IAEF,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QACtB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,YAAY,KAAkB,CAAA;QAC5B,IAAI,CAAC,KAAK,GAAG;YAAC,GAAG,MAAM,CAAC,YAAY;YAAE,GAAG,KAAK;QAAA,CAAC,CAAC;QAChD,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,wKAAI,MAAA,AAAG,EAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;IACzE,CAAC;IAED,+CAAA,EAAiD,CACxC,EAAE,CAAS;IAGpB,gCAAA,EAAkC,CACzB,KAAK,CAAwB;IACtC,8DAAA,EAAgE,CAChE,QAAQ,GAA6B,CAAA,CAAE,CAAC;IACxC,UAAA,EAAY,CACH,YAAY,gLAAiB,YAAS,CAAC;IAChD,mDAAA,EAAqD,CACrD,SAAS,GAAW,CAAC,CAAC;IAEtB,6FAAA,EAA+F,CAC/F,OAAO,GAAY,KAAK,CAAC;IACzB,8DAAA,EAAgE,CAChE,SAAS,GAA6B,CAAA,CAAE,CAAC;IAazC,6GAAA,EAA+G,CAC/G,4BAA4B,CAAC,MAAqB,EAAA;QAChD,MAAM,mBAAmB,GAAG,gPAAA,AAA4B,EAAC,MAAM,CAAC,CAAC;QAEjE,0BAA0B;QAC1B,MAAM,YAAY,GAAG,CAAC,gBAAqD,EAAE,CAC3E,CAD6E,AAC5E,OAAO,gBAAgB,KAAK,QAAQ,GACjC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,GACnC,gBAAgB,CAAC,IAAI,IAAI,CAAC;QAEhC,MAAM,SAAS,GAAG,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE3D,MAAM,kBAAkB,GAAoC;YAC1D,MAAM;YACN,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,SAAS,IAAI,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC;YAC7D,MAAM,EAAE,SAAS,IAAI,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC;YAC7D,KAAK,EAAE,SAAS,IAAI,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC;YAC3D,KAAK,EAAE,SAAS,IAAI,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC;SAC5D,CAAC;QAEF,OAAO,IAAI,CAAC,2CAA2C,CAAC,kBAAkB,CAAC,CAAC;IAC9E,CAAC;IAED,yFAAA,EAA2F,CAC3F,wBAAwB,CACtB,MAAqB,EACrB,YAAgD,EAAA;QAEhD,OAAO,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;IAC1D,CAAC;IAED,iGAAA,EAAmG,CACnG,yBAAyB,CAAC,MAAqB,EAAA;QAC7C,OAAO,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;IAC1D,CAAC;IAED,sGAAA,EAAwG,CACxG,yBAAyB,CAAC,MAAqB,EAAA;QAC7C,OAAO,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;IAC1D,CAAC;IAED,yDAAA,EAA2D,CAC3D,yBAAyB,CAAC,MAAqB,EAAA;QAC7C,kNAAO,4BAAA,AAAyB,EAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAUD;;;;OAIG,CACH,UAAU,GAAA;QACR,OAAO,KAAK,CAAC;IACf,CAAC;IAED,+DAAA,EAAiE,CACjE,WAAW,CAAC,KAAY,EAAA;QACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAOD,8HAAA,EAAgI,CAChI,uBAAuB,GAAA;QACrB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;QACxF,CAAC;QACD,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAgDD,oBAAoB,CAAC,QAA6B,CAAA,CAAE,EAAA;QAClD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,gEAAA,EAAkE,CAClE,kBAAkB,GAAA;QAChB,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED,iBAAiB;IAEjB,mCAAA,EAAqC,CACrC,OAAO,CAAC,KAAY,EAAA;QAClB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,qBAAqB;IAErB,8CAAA,EAAgD,CAChD,gBAAgB,GAAA;QACd,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACxC,CAAC;IAED,4DAA4D;IAC5D,iDAAiD;IAEjD,+DAAA,EAAiE,CACjE,sBAAsB,CACpB,MAA6B,EAC7B,OAUC,EAAA;QAED,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,+DAAA,EAAiE,CACjE,uBAAuB,CACrB,MAA6B,EAC7B,OAUC,EAAA;QAED,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,4EAAA,EAA8E,CAC9E,kBAAkB,CAAC,UAAe,EAAA;QAChC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,4EAAA,EAA8E,CAC9E,kBAAkB,CAAC,UAAe,EAAA;QAChC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,4EAAA,EAA8E,CAC9E,mBAAmB,CAAC,UAAe,EAAE,IAAS,EAAA;QAC5C,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,6EAAA,EAA+E,CAC/E,UAAU,CAAC,OAA8E,EAAA;QACvF,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,kEAAA,EAAoE,CACpE,UAAU,GAAA;QACR,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,iBAAiB;IAEjB,2CAAA,EAA6C,CAC7C,MAAM,CAAC,sBAAsB,CAAC,KAAkB,EAAA;QAC9C,OAAO,KAAK,CAAC,mBAAmB,KAAK,IAAI,CAAC,CAAC,CAAC,CAAA,CAAE,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC;IAC7E,CAAC;IAUD,6DAAA,EAA+D,CACrD,qBAAqB,CAAC,KAAkD,EAAA;QAChF,IAAI,KAAK,YAAY,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9D,KAAK,GAAG;gBAAC,IAAI,EAAE,KAAK;YAAA,CAAC,CAAC;QACxB,CAAC;QAED,uEAAuE;QACvE,gCAAgC;QAEhC,MAAM,QAAQ,GAAG;YAAC,GAAG,KAAK;QAAA,CAAC,CAAC;QAC5B,mBAAmB;QACnB,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,qLAAG,SAAM,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;YAC1D,IAAI,KAAK,CAAC,IAAI,YAAY,WAAW,EAAE,CAAC;gBACtC,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC;YAChC,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,YAAY,WAAW,EAAE,CAAC;gBAC7C,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC;YAChC,CAAC,MAAM,CAAC;gLACN,MAAG,CAAC,IAAI,CAAC,gDAAgD,CAAC,EAAE,CAAC;YAC/D,CAAC;QACH,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1290, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1296, "column": 0}, "map": {"version":3,"file":"texture.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/texture.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport type {TypedArray} from '../../types';\r\nimport type {TextureFormat} from '../../gpu-type-utils/texture-formats';\r\nimport type {TextureView, TextureViewProps} from './texture-view';\r\nimport {Resource, ResourceProps} from './resource';\r\nimport {Sampler, SamplerProps} from './sampler';\r\n\r\n/**\r\n * These represent the main compressed texture formats\r\n * Each format typically has a number of more specific subformats\r\n */\r\nexport type TextureCompressionFormat =\r\n  | 'dxt'\r\n  | 'dxt-srgb'\r\n  | 'etc1'\r\n  | 'etc2'\r\n  | 'pvrtc'\r\n  | 'atc'\r\n  | 'astc'\r\n  | 'rgtc';\r\n\r\n/** Names of cube texture faces */\r\nexport type TextureCubeFace = '+X' | '-X' | '+Y' | '-Y' | '+Z' | '-Z';\r\n\r\n/**\r\n * One mip level\r\n * Basic data structure is similar to `ImageData`\r\n * additional optional fields can describe compressed texture data.\r\n */\r\nexport type TextureLevelData = {\r\n  /** WebGPU style format string. Defaults to 'rgba8unorm' */\r\n  format?: TextureFormat;\r\n  data: TypedArray;\r\n  width: number;\r\n  height: number;\r\n\r\n  compressed?: boolean;\r\n  byteLength?: number;\r\n  hasAlpha?: boolean;\r\n};\r\n\r\n/**\r\n * Built-in data types that can be used to initialize textures\r\n * @note ImageData can be used for 8 bit data via Uint8ClampedArray\r\n */\r\nexport type ExternalImage =\r\n  | ImageBitmap\r\n  | ImageData\r\n  | HTMLImageElement\r\n  | HTMLVideoElement\r\n  | VideoFrame\r\n  | HTMLCanvasElement\r\n  | OffscreenCanvas;\r\n\r\nexport type TextureLevelSource = TextureLevelData | ExternalImage;\r\n\r\n/** Texture data can be one or more mip levels */\r\nexport type TextureData = TextureLevelData | ExternalImage | (TextureLevelData | ExternalImage)[];\r\n\r\n/** @todo - define what data type is supported for 1D textures */\r\nexport type Texture1DData = TypedArray | TextureLevelData;\r\n\r\n/** Texture data can be one or more mip levels */\r\nexport type Texture2DData =\r\n  | TypedArray\r\n  | TextureLevelData\r\n  | ExternalImage\r\n  | (TextureLevelData | ExternalImage)[];\r\n\r\n/** Array of textures */\r\nexport type Texture3DData = TypedArray | TextureData[];\r\n\r\n/** 6 face textures */\r\nexport type TextureCubeData = Record<TextureCubeFace, Texture2DData>;\r\n\r\n/** Array of textures */\r\nexport type TextureArrayData = TextureData[];\r\n\r\n/** Array of 6 face textures */\r\nexport type TextureCubeArrayData = Record<TextureCubeFace, TextureData>[];\r\n\r\nexport type TextureDataProps =\r\n  | Texture1DProps\r\n  | Texture2DProps\r\n  | Texture3DProps\r\n  | TextureArrayProps\r\n  | TextureCubeProps\r\n  | TextureCubeArrayProps;\r\n\r\nexport type Texture1DProps = {dimension: '1d'; data?: Texture1DData | null};\r\nexport type Texture2DProps = {dimension?: '2d'; data?: Texture2DData | null};\r\nexport type Texture3DProps = {dimension: '3d'; data?: Texture3DData | null};\r\nexport type TextureArrayProps = {dimension: '2d-array'; data?: TextureArrayData | null};\r\nexport type TextureCubeProps = {dimension: 'cube'; data?: TextureCubeData | null};\r\nexport type TextureCubeArrayProps = {dimension: 'cube-array'; data: TextureCubeArrayData | null};\r\n\r\n/** Texture properties */\r\nexport type TextureProps = ResourceProps &\r\n  TextureDataProps & {\r\n    format?: TextureFormat;\r\n    width?: number | undefined;\r\n    height?: number | undefined;\r\n    depth?: number;\r\n    usage?: number;\r\n\r\n    /** How many mip levels */\r\n    mipLevels?: number | 'pyramid';\r\n    /** Multi sampling */\r\n    samples?: number;\r\n\r\n    /** Specifying mipmaps will default mipLevels to 'pyramid' and attempt to generate mipmaps */\r\n    mipmaps?: boolean;\r\n\r\n    /** Sampler (or SamplerProps) for the default sampler for this texture. Used if no sampler provided. Note that other samplers can still be used. */\r\n    sampler?: Sampler | SamplerProps;\r\n    /** Props for the default TextureView for this texture. Note that other views can still be created and used. */\r\n    view?: TextureViewProps;\r\n\r\n    /** Whether to flip the image vertically. Used if texture is initialized with an image. */\r\n    flipY?: boolean;\r\n\r\n    /** @deprecated - this is implicit from format */\r\n    compressed?: boolean;\r\n  };\r\n\r\n/** Options for Texture.copyExternalImage */\r\nexport type CopyExternalImageOptions = {\r\n  /** Image */\r\n  image: ExternalImage;\r\n  /** Copy from image x offset (default 0) */\r\n  sourceX?: number;\r\n  /** Copy from image y offset (default 0) */\r\n  sourceY?: number;\r\n  /** Copy area width (default 1) */\r\n  width?: number;\r\n  /** Copy area height (default 1) */\r\n  height?: number;\r\n  /** Copy depth (default 1) */\r\n  depth?: number;\r\n  /** Which mip-level to copy into (default 0) */\r\n  mipLevel?: number;\r\n  /** Start copying into offset x (default 0) */\r\n  x?: number;\r\n  /** Start copying into offset y (default 0) */\r\n  y?: number;\r\n  /** Start copying from depth layer z (default 0) */\r\n  z?: number;\r\n  /** When copying into depth stencil textures (default 'all') */\r\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\r\n  /** Specific color space of image data */\r\n  colorSpace?: 'srgb';\r\n  /** load as premultiplied alpha  */\r\n  premultipliedAlpha?: boolean;\r\n  /** Whether to flip the image vertically */\r\n  flipY?: boolean;\r\n};\r\n\r\n/**\r\n * Abstract Texture interface\r\n * Texture Object\r\n * https://gpuweb.github.io/gpuweb/#gputexture\r\n */\r\nexport abstract class Texture extends Resource<TextureProps> {\r\n  static COPY_SRC = 0x01;\r\n  static COPY_DST = 0x02;\r\n  static TEXTURE = 0x04;\r\n  static STORAGE = 0x08;\r\n  static RENDER_ATTACHMENT = 0x10;\r\n\r\n  static CubeFaces: TextureCubeFace[] = ['+X', '-X', '+Y', '-Y', '+Z', '-Z'];\r\n\r\n  static override defaultProps: Required<TextureProps> = {\r\n    ...Resource.defaultProps,\r\n    data: null,\r\n    dimension: '2d',\r\n    format: 'rgba8unorm',\r\n    width: undefined!,\r\n    height: undefined!,\r\n    depth: 1,\r\n    mipmaps: false,\r\n    compressed: false,\r\n    usage: 0,\r\n    mipLevels: undefined!,\r\n    samples: undefined!,\r\n    sampler: {},\r\n    view: undefined!,\r\n    flipY: undefined!\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'Texture';\r\n  }\r\n\r\n  override toString(): string {\r\n    return `Texture(${this.id},${this.format},${this.width}x${this.height})`;\r\n  }\r\n\r\n  /** dimension of this texture */\r\n  readonly dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\r\n  /** format of this texture */\r\n  readonly format: TextureFormat;\r\n  /** width in pixels of this texture */\r\n  width: number;\r\n  /** height in pixels of this texture */\r\n  height: number;\r\n  /** depth of this texture */\r\n  depth: number;\r\n  /** mip levels in this texture */\r\n  mipLevels: number;\r\n\r\n  /** Default sampler for this texture */\r\n  abstract sampler: Sampler;\r\n  /** Default view for this texture */\r\n  abstract view: TextureView;\r\n\r\n  /** \"Time\" of last update. Monotonically increasing timestamp. TODO move to AsyncTexture? */\r\n  updateTimestamp: number;\r\n\r\n  /** Do not use directly. Create with device.createTexture() */\r\n  constructor(device: Device, props: TextureProps) {\r\n    props = Texture.normalizeProps(device, props);\r\n    super(device, props, Texture.defaultProps);\r\n    this.dimension = this.props.dimension;\r\n    this.format = this.props.format;\r\n\r\n    // Size\r\n    this.width = this.props.width;\r\n    this.height = this.props.height;\r\n    this.depth = this.props.depth;\r\n\r\n    // Calculate size, if not provided\r\n    if (this.props.width === undefined || this.props.height === undefined) {\r\n      // @ts-ignore\r\n      const size = Texture.getTextureDataSize(this.props.data);\r\n      this.width = size?.width || 1;\r\n      this.height = size?.height || 1;\r\n    }\r\n\r\n    // mipLevels\r\n\r\n    // If mipmap generation is requested and mipLevels is not provided, initialize a full pyramid\r\n    if (this.props.mipmaps && this.props.mipLevels === undefined) {\r\n      this.props.mipLevels = 'pyramid';\r\n    }\r\n\r\n    // Auto-calculate the number of mip levels as a convenience\r\n    // TODO - Should we clamp to 1-getMipLevelCount?\r\n    this.mipLevels =\r\n      this.props.mipLevels === 'pyramid'\r\n        ? Texture.getMipLevelCount(this.width, this.height)\r\n        : this.props.mipLevels || 1;\r\n\r\n    // TODO - perhaps this should be set on async write completion?\r\n    this.updateTimestamp = device.incrementTimestamp();\r\n  }\r\n\r\n  /** Create a texture view for this texture */\r\n  abstract createView(props: TextureViewProps): TextureView;\r\n\r\n  /** Set sampler props associated with this texture */\r\n  abstract setSampler(sampler?: Sampler | SamplerProps): void;\r\n\r\n  /** Copy external image data into the texture */\r\n  abstract copyExternalImage(options: CopyExternalImageOptions): {width: number; height: number};\r\n\r\n  /**\r\n   * Create a new texture with the same parameters and optionally, a different size\r\n   * @note Textures are immutable and cannot be resized after creation, but we can create a similar texture with the same parameters but a new size.\r\n   * @note Does not copy contents of the texture\r\n   */\r\n  clone(size?: {width: number; height: number}): Texture {\r\n    return this.device.createTexture({...this.props, ...size});\r\n  }\r\n\r\n  /** Check if data is an external image */\r\n  static isExternalImage(data: unknown): data is ExternalImage {\r\n    return (\r\n      (typeof ImageData !== 'undefined' && data instanceof ImageData) ||\r\n      (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) ||\r\n      (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) ||\r\n      (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) ||\r\n      (typeof VideoFrame !== 'undefined' && data instanceof VideoFrame) ||\r\n      (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) ||\r\n      (typeof OffscreenCanvas !== 'undefined' && data instanceof OffscreenCanvas)\r\n    );\r\n  }\r\n\r\n  /** Determine size (width and height) of provided image data */\r\n  static getExternalImageSize(data: ExternalImage): {width: number; height: number} {\r\n    if (\r\n      (typeof ImageData !== 'undefined' && data instanceof ImageData) ||\r\n      (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) ||\r\n      (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) ||\r\n      (typeof OffscreenCanvas !== 'undefined' && data instanceof OffscreenCanvas)\r\n    ) {\r\n      return {width: data.width, height: data.height};\r\n    }\r\n    if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\r\n      return {width: data.naturalWidth, height: data.naturalHeight};\r\n    }\r\n    if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\r\n      return {width: data.videoWidth, height: data.videoHeight};\r\n    }\r\n    if (typeof VideoFrame !== 'undefined' && data instanceof VideoFrame) {\r\n      // TODO: is this the right choice for width and height?\r\n      return {width: data.displayWidth, height: data.displayHeight};\r\n    }\r\n    throw new Error('Unknown image type');\r\n  }\r\n\r\n  /** Check if texture data is a typed array */\r\n  static isTextureLevelData(data: TextureData): data is TextureLevelData {\r\n    const typedArray = (data as TextureLevelData)?.data;\r\n    return ArrayBuffer.isView(typedArray);\r\n  }\r\n\r\n  /** Get the size of the texture described by the provided TextureData */\r\n  static getTextureDataSize(\r\n    data: TextureData | TextureCubeData | TextureArrayData | TextureCubeArrayData | TypedArray\r\n  ): {width: number; height: number} | null {\r\n    if (!data) {\r\n      return null;\r\n    }\r\n    if (ArrayBuffer.isView(data)) {\r\n      return null;\r\n    }\r\n    // Recurse into arrays (array of miplevels)\r\n    if (Array.isArray(data)) {\r\n      return Texture.getTextureDataSize(data[0]);\r\n    }\r\n    if (Texture.isExternalImage(data)) {\r\n      return Texture.getExternalImageSize(data);\r\n    }\r\n    if (data && typeof data === 'object' && data.constructor === Object) {\r\n      const textureDataArray = Object.values(data) as Texture2DData[];\r\n      const untypedData = textureDataArray[0] as any;\r\n      return {width: untypedData.width, height: untypedData.height};\r\n    }\r\n    throw new Error('texture size deduction failed');\r\n  }\r\n\r\n  /**\r\n   * Normalize TextureData to an array of TextureLevelData / ExternalImages\r\n   * @param data\r\n   * @param options\r\n   * @returns array of TextureLevelData / ExternalImages\r\n   */\r\n  static normalizeTextureData(\r\n    data: Texture2DData,\r\n    options: {width: number; height: number; depth: number}\r\n  ): (TextureLevelData | ExternalImage)[] {\r\n    let lodArray: (TextureLevelData | ExternalImage)[];\r\n    if (ArrayBuffer.isView(data)) {\r\n      lodArray = [\r\n        {\r\n          // ts-expect-error does data really need to be Uint8ClampedArray?\r\n          data,\r\n          width: options.width,\r\n          height: options.height\r\n          // depth: options.depth\r\n        }\r\n      ];\r\n    } else if (!Array.isArray(data)) {\r\n      lodArray = [data];\r\n    } else {\r\n      lodArray = data;\r\n    }\r\n    return lodArray;\r\n  }\r\n\r\n  /** Calculate the number of mip levels for a texture of width and height */\r\n  static getMipLevelCount(width: number, height: number): number {\r\n    return Math.floor(Math.log2(Math.max(width, height))) + 1;\r\n  }\r\n\r\n  /** Convert luma.gl cubemap face constants to depth index */\r\n  static getCubeFaceDepth(face: TextureCubeFace): number {\r\n    // prettier-ignore\r\n    switch (face) {\r\n        case '+X': return  0;\r\n        case '-X': return  1;\r\n        case '+Y': return  2;\r\n        case '-Y': return  3;\r\n        case '+Z': return  4;\r\n        case '-Z': return  5;\r\n        default: throw new Error(face);\r\n      }\r\n  }\r\n\r\n  /** Default options */\r\n  protected static defaultCopyExternalImageOptions: Required<CopyExternalImageOptions> = {\r\n    image: undefined!,\r\n    sourceX: 0,\r\n    sourceY: 0,\r\n    width: undefined!,\r\n    height: undefined!,\r\n    depth: 1,\r\n    mipLevel: 0,\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n    aspect: 'all',\r\n    colorSpace: 'srgb',\r\n    premultipliedAlpha: false,\r\n    flipY: false\r\n  };\r\n\r\n  /** Ensure we have integer coordinates */\r\n  protected static normalizeProps(device: Device, props: TextureProps): TextureProps {\r\n    const newProps = {...props};\r\n\r\n    // Allow device to override props (e.g. props.mipmaps)\r\n    const overriddenDefaultProps: Partial<TextureProps> =\r\n      device?.props?._resourceDefaults?.texture || {};\r\n    // TODO - Type issue with props.data circumvented with Object.assign\r\n    Object.assign(newProps, overriddenDefaultProps);\r\n\r\n    // Ensure we have integer coordinates\r\n    const {width, height} = newProps;\r\n    if (typeof width === 'number') {\r\n      newProps.width = Math.max(1, Math.ceil(width));\r\n    }\r\n    if (typeof height === 'number') {\r\n      newProps.height = Math.max(1, Math.ceil(height));\r\n    }\r\n    return newProps;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1526, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1532, "column": 0}, "map": {"version":3,"file":"framebuffer.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/framebuffer.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {\r\n  ColorTextureFormat,\r\n  DepthStencilTextureFormat,\r\n  TextureFormat\r\n} from '../../gpu-type-utils/texture-formats';\r\nimport type {Device} from '../device';\r\nimport {Resource, ResourceProps} from './resource';\r\nimport {Texture} from './texture';\r\nimport {TextureView} from './texture-view';\r\nimport {log} from '../../utils/log';\r\n\r\nexport type FramebufferProps = ResourceProps & {\r\n  width?: number;\r\n  height?: number;\r\n  colorAttachments?: (TextureView | Texture | ColorTextureFormat)[];\r\n  depthStencilAttachment?: (TextureView | Texture | DepthStencilTextureFormat) | null;\r\n};\r\n\r\n/**\r\n * Create new textures with correct size for all attachments.\r\n * @note resize() destroys existing textures (if size has changed).\r\n */\r\nexport abstract class Framebuffer extends Resource<FramebufferProps> {\r\n  static override defaultProps: Required<FramebufferProps> = {\r\n    ...Resource.defaultProps,\r\n    width: 1,\r\n    height: 1,\r\n    colorAttachments: [], // ['rgba8unorm'],\r\n    depthStencilAttachment: null // 'depth24plus-stencil8'\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'Framebuffer';\r\n  }\r\n\r\n  /** Width of all attachments in this framebuffer */\r\n  width: number;\r\n  /** Height of all attachments in this framebuffer */\r\n  height: number;\r\n  /** Color attachments */\r\n  abstract colorAttachments: TextureView[];\r\n  /** Depth-stencil attachment, if provided */\r\n  abstract depthStencilAttachment: TextureView | null;\r\n\r\n  constructor(device: Device, props: FramebufferProps = {}) {\r\n    super(device, props, Framebuffer.defaultProps);\r\n    this.width = this.props.width;\r\n    this.height = this.props.height;\r\n  }\r\n\r\n  /**\r\n   * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.\r\n   * @note Does not copy contents of the attached textures.\r\n   */\r\n  clone(size?: {width: number; height: number}): Framebuffer {\r\n    const colorAttachments = this.colorAttachments.map(colorAttachment =>\r\n      colorAttachment.texture.clone(size)\r\n    );\r\n\r\n    const depthStencilAttachment =\r\n      this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);\r\n\r\n    return this.device.createFramebuffer({...this.props, colorAttachments, depthStencilAttachment});\r\n  }\r\n\r\n  /**\r\n   * Resizes all attachments\r\n   * @note resize() destroys existing textures (if size has changed).\r\n   * @deprecated Use framebuffer.clone()\r\n   */\r\n  resize(size: {width: number; height: number}): void;\r\n  resize(size: [width: number, height: number]): void;\r\n  resize(): void;\r\n  resize(size?: {width: number; height: number} | [width: number, height: number]): void {\r\n    let updateSize: boolean = !size;\r\n    if (size) {\r\n      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];\r\n      updateSize = updateSize || height !== this.height || width !== this.width;\r\n      this.width = width;\r\n      this.height = height;\r\n    }\r\n    if (updateSize) {\r\n      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();\r\n      this.resizeAttachments(this.width, this.height);\r\n    }\r\n  }\r\n\r\n  /** Auto creates any textures */\r\n  protected autoCreateAttachmentTextures(): void {\r\n    if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {\r\n      throw new Error('Framebuffer has noattachments');\r\n    }\r\n\r\n    this.colorAttachments = this.props.colorAttachments.map((attachment, index) => {\r\n      if (typeof attachment === 'string') {\r\n        const texture = this.createColorTexture(attachment, index);\r\n        this.attachResource(texture);\r\n        return texture.view;\r\n      }\r\n      if (attachment instanceof Texture) {\r\n        return attachment.view;\r\n      }\r\n      return attachment;\r\n    });\r\n\r\n    const attachment = this.props.depthStencilAttachment;\r\n    if (attachment) {\r\n      if (typeof attachment === 'string') {\r\n        const texture = this.createDepthStencilTexture(attachment);\r\n        this.attachResource(texture);\r\n        this.depthStencilAttachment = texture.view;\r\n      } else if (attachment instanceof Texture) {\r\n        this.depthStencilAttachment = attachment.view;\r\n      } else {\r\n        this.depthStencilAttachment = attachment;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create a color texture */\r\n  protected createColorTexture(format: TextureFormat, index: number): Texture {\r\n    return this.device.createTexture({\r\n      id: `${this.id}-color-attachment-${index}`,\r\n      usage: Texture.RENDER_ATTACHMENT,\r\n      format,\r\n      width: this.width,\r\n      height: this.height,\r\n      // TODO deprecated? - luma.gl v8 compatibility\r\n      sampler: {\r\n        magFilter: 'linear',\r\n        minFilter: 'linear'\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Create depth stencil texture */\r\n  protected createDepthStencilTexture(format: TextureFormat): Texture {\r\n    return this.device.createTexture({\r\n      id: `${this.id}-depth-stencil-attachment`,\r\n      usage: Texture.RENDER_ATTACHMENT,\r\n      format,\r\n      width: this.width,\r\n      height: this.height,\r\n      mipmaps: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Default implementation of resize\r\n   * Creates new textures with correct size for all attachments.\r\n   * and destroys existing textures if owned\r\n   */\r\n  protected resizeAttachments(width: number, height: number): void {\r\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\r\n      if (this.colorAttachments[i]) {\r\n        const resizedTexture = this.colorAttachments[i].texture.clone({\r\n          width,\r\n          height\r\n        });\r\n        this.destroyAttachedResource(this.colorAttachments[i]);\r\n        this.colorAttachments[i] = resizedTexture.view;\r\n        this.attachResource(resizedTexture.view);\r\n      }\r\n    }\r\n\r\n    if (this.depthStencilAttachment) {\r\n      const resizedTexture = this.depthStencilAttachment.texture.clone({\r\n        width,\r\n        height\r\n      });\r\n      this.destroyAttachedResource(this.depthStencilAttachment);\r\n      this.depthStencilAttachment = resizedTexture.view;\r\n      this.attachResource(resizedTexture);\r\n    }\r\n\r\n    this.updateAttachments();\r\n  }\r\n\r\n  /** Implementation is expected to update any underlying binding (WebGL framebuffer attachment) */\r\n  protected abstract updateAttachments(): void;\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1670, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1676, "column": 0}, "map": {"version":3,"file":"canvas-context.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/canvas-context.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {isBrowser} from '@probe.gl/env';\r\nimport type {Device} from './device';\r\nimport type {Framebuffer} from './resources/framebuffer';\r\nimport {log} from '../utils/log';\r\nimport {uid} from '../utils/uid';\r\nimport type {TextureFormat} from '../gpu-type-utils/texture-formats';\r\n\r\n/** Properties for a CanvasContext */\r\nexport type CanvasContextProps = {\r\n  /** If a canvas not supplied, one will be created and added to the DOM. If a string, a canvas with that id will be looked up in the DOM */\r\n  canvas?: HTMLCanvasElement | OffscreenCanvas | string | null;\r\n  /** If new canvas is created, it will be created in the specified container, otherwise is appended as a child of document.body */\r\n  container?: HTMLElement | string | null;\r\n  /** Width in pixels of the canvas - used when creating a new canvas */\r\n  width?: number;\r\n  /** Height in pixels of the canvas - used when creating a new canvas */\r\n  height?: number;\r\n  /** Visibility (only used if new canvas is created). */\r\n  visible?: boolean;\r\n  /** Whether to apply a device pixels scale factor (`true` uses browser DPI) */\r\n  useDevicePixels?: boolean | number;\r\n  /** Whether to track window resizes */\r\n  autoResize?: boolean;\r\n  /** https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/configure#alphamode */\r\n  alphaMode?: 'opaque' | 'premultiplied';\r\n  /** https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/configure#colorspace */\r\n  colorSpace?: 'srgb'; // GPUPredefinedColorSpace\r\n};\r\n\r\n/**\r\n * Manages a canvas. Supports both HTML or offscreen canvas\r\n * - Creates a new canvas or looks up a canvas from the DOM\r\n * - Provides check for DOM loaded\r\n * @todo commit(): https://github.com/w3ctag/design-reviews/issues/288\r\n * @todo transferControlToOffscreen: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen\r\n */\r\nexport abstract class CanvasContext {\r\n  static defaultProps: Required<CanvasContextProps> = {\r\n    canvas: null,\r\n    width: 800, // width are height are only used by headless gl\r\n    height: 600,\r\n    useDevicePixels: true,\r\n    autoResize: true,\r\n    container: null,\r\n    visible: true,\r\n    alphaMode: 'opaque',\r\n    colorSpace: 'srgb'\r\n  };\r\n\r\n  abstract readonly device: Device;\r\n  readonly id: string;\r\n  readonly props: Required<CanvasContextProps>;\r\n  readonly canvas: HTMLCanvasElement | OffscreenCanvas;\r\n  readonly htmlCanvas?: HTMLCanvasElement;\r\n  readonly offscreenCanvas?: OffscreenCanvas;\r\n  readonly type: 'html-canvas' | 'offscreen-canvas' | 'node';\r\n\r\n  /** Format of returned textures: \"bgra8unorm\", \"rgba8unorm\" */\r\n  abstract readonly format: TextureFormat;\r\n  /** Default stencil format for depth textures */\r\n  abstract readonly depthStencilFormat: TextureFormat;\r\n\r\n  width: number = 1;\r\n  height: number = 1;\r\n\r\n  readonly resizeObserver: ResizeObserver | undefined;\r\n\r\n  /** State used by luma.gl classes: TODO - move to canvasContext*/\r\n  readonly _canvasSizeInfo = {clientWidth: 0, clientHeight: 0, devicePixelRatio: 1};\r\n\r\n  abstract get [Symbol.toStringTag](): string;\r\n\r\n  toString(): string {\r\n    return `${this[Symbol.toStringTag]}(${this.id})`;\r\n  }\r\n\r\n  constructor(props?: CanvasContextProps) {\r\n    this.props = {...CanvasContext.defaultProps, ...props};\r\n    props = this.props;\r\n\r\n    if (!isBrowser()) {\r\n      this.id = 'node-canvas-context';\r\n      this.type = 'node';\r\n      this.width = this.props.width;\r\n      this.height = this.props.height;\r\n      // TODO - does this prevent app from using jsdom style polyfills?\r\n      this.canvas = null!;\r\n      return;\r\n    }\r\n\r\n    if (!props.canvas) {\r\n      const canvas = createCanvas(props);\r\n      const container = getContainer(props?.container || null);\r\n      container.insertBefore(canvas, container.firstChild);\r\n\r\n      this.canvas = canvas;\r\n\r\n      if (!props?.visible) {\r\n        this.canvas.style.visibility = 'hidden';\r\n      }\r\n    } else if (typeof props.canvas === 'string') {\r\n      this.canvas = getCanvasFromDOM(props.canvas);\r\n    } else {\r\n      this.canvas = props.canvas;\r\n    }\r\n\r\n    if (this.canvas instanceof HTMLCanvasElement) {\r\n      this.id = this.canvas.id;\r\n      this.type = 'html-canvas';\r\n      this.htmlCanvas = this.canvas;\r\n    } else {\r\n      this.id = 'offscreen-canvas';\r\n      this.type = 'offscreen-canvas';\r\n      this.offscreenCanvas = this.canvas;\r\n    }\r\n\r\n    // React to size changes\r\n    if (this.canvas instanceof HTMLCanvasElement && props.autoResize) {\r\n      this.resizeObserver = new ResizeObserver(entries => {\r\n        for (const entry of entries) {\r\n          if (entry.target === this.canvas) {\r\n            this.update();\r\n          }\r\n        }\r\n      });\r\n      this.resizeObserver.observe(this.canvas);\r\n    }\r\n  }\r\n\r\n  /** Returns a framebuffer with properly resized current 'swap chain' textures */\r\n  abstract getCurrentFramebuffer(): Framebuffer;\r\n\r\n  /**\r\n   * Returns the current DPR, if props.useDevicePixels is true\r\n   * Device refers to physical\r\n   */\r\n  getDevicePixelRatio(useDevicePixels?: boolean | number): number {\r\n    if (typeof OffscreenCanvas !== 'undefined' && this.canvas instanceof OffscreenCanvas) {\r\n      return 1;\r\n    }\r\n\r\n    useDevicePixels = useDevicePixels === undefined ? this.props.useDevicePixels : useDevicePixels;\r\n\r\n    if (!useDevicePixels || (useDevicePixels as number) <= 0) {\r\n      return 1;\r\n    }\r\n\r\n    // The param was mainly provide to support the test cases, could be removed\r\n    if (useDevicePixels === true) {\r\n      const dpr = typeof window !== 'undefined' && window.devicePixelRatio;\r\n      return dpr || 1;\r\n    }\r\n\r\n    return useDevicePixels;\r\n  }\r\n\r\n  /**\r\n   * Returns the size of drawing buffer in device pixels.\r\n   * @note This can be different from the 'CSS' size of a canvas, and also from the\r\n   * canvas' internal drawing buffer size (.width, .height).\r\n   * This is the size required to cover the canvas, adjusted for DPR\r\n   */\r\n  getPixelSize(): [number, number] {\r\n    switch (this.type) {\r\n      case 'node':\r\n        return [this.width, this.height];\r\n      case 'offscreen-canvas':\r\n        return [this.canvas.width, this.canvas.height];\r\n      case 'html-canvas':\r\n        const dpr = this.getDevicePixelRatio();\r\n        const canvas = this.canvas as HTMLCanvasElement;\r\n        // If not attached to DOM client size can be 0\r\n        return canvas.parentElement\r\n          ? [canvas.clientWidth * dpr, canvas.clientHeight * dpr]\r\n          : [this.canvas.width, this.canvas.height];\r\n      default:\r\n        throw new Error(this.type);\r\n    }\r\n  }\r\n\r\n  getAspect(): number {\r\n    const [width, height] = this.getPixelSize();\r\n    return width / height;\r\n  }\r\n\r\n  /**\r\n   * Returns multiplier need to convert CSS size to Device size\r\n   */\r\n  cssToDeviceRatio(): number {\r\n    try {\r\n      // For headless gl we might have used custom width and height\r\n      // hence use cached clientWidth\r\n      const [drawingBufferWidth] = this.getDrawingBufferSize();\r\n      // _canvasSizeInfo may not be populated if `setDevicePixelRatio` is never called\r\n      const clientWidth = this._canvasSizeInfo.clientWidth || this.htmlCanvas?.clientWidth;\r\n      return clientWidth ? drawingBufferWidth / clientWidth : 1;\r\n    } catch {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maps CSS pixel position to device pixel position\r\n   */\r\n  cssToDevicePixels(\r\n    cssPixel: number[],\r\n    yInvert: boolean = true\r\n  ): {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n  } {\r\n    const ratio = this.cssToDeviceRatio();\r\n    const [width, height] = this.getDrawingBufferSize();\r\n    return scalePixels(cssPixel, ratio, width, height, yInvert);\r\n  }\r\n\r\n  /**\r\n   * Use devicePixelRatio to set canvas width and height\r\n   * @note this is a raw port of luma.gl v8 code. Might be worth a review\r\n   */\r\n  setDevicePixelRatio(\r\n    devicePixelRatio: number,\r\n    options: {width?: number; height?: number} = {}\r\n  ): void {\r\n    if (!this.htmlCanvas) {\r\n      return;\r\n    }\r\n\r\n    // NOTE: if options.width and options.height not used remove in v8\r\n    let clientWidth = 'width' in options ? options.width : this.htmlCanvas.clientWidth;\r\n    let clientHeight = 'height' in options ? options.height : this.htmlCanvas.clientHeight;\r\n\r\n    if (!clientWidth || !clientHeight) {\r\n      log.log(1, 'Canvas clientWidth/clientHeight is 0')();\r\n      // by forcing devicePixel ratio to 1, we do not scale canvas.width and height in each frame.\r\n      devicePixelRatio = 1;\r\n      clientWidth = this.htmlCanvas.width || 1;\r\n      clientHeight = this.htmlCanvas.height || 1;\r\n    }\r\n\r\n    const cachedSize = this._canvasSizeInfo;\r\n    // Check if canvas needs to be resized\r\n    if (\r\n      cachedSize.clientWidth !== clientWidth ||\r\n      cachedSize.clientHeight !== clientHeight ||\r\n      cachedSize.devicePixelRatio !== devicePixelRatio\r\n    ) {\r\n      let clampedPixelRatio = devicePixelRatio;\r\n\r\n      const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\r\n      const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\r\n      this.htmlCanvas.width = canvasWidth;\r\n      this.htmlCanvas.height = canvasHeight;\r\n\r\n      // @ts-expect-error This only works for WebGL\r\n      const gl = this.device.gl;\r\n      if (gl) {\r\n        // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\r\n        // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\r\n        // for those cases, reduce devicePixelRatio.\r\n        const [drawingBufferWidth, drawingBufferHeight] = this.getDrawingBufferSize();\r\n\r\n        if (drawingBufferWidth !== canvasWidth || drawingBufferHeight !== canvasHeight) {\r\n          clampedPixelRatio = Math.min(\r\n            drawingBufferWidth / clientWidth,\r\n            drawingBufferHeight / clientHeight\r\n          );\r\n\r\n          this.htmlCanvas.width = Math.floor(clientWidth * clampedPixelRatio);\r\n          this.htmlCanvas.height = Math.floor(clientHeight * clampedPixelRatio);\r\n\r\n          log.warn('Device pixel ratio clamped')();\r\n        }\r\n\r\n        this._canvasSizeInfo.clientWidth = clientWidth;\r\n        this._canvasSizeInfo.clientHeight = clientHeight;\r\n        this._canvasSizeInfo.devicePixelRatio = devicePixelRatio;\r\n      }\r\n    }\r\n  }\r\n\r\n  // PRIVATE\r\n\r\n  /** @todo Major hack done to port the CSS methods above, base canvas context should not depend on WebGL */\r\n  getDrawingBufferSize(): [number, number] {\r\n    // @ts-expect-error This only works for WebGL\r\n    const gl = this.device.gl;\r\n    if (!gl) {\r\n      // use default device pixel ratio\r\n      throw new Error('canvas size');\r\n    }\r\n    return [gl.drawingBufferWidth, gl.drawingBufferHeight];\r\n  }\r\n\r\n  abstract resize(options?: {\r\n    width?: number;\r\n    height?: number;\r\n    useDevicePixels?: boolean | number;\r\n  }): void;\r\n\r\n  /** Perform platform specific updates (WebGPU vs WebGL) */\r\n  protected abstract update(): void;\r\n\r\n  /**\r\n   * Allows subclass constructor to override the canvas id for auto created canvases.\r\n   * This can really help when debugging DOM in apps that create multiple devices\r\n   */\r\n  protected _setAutoCreatedCanvasId(id: string) {\r\n    if (this.htmlCanvas?.id === 'lumagl-auto-created-canvas') {\r\n      this.htmlCanvas.id = id;\r\n    }\r\n  }\r\n}\r\n\r\n// HELPER FUNCTIONS\r\n\r\nfunction getContainer(container: HTMLElement | string | null): HTMLElement {\r\n  if (typeof container === 'string') {\r\n    const element = document.getElementById(container);\r\n    if (!element) {\r\n      throw new Error(`${container} is not an HTML element`);\r\n    }\r\n    return element;\r\n  } else if (container) {\r\n    return container;\r\n  }\r\n  return document.body;\r\n}\r\n\r\n/** Get a Canvas element from DOM id */\r\nfunction getCanvasFromDOM(canvasId: string): HTMLCanvasElement {\r\n  const canvas = document.getElementById(canvasId);\r\n  if (!(canvas instanceof HTMLCanvasElement)) {\r\n    throw new Error('Object is not a canvas element');\r\n  }\r\n  return canvas;\r\n}\r\n\r\n/** Create a new canvas */\r\nfunction createCanvas(props: CanvasContextProps) {\r\n  const {width, height} = props;\r\n  const targetCanvas = document.createElement('canvas');\r\n  targetCanvas.id = uid('lumagl-auto-created-canvas');\r\n  targetCanvas.width = width || 1;\r\n  targetCanvas.height = height || 1;\r\n  targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\r\n  targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\r\n  return targetCanvas;\r\n}\r\n\r\n/**\r\n *\r\n * @param pixel\r\n * @param ratio\r\n * @param width\r\n * @param height\r\n * @param yInvert\r\n * @returns\r\n */\r\nfunction scalePixels(\r\n  pixel: number[],\r\n  ratio: number,\r\n  width: number,\r\n  height: number,\r\n  yInvert: boolean\r\n): {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n} {\r\n  const point = pixel as [number, number];\r\n\r\n  const x = scaleX(point[0], ratio, width);\r\n  let y = scaleY(point[1], ratio, height, yInvert);\r\n\r\n  // Find boundaries of next pixel to provide valid range of device pixel locations\r\n\r\n  let t = scaleX(point[0] + 1, ratio, width);\r\n  // If next pixel's position is clamped to boundary, use it as is, otherwise subtract 1 for current pixel boundary\r\n  const xHigh = t === width - 1 ? t : t - 1;\r\n\r\n  t = scaleY(point[1] + 1, ratio, height, yInvert);\r\n  let yHigh;\r\n  if (yInvert) {\r\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\r\n    t = t === 0 ? t : t + 1;\r\n    // swap y and yHigh\r\n    yHigh = y;\r\n    y = t;\r\n  } else {\r\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\r\n    yHigh = t === height - 1 ? t : t - 1;\r\n    // y remains same\r\n  }\r\n  return {\r\n    x,\r\n    y,\r\n    // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.\r\n    width: Math.max(xHigh - x + 1, 1),\r\n    height: Math.max(yHigh - y + 1, 1)\r\n  };\r\n}\r\n\r\nfunction scaleX(x: number, ratio: number, width: number): number {\r\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\r\n  const r = Math.min(Math.round(x * ratio), width - 1);\r\n  return r;\r\n}\r\n\r\nfunction scaleY(y: number, ratio: number, height: number, yInvert: boolean): number {\r\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\r\n  return yInvert\r\n    ? Math.max(0, height - 1 - Math.round(y * ratio))\r\n    : Math.min(Math.round(y * ratio), height - 1);\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1983, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1989, "column": 0}, "map": {"version":3,"file":"texture-view.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/texture-view.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport type {Texture} from './texture';\r\nimport type {TextureFormat} from '../../gpu-type-utils/texture-formats';\r\nimport {Resource, ResourceProps} from './resource';\r\n\r\n/** Properties for initializing a texture view */\r\nexport type TextureViewProps = ResourceProps & {\r\n  /** The format of the texture view. Must be either the format of the texture or one of the viewFormats specified during its creation. */\r\n  format?: TextureFormat;\r\n  /** The dimension to view the texture as. */\r\n  dimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\r\n  /** Which aspect(s) of the texture are accessible to the texture view. default \"all\"*/\r\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\r\n  /** The first (most detailed) mipmap level accessible to the texture view.  default 0*/\r\n  baseMipLevel?: number;\r\n  /** How many mipmap levels, starting with baseMipLevel, are accessible to the texture view. */\r\n  mipLevelCount: number;\r\n  /** The index of the first array layer accessible to the texture view. default 0 */\r\n  baseArrayLayer?: number;\r\n  /** How many array layers, starting with baseArrayLayer, are accessible to the texture view. */\r\n  arrayLayerCount: number;\r\n};\r\n\r\n/** Immutable TextureView object */\r\nexport abstract class TextureView extends Resource<TextureViewProps> {\r\n  static override defaultProps: Required<TextureViewProps> = {\r\n    ...Resource.defaultProps,\r\n    format: undefined!,\r\n    dimension: undefined!,\r\n    aspect: 'all',\r\n    baseMipLevel: 0,\r\n    mipLevelCount: undefined!,\r\n    baseArrayLayer: 0,\r\n    arrayLayerCount: undefined!\r\n  };\r\n\r\n  abstract texture: Texture;\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'TextureView';\r\n  }\r\n\r\n  /** Should not be constructed directly. Use `texture.createView(props)` */\r\n  constructor(device: Device, props: TextureViewProps & {texture: Texture}) {\r\n    super(device, props, TextureView.defaultProps);\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAKpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAqB7C,MAAgB,WAAY,6LAAQ,WAA0B;IAClE,MAAM,CAAU,YAAY,GAA+B;QACzD,uLAAG,WAAQ,CAAC,YAAY;QACxB,MAAM,EAAE,SAAU;QAClB,SAAS,EAAE,SAAU;QACrB,MAAM,EAAE,KAAK;QACb,YAAY,EAAE,CAAC;QACf,aAAa,EAAE,SAAU;QACzB,cAAc,EAAE,CAAC;QACjB,eAAe,EAAE,SAAU;KAC5B,CAAC;IAIF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,wEAAA,EAA0E,CAC1E,YAAY,MAAc,EAAE,KAA4C,CAAA;QACtE,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2015, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2021, "column": 0}, "map": {"version":3,"file":"sampler.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/sampler.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport {CompareFunction} from '../types/parameters';\r\nimport {Resource, ResourceProps} from './resource';\r\n\r\n/** Edge values sampling mode */\r\nexport type SamplerAddressMode = 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\r\n\r\n/** Sampler filtering mode */\r\nexport type SamplerFilterMode = 'nearest' | 'linear';\r\n\r\n/**\r\n * Properties for initializing a sampler\r\n */\r\nexport type SamplerProps = ResourceProps & {\r\n  /** Comparison / shadow samplers are used with depth textures. See the `Sampler.compare` field */\r\n  type?: 'color-sampler' | 'comparison-sampler';\r\n  /** Edge value sampling in X direction */\r\n  addressModeU?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\r\n  /** Edge value sampling in Y direction */\r\n  addressModeV?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\r\n  /** Edge value sampling in Z direction */\r\n  addressModeW?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\r\n\r\n  /** Magnification: the area of the fragment in texture space is smaller than a texel */\r\n  magFilter?: 'nearest' | 'linear';\r\n  /** Minification: the area of the fragment in texture space is larger than a texel */\r\n  minFilter?: 'nearest' | 'linear';\r\n  /** mipmapping: select between multiple mipmaps based on angle and size of the texture relative to the screen. */\r\n  mipmapFilter?: 'none' | 'nearest' | 'linear';\r\n  /** Affects the mipmap image selection */\r\n  lodMinClamp?: number;\r\n  /** Affects the mipmap image selection */\r\n  lodMaxClamp?: number;\r\n  /** Maximum number of samples that can be taken of the texture during any one texture fetch */\r\n  maxAnisotropy?: number;\r\n  /** How to compare reference values provided in shader shadow sampler calls with those pulled from the texture */\r\n  compare?: CompareFunction;\r\n};\r\n\r\nexport type SamplerParameters = Omit<SamplerProps, keyof ResourceProps>;\r\n\r\n/** Immutable Sampler object */\r\nexport abstract class Sampler extends Resource<SamplerProps> {\r\n  static override defaultProps: Required<SamplerProps> = {\r\n    ...Resource.defaultProps,\r\n    type: 'color-sampler',\r\n    addressModeU: 'clamp-to-edge',\r\n    addressModeV: 'clamp-to-edge',\r\n    addressModeW: 'clamp-to-edge',\r\n    magFilter: 'nearest',\r\n    minFilter: 'nearest',\r\n    mipmapFilter: 'none',\r\n    lodMinClamp: 0,\r\n    lodMaxClamp: 32, // Per WebGPU spec\r\n    compare: 'less-equal',\r\n    maxAnisotropy: 1\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'Sampler';\r\n  }\r\n\r\n  constructor(device: Device, props: SamplerProps) {\r\n    props = Sampler.normalizeProps(device, props);\r\n    super(device, props, Sampler.defaultProps);\r\n  }\r\n\r\n  protected static normalizeProps(device: Device, props: SamplerProps): SamplerProps {\r\n    const overriddenDefaultProps: Partial<SamplerProps> =\r\n      device?.props?._resourceDefaults?.sampler || {};\r\n    const newProps = {...props, ...overriddenDefaultProps};\r\n    return newProps;\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAIpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAwC7C,MAAgB,OAAQ,6LAAQ,WAAsB;IAC1D,MAAM,CAAU,YAAY,GAA2B;QACrD,uLAAG,WAAQ,CAAC,YAAY;QACxB,IAAI,EAAE,eAAe;QACrB,YAAY,EAAE,eAAe;QAC7B,YAAY,EAAE,eAAe;QAC7B,YAAY,EAAE,eAAe;QAC7B,SAAS,EAAE,SAAS;QACpB,SAAS,EAAE,SAAS;QACpB,YAAY,EAAE,MAAM;QACpB,WAAW,EAAE,CAAC;QACd,WAAW,EAAE,EAAE,EAAE,kBAAkB;QACnC,OAAO,EAAE,YAAY;QACrB,aAAa,EAAE,CAAC;KACjB,CAAC;IAEF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,YAAY,MAAc,EAAE,KAAmB,CAAA;QAC7C,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC9C,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;IAC7C,CAAC;IAES,MAAM,CAAC,cAAc,CAAC,MAAc,EAAE,KAAmB,EAAA;QACjE,MAAM,sBAAsB,GAC1B,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC;QAClD,MAAM,QAAQ,GAAG;YAAC,GAAG,KAAK;YAAE,GAAG,sBAAsB;QAAA,CAAC,CAAC;QACvD,OAAO,QAAQ,CAAC;IAClB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2060, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2066, "column": 0}, "map": {"version":3,"file":"format-compiler-log.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter-utils/format-compiler-log.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {CompilerMessage} from '../adapter/types/compiler-message';\r\n\r\n/** @returns annotated errors or warnings */\r\nexport function formatCompilerLog(\r\n  shaderLog: readonly CompilerMessage[],\r\n  source: string,\r\n  options?: {\r\n    /** Include source code in the log. Either just the lines before issues or all source code */\r\n    showSourceCode?: 'no' | 'issues' | 'all';\r\n    html?: boolean;\r\n  }\r\n): string {\r\n  let formattedLog = '';\r\n  const lines = source.split(/\\r?\\n/);\r\n  const log = shaderLog.slice().sort((a, b) => a.lineNum - b.lineNum);\r\n\r\n  switch (options?.showSourceCode || 'no') {\r\n    case 'all':\r\n      // Parse the error - note: browser and driver dependent\r\n      let currentMessage = 0;\r\n      for (let lineNum = 1; lineNum <= lines.length; lineNum++) {\r\n        formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);\r\n        while (log.length > currentMessage && log[currentMessage].lineNum === lineNum) {\r\n          const message = log[currentMessage++];\r\n          formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\r\n            ...options,\r\n            inlineSource: false\r\n          });\r\n        }\r\n      }\r\n      return formattedLog;\r\n\r\n    case 'issues':\r\n    case 'no':\r\n      // Parse the error - note: browser and driver dependent\r\n      for (const message of shaderLog) {\r\n        formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\r\n          inlineSource: options?.showSourceCode !== 'no'\r\n        });\r\n      }\r\n      return formattedLog;\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Format one message */\r\nfunction formatCompilerMessage(\r\n  message: CompilerMessage,\r\n  lines: readonly string[],\r\n  lineNum: number,\r\n  options: {\r\n    inlineSource?: boolean;\r\n    html?: boolean;\r\n  }\r\n): string {\r\n  if (options?.inlineSource) {\r\n    const numberedLines = getNumberedLines(lines, lineNum);\r\n    // If we got error position on line add a `^^^` indicator on next line\r\n    const positionIndicator = message.linePos > 0 ? `${' '.repeat(message.linePos + 5)}^^^\\n` : '';\r\n    return `\r\n${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}\r\n\r\n`;\r\n  }\r\n  const color = message.type === 'error' ? 'red' : '#8B4000'; // dark orange\r\n  return options?.html\r\n    ? `<div class='luma-compiler-log-error' style=\"color:${color};\"><b> ${message.type.toUpperCase()}: ${\r\n        message.message\r\n      }</b></div>`\r\n    : `${message.type.toUpperCase()}: ${message.message}`;\r\n}\r\n\r\nfunction getNumberedLines(\r\n  lines: readonly string[],\r\n  lineNum: number,\r\n  options?: {html?: boolean}\r\n): string {\r\n  let numberedLines = '';\r\n  for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {\r\n    const sourceLine = lines[lineIndex - 1];\r\n    if (sourceLine !== undefined) {\r\n      numberedLines += getNumberedLine(sourceLine, lineNum, options);\r\n    }\r\n  }\r\n  return numberedLines;\r\n}\r\n\r\nfunction getNumberedLine(line: string, lineNum: number, options?: {html?: boolean}): string {\r\n  const escapedLine = options?.html ? escapeHTML(line) : line;\r\n  return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? '<br/>' : '\\n'}`;\r\n}\r\n\r\n/**\r\n * Pads a string with a number of spaces (space characters) to the left\r\n * @param {String} string - string to pad\r\n * @param {Number} digits - number of spaces to add\r\n * @return {String} string - The padded string\r\n */\r\nfunction padLeft(string: string, paddedLength: number): string {\r\n  let result = '';\r\n  for (let i = string.length; i < paddedLength; ++i) {\r\n    result += ' ';\r\n  }\r\n  return result + string;\r\n}\r\n\r\nfunction escapeHTML(unsafe: string): string {\r\n  return unsafe\r\n    .replaceAll('&', '&amp;')\r\n    .replaceAll('<', '&lt;')\r\n    .replaceAll('>', '&gt;')\r\n    .replaceAll('\"', '&quot;')\r\n    .replaceAll(\"'\", '&#039;');\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2145, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2151, "column": 0}, "map": {"version":3,"file":"shader.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/shader.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport {Resource, ResourceProps} from './resource';\r\n// import { log } from '../../utils/log';\r\nimport {uid} from '../../utils/uid';\r\nimport {CompilerMessage} from '../types/compiler-message';\r\nimport {formatCompilerLog} from '../../adapter-utils/format-compiler-log';\r\n\r\n/**\r\n * Properties for a Shader\r\n */\r\nexport type ShaderProps = ResourceProps & {\r\n  /** Shader language (defaults to auto) */\r\n  language?: 'glsl' | 'wgsl' | 'auto';\r\n  /** Which stage are we compiling? Required for GLSL. Ignored for WGSL. */\r\n  stage?: 'vertex' | 'fragment' | 'compute';\r\n  /** Shader source code */\r\n  source: string;\r\n  /** Optional shader source map (WebGPU only) */\r\n  sourceMap?: string | null;\r\n  /** Optional shader entry point (WebGPU only) */\r\n  entryPoint?: string;\r\n  /** Show shader source in browser? Overrides the device.props.debugShaders setting */\r\n  debugShaders?: 'never' | 'errors' | 'warnings' | 'always';\r\n};\r\n\r\n/**\r\n * Immutable Shader object\r\n * In WebGPU the handle can be copied between threads\r\n */\r\nexport abstract class Shader extends Resource<ShaderProps> {\r\n  static override defaultProps: Required<ShaderProps> = {\r\n    ...Resource.defaultProps,\r\n    language: 'auto',\r\n    stage: undefined!,\r\n    source: '',\r\n    sourceMap: null,\r\n    entryPoint: 'main',\r\n    debugShaders: undefined!\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'Shader';\r\n  }\r\n\r\n  /** The stage of this shader */\r\n  readonly stage: 'vertex' | 'fragment' | 'compute';\r\n  /** The source code of this shader */\r\n  readonly source: string;\r\n  /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */\r\n  compilationStatus: 'pending' | 'success' | 'error' = 'pending';\r\n\r\n  /** Create a new Shader instance */\r\n  constructor(device: Device, props: ShaderProps) {\r\n    props = {...props, debugShaders: props.debugShaders || device.props.debugShaders || 'errors'};\r\n    super(device, {id: getShaderIdFromProps(props), ...props}, Shader.defaultProps);\r\n    this.stage = this.props.stage;\r\n    this.source = this.props.source;\r\n  }\r\n\r\n  abstract get asyncCompilationStatus(): Promise<'pending' | 'success' | 'error'>;\r\n\r\n  /** Get compiler log asynchronously */\r\n  abstract getCompilationInfo(): Promise<readonly CompilerMessage[]>;\r\n\r\n  /** Get compiler log synchronously (WebGL only) */\r\n  getCompilationInfoSync(): readonly CompilerMessage[] | null {\r\n    return null;\r\n  }\r\n\r\n  /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */\r\n  getTranslatedSource(): string | null {\r\n    return null;\r\n  }\r\n\r\n  // PORTABLE HELPERS\r\n\r\n  /** In browser logging of errors */\r\n  async debugShader(): Promise<void> {\r\n    const trigger = this.props.debugShaders;\r\n    switch (trigger) {\r\n      case 'never':\r\n        return;\r\n      case 'errors':\r\n        // On WebGL - Don't extract the log unless errors\r\n        if (this.compilationStatus === 'success') {\r\n          return;\r\n        }\r\n        break;\r\n      case 'warnings':\r\n      case 'always':\r\n        break;\r\n    }\r\n\r\n    const messages = await this.getCompilationInfo();\r\n    if (trigger === 'warnings' && messages?.length === 0) {\r\n      return;\r\n    }\r\n    this._displayShaderLog(messages);\r\n  }\r\n\r\n  // PRIVATE\r\n\r\n  /**\r\n   * In-browser UI logging of errors\r\n   * TODO - this HTML formatting code should not be in Device, should be pluggable\r\n   */\r\n  protected _displayShaderLog(messages: readonly CompilerMessage[]): void {\r\n    // Return if under Node.js / incomplete `document` polyfills\r\n    if (typeof document === 'undefined' || !document?.createElement) {\r\n      return;\r\n    }\r\n\r\n    const shaderName: string = getShaderName(this.source);\r\n    const shaderTitle: string = `${this.stage} ${shaderName}`;\r\n    let htmlLog = formatCompilerLog(messages, this.source, {showSourceCode: 'all', html: true});\r\n    // Show translated source if available\r\n    const translatedSource = this.getTranslatedSource();\r\n    if (translatedSource) {\r\n      htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style=\"user-select:text;\"><pre>${translatedSource}</pre></code>`;\r\n    }\r\n    // Make it clickable so we can copy to clipboard\r\n    const button = document.createElement('Button');\r\n    button.innerHTML = `\r\n<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />\r\n<code style=\"user-select:text;\"><pre>\r\n${htmlLog}\r\n</pre></code>`;\r\n    button.style.top = '10px';\r\n    button.style.left = '10px';\r\n    button.style.position = 'absolute';\r\n    button.style.zIndex = '9999';\r\n    button.style.width = '100%';\r\n    button.style.textAlign = 'left';\r\n    document.body.appendChild(button);\r\n\r\n    const errors = document.getElementsByClassName('luma-compiler-log-error');\r\n    errors[0]?.scrollIntoView();\r\n\r\n    // TODO - add a small embedded copy button (instead of main button)\r\n    button.onclick = () => {\r\n      // const source = this.source.replaceAll('\\n', '<br />');\r\n      const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;\r\n      navigator.clipboard.writeText(dataURI);\r\n    };\r\n\r\n    // TODO - add a small embedded close button\r\n  }\r\n}\r\n\r\n// HELPERS\r\n\r\n/** Deduce an id, from shader source, or supplied id, or shader type */\r\nfunction getShaderIdFromProps(props: ShaderProps): string {\r\n  return getShaderName(props.source) || props.id || uid(`unnamed ${props.stage}-shader`);\r\n}\r\n\r\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\r\nfunction getShaderName(shader: string, defaultName: string = 'unnamed'): string {\r\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\r\n  const match = SHADER_NAME_REGEXP.exec(shader);\r\n  return match ? match[1] : defaultName;\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2280, "column": 0}, "map": {"version":3,"file":"array-utils-flat.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/utils/array-utils-flat.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {TypedArray} from '../types';\r\n\r\nlet arrayBuffer: ArrayBuffer;\r\n\r\nexport function getScratchArrayBuffer(byteLength: number): ArrayBuffer {\r\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\r\n    arrayBuffer = new ArrayBuffer(byteLength);\r\n  }\r\n  return arrayBuffer;\r\n}\r\n\r\nexport function getScratchArray(Type: any, length: number): TypedArray {\r\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\r\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;;AAIpC,IAAI,WAAwB,CAAC;AAEvB,SAAU,qBAAqB,CAAC,UAAkB;IACtD,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC;QACxD,WAAW,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAEK,SAAU,eAAe,CAAC,IAAS,EAAE,MAAc;IACvD,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,CAAC;IAClF,OAAO,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,gDAAgD;AAClG,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2304, "column": 0}, "map": {"version":3,"file":"decode-attribute-type.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/decode-attribute-type.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {ShaderDataType, ShaderAttributeType} from './shader-types';\r\nimport {VertexFormat, VertexType} from './vertex-formats';\r\n\r\n/** Information extracted from a ShaderAttributeInfo constant */\r\nexport type ShaderAttributeTypeInfo = {\r\n  /** WGSL-style primitive data type, f32, i32, u32 */\r\n  dataType: ShaderDataType;\r\n  /** Whether this is a normalized integer (that must be used as float) */\r\n  components: 1 | 2 | 3 | 4;\r\n  /** Length in bytes of the data for one vertex */\r\n  byteLength?: number;\r\n  /** Whether this is for integer or float vert */\r\n  integer: boolean;\r\n  /** Whether this data type is signed */\r\n  signed: boolean;\r\n  /** The simplest vertex format that matches the shader attribute's data type */\r\n  defaultVertexFormat: VertexFormat;\r\n};\r\n\r\n/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */\r\nexport function decodeShaderAttributeType(\r\n  attributeType: ShaderAttributeType\r\n): ShaderAttributeTypeInfo {\r\n  const [dataType, components] = TYPE_INFO[attributeType];\r\n  const integer: boolean = dataType === 'i32' || dataType === 'u32';\r\n  const signed: boolean = dataType !== 'u32';\r\n\r\n  const byteLength = TYPE_SIZES[dataType] * components;\r\n  const defaultVertexFormat = getCompatibleVertexFormat(dataType, components);\r\n  return {\r\n    dataType,\r\n    components,\r\n    defaultVertexFormat,\r\n    byteLength,\r\n    integer,\r\n    signed\r\n  };\r\n}\r\n\r\n/** Get the \"default\" vertex format for a certain shader data type */\r\nfunction getCompatibleVertexFormat(\r\n  dataType: ShaderDataType,\r\n  components: 1 | 2 | 3 | 4\r\n): VertexFormat {\r\n  let vertexType: VertexType;\r\n  switch (dataType) {\r\n    case 'f32':\r\n      vertexType = 'float32';\r\n      break;\r\n    case 'i32':\r\n      vertexType = 'sint32';\r\n      break;\r\n    case 'u32':\r\n      vertexType = 'uint32';\r\n      break;\r\n    case 'f16':\r\n      return components <= 2 ? 'float16x2' : 'float16x4';\r\n  }\r\n  // TODO logic does not work for float16\r\n  if (components === 1) {\r\n    return vertexType;\r\n  }\r\n  return `${vertexType}x${components}`;\r\n}\r\n\r\n/** All valid shader attribute types. A table guarantees exhaustive list and fast execution */\r\nconst TYPE_INFO: Record<ShaderAttributeType, [ShaderDataType, 1 | 2 | 3 | 4]> = {\r\n  f32: ['f32', 1],\r\n  'vec2<f32>': ['f32', 2],\r\n  'vec3<f32>': ['f32', 3],\r\n  'vec4<f32>': ['f32', 4],\r\n  f16: ['f16', 1],\r\n  'vec2<f16>': ['f16', 2],\r\n  'vec3<f16>': ['f16', 3],\r\n  'vec4<f16>': ['f16', 4],\r\n  i32: ['i32', 1],\r\n  'vec2<i32>': ['i32', 2],\r\n  'vec3<i32>': ['i32', 3],\r\n  'vec4<i32>': ['i32', 4],\r\n  u32: ['u32', 1],\r\n  'vec2<u32>': ['u32', 2],\r\n  'vec3<u32>': ['u32', 3],\r\n  'vec4<u32>': ['u32', 4]\r\n};\r\n\r\nconst TYPE_SIZES: Record<ShaderDataType, number> = {\r\n  f32: 4,\r\n  f16: 2,\r\n  i32: 4,\r\n  u32: 4\r\n  // 'bool-webgl': 4,\r\n};\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAqBpC,yFAAA,EAA2F;;;AACrF,SAAU,yBAAyB,CACvC,aAAkC;IAElC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;IACxD,MAAM,OAAO,GAAY,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;IAClE,MAAM,MAAM,GAAY,QAAQ,KAAK,KAAK,CAAC;IAE3C,MAAM,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;IACrD,MAAM,mBAAmB,GAAG,yBAAyB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC5E,OAAO;QACL,QAAQ;QACR,UAAU;QACV,mBAAmB;QACnB,UAAU;QACV,OAAO;QACP,MAAM;KACP,CAAC;AACJ,CAAC;AAED,mEAAA,EAAqE,CACrE,SAAS,yBAAyB,CAChC,QAAwB,EACxB,UAAyB;IAEzB,IAAI,UAAsB,CAAC;IAC3B,OAAQ,QAAQ,EAAE,CAAC;QACjB,KAAK,KAAK;YACR,UAAU,GAAG,SAAS,CAAC;YACvB,MAAM;QACR,KAAK,KAAK;YACR,UAAU,GAAG,QAAQ,CAAC;YACtB,MAAM;QACR,KAAK,KAAK;YACR,UAAU,GAAG,QAAQ,CAAC;YACtB,MAAM;QACR,KAAK,KAAK;YACR,OAAO,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC;IACvD,CAAC;IACD,uCAAuC;IACvC,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;QACrB,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,OAAO,GAAG,UAAU,CAAA,CAAA,EAAI,UAAU,EAAE,CAAC;AACvC,CAAC;AAED,4FAAA,EAA8F,CAC9F,MAAM,SAAS,GAAiE;IAC9E,GAAG,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACf,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,GAAG,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACf,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,GAAG,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACf,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,GAAG,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACf,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;IACvB,WAAW,EAAE;QAAC,KAAK;QAAE,CAAC;KAAC;CACxB,CAAC;AAEF,MAAM,UAAU,GAAmC;IACjD,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;CAEP,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2418, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2424, "column": 0}, "map": {"version":3,"file":"decode-vertex-format.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/decode-vertex-format.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {VertexFormat, VertexType} from './vertex-formats';\r\nimport {decodeVertexType} from './decode-data-type';\r\n\r\nexport type VertexFormatInfo = {\r\n  /** Length in bytes */\r\n  byteLength: number;\r\n  /** Type of each component */\r\n  type: VertexType;\r\n  /** Number of components per vertex / row */\r\n  components: 1 | 2 | 3 | 4;\r\n  /** Is this an integer format (normalized integer formats are not integer) */\r\n  integer: boolean;\r\n  /** Is this a signed format? */\r\n  signed: boolean;\r\n  /** Is this a normalized format? */\r\n  normalized: boolean;\r\n  /** Is this a webgl only format? */\r\n  webglOnly?: boolean;\r\n};\r\n\r\n/**\r\n * Decodes a vertex format, returning type, components, byte  length and flags (integer, signed, normalized)\r\n */\r\nexport function decodeVertexFormat(format: VertexFormat): VertexFormatInfo {\r\n  // Strip the -webgl ending if present\r\n  let webglOnly: boolean | undefined;\r\n  if (format.endsWith('-webgl')) {\r\n    format.replace('-webgl', '');\r\n    webglOnly = true;\r\n  }\r\n  // split components from type\r\n  const [type_, count] = format.split('x');\r\n  const type = type_ as VertexType;\r\n  const components = (count ? parseInt(count) : 1) as 1 | 2 | 3 | 4;\r\n  // decode the type\r\n  const decodedType = decodeVertexType(type);\r\n  const result: VertexFormatInfo = {\r\n    type,\r\n    components,\r\n    byteLength: decodedType.byteLength * components,\r\n    integer: decodedType.integer,\r\n    signed: decodedType.signed,\r\n    normalized: decodedType.normalized\r\n  };\r\n  if (webglOnly) {\r\n    result.webglOnly = true;\r\n  }\r\n  return result;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAGpC,OAAO,EAAC,gBAAgB,EAAC,8BAA2B;;AAsB9C,SAAU,kBAAkB,CAAC,MAAoB;IACrD,qCAAqC;IACrC,IAAI,SAA8B,CAAC;IACnC,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC9B,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7B,SAAS,GAAG,IAAI,CAAC;IACnB,CAAC;IACD,6BAA6B;IAC7B,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzC,MAAM,IAAI,GAAG,KAAmB,CAAC;IACjC,MAAM,UAAU,GAAG,AAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAkB,CAAC;IAClE,kBAAkB;IAClB,MAAM,WAAW,GAAG,yNAAA,AAAgB,EAAC,IAAI,CAAC,CAAC;IAC3C,MAAM,MAAM,GAAqB;QAC/B,IAAI;QACJ,UAAU;QACV,UAAU,EAAE,WAAW,CAAC,UAAU,GAAG,UAAU;QAC/C,OAAO,EAAE,WAAW,CAAC,OAAO;QAC5B,MAAM,EAAE,WAAW,CAAC,MAAM;QAC1B,UAAU,EAAE,WAAW,CAAC,UAAU;KACnC,CAAC;IACF,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2458, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2464, "column": 0}, "map": {"version":3,"file":"get-attribute-from-layouts.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter-utils/get-attribute-from-layouts.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {log} from '../utils/log';\r\nimport type {ShaderLayout, AttributeDeclaration} from '../adapter/types/shader-layout';\r\nimport type {BufferLayout} from '../adapter/types/buffer-layout';\r\nimport type {ShaderDataType, ShaderAttributeType} from '../gpu-type-utils/shader-types';\r\nimport {decodeShaderAttributeType} from '../gpu-type-utils/decode-attribute-type';\r\nimport type {VertexFormat, VertexType} from '../gpu-type-utils/vertex-formats';\r\nimport {decodeVertexFormat} from '../gpu-type-utils/decode-vertex-format';\r\n\r\n/** Resolved info for a buffer / attribute combination to help backend configure it correctly */\r\nexport type AttributeInfo = {\r\n  /** Attribute name */\r\n  attributeName: string;\r\n  /** Location in shader */\r\n  location: number;\r\n  /** Type / precision used in shader (buffer values may be converted) */\r\n  shaderType: ShaderAttributeType;\r\n  /** Calculations are done in this type in the shader's attribute declaration */\r\n  shaderDataType: ShaderDataType;\r\n  /** Components refer to the number of components in the shader's attribute declaration */\r\n  shaderComponents: 1 | 2 | 3 | 4;\r\n  /** It is the shader attribute declaration that determines whether GPU will process as integer or float */\r\n  integer: boolean;\r\n\r\n  /** BufferName */\r\n  bufferName: string;\r\n  /** Format of buffer data */\r\n  vertexFormat: VertexFormat;\r\n  /** Memory data type refers to the data type in the buffer */\r\n  bufferDataType: VertexType;\r\n  /** Components refer to the number of components in the buffer's vertex format */\r\n  bufferComponents: 1 | 2 | 3 | 4;\r\n  /** Normalization is encoded in the buffer layout's vertex format... */\r\n  normalized: boolean;\r\n\r\n  /** If not specified, the step mode is inferred from the attribute name in the shader (contains string instance) */\r\n  stepMode: 'vertex' | 'instance';\r\n\r\n  /** The byteOffset is encoded in or calculated from the buffer layout */\r\n  byteOffset: number;\r\n  /** The byteStride is encoded in or calculated from the buffer layout */\r\n  byteStride: number;\r\n};\r\n\r\ntype BufferAttributeInfo = {\r\n  attributeName: string;\r\n  bufferName: string;\r\n  stepMode?: 'vertex' | 'instance';\r\n  vertexFormat: VertexFormat;\r\n  byteOffset: number;\r\n  byteStride: number;\r\n};\r\n\r\n/**\r\n * Map from \"attribute names\" to \"resolved attribute infos\"\r\n * containing information about both buffer layouts and shader attribute declarations\r\n */\r\nexport function getAttributeInfosFromLayouts(\r\n  shaderLayout: ShaderLayout,\r\n  bufferLayout: BufferLayout[]\r\n): Record<string, AttributeInfo> {\r\n  const attributeInfos: Record<string, AttributeInfo> = {};\r\n  for (const attribute of shaderLayout.attributes) {\r\n    const attributeInfo = getAttributeInfoFromLayouts(shaderLayout, bufferLayout, attribute.name);\r\n    if (attributeInfo) {\r\n      attributeInfos[attribute.name] = attributeInfo;\r\n    }\r\n  }\r\n  return attributeInfos;\r\n}\r\n\r\n/**\r\n * Array indexed by \"location\" holding \"resolved attribute infos\"\r\n */\r\nexport function getAttributeInfosByLocation(\r\n  shaderLayout: ShaderLayout,\r\n  bufferLayout: BufferLayout[],\r\n  maxVertexAttributes: number = 16\r\n): AttributeInfo[] {\r\n  const attributeInfos = getAttributeInfosFromLayouts(shaderLayout, bufferLayout);\r\n  const locationInfos: AttributeInfo[] = new Array(maxVertexAttributes).fill(null);\r\n  for (const attributeInfo of Object.values(attributeInfos)) {\r\n    locationInfos[attributeInfo.location] = attributeInfo;\r\n  }\r\n  return locationInfos;\r\n}\r\n\r\n/**\r\n * Get the combined information from a shader layout and a buffer layout for a specific attribute\r\n */\r\nfunction getAttributeInfoFromLayouts(\r\n  shaderLayout: ShaderLayout,\r\n  bufferLayout: BufferLayout[],\r\n  name: string\r\n): AttributeInfo | null {\r\n  const shaderDeclaration = getAttributeFromShaderLayout(shaderLayout, name);\r\n  const bufferMapping: BufferAttributeInfo | null = getAttributeFromBufferLayout(\r\n    bufferLayout,\r\n    name\r\n  );\r\n\r\n  // TODO should no longer happen\r\n  if (!shaderDeclaration) {\r\n    //  || !bufferMapping\r\n    return null;\r\n  }\r\n\r\n  const attributeTypeInfo = decodeShaderAttributeType(shaderDeclaration.type);\r\n  const vertexFormat = bufferMapping?.vertexFormat || attributeTypeInfo.defaultVertexFormat;\r\n  const vertexFormatInfo = decodeVertexFormat(vertexFormat);\r\n\r\n  return {\r\n    attributeName: bufferMapping?.attributeName || shaderDeclaration.name,\r\n    bufferName: bufferMapping?.bufferName || shaderDeclaration.name,\r\n    location: shaderDeclaration.location,\r\n    shaderType: shaderDeclaration.type,\r\n    shaderDataType: attributeTypeInfo.dataType,\r\n    shaderComponents: attributeTypeInfo.components,\r\n    vertexFormat,\r\n    bufferDataType: vertexFormatInfo.type,\r\n    bufferComponents: vertexFormatInfo.components,\r\n    // normalized is a property of the buffer's vertex format\r\n    normalized: vertexFormatInfo.normalized,\r\n    // integer is a property of the shader declaration\r\n    integer: attributeTypeInfo.integer,\r\n    stepMode: bufferMapping?.stepMode || shaderDeclaration.stepMode || 'vertex',\r\n    byteOffset: bufferMapping?.byteOffset || 0,\r\n    byteStride: bufferMapping?.byteStride || 0\r\n  };\r\n}\r\n\r\nfunction getAttributeFromShaderLayout(\r\n  shaderLayout: ShaderLayout,\r\n  name: string\r\n): AttributeDeclaration | null {\r\n  const attribute = shaderLayout.attributes.find(attr => attr.name === name);\r\n  if (!attribute) {\r\n    log.warn(`shader layout attribute \"${name}\" not present in shader`);\r\n  }\r\n  return attribute || null;\r\n}\r\n\r\nfunction getAttributeFromBufferLayout(\r\n  bufferLayouts: BufferLayout[],\r\n  name: string\r\n): BufferAttributeInfo | null {\r\n  // Check that bufferLayouts are valid (each either has format or attribute)\r\n  checkBufferLayouts(bufferLayouts);\r\n\r\n  let bufferLayoutInfo = getAttributeFromShortHand(bufferLayouts, name);\r\n  if (bufferLayoutInfo) {\r\n    return bufferLayoutInfo;\r\n  }\r\n\r\n  bufferLayoutInfo = getAttributeFromAttributesList(bufferLayouts, name);\r\n  if (bufferLayoutInfo) {\r\n    return bufferLayoutInfo;\r\n  }\r\n\r\n  // Didn't find...\r\n  log.warn(`layout for attribute \"${name}\" not present in buffer layout`);\r\n  return null;\r\n}\r\n\r\n/** Check that bufferLayouts are valid (each either has format or attribute) */\r\nfunction checkBufferLayouts(bufferLayouts: BufferLayout[]) {\r\n  for (const bufferLayout of bufferLayouts) {\r\n    if (\r\n      (bufferLayout.attributes && bufferLayout.format) ||\r\n      (!bufferLayout.attributes && !bufferLayout.format)\r\n    ) {\r\n      log.warn(`BufferLayout ${name} must have either 'attributes' or 'format' field`);\r\n    }\r\n  }\r\n}\r\n\r\n/** Get attribute from format shorthand if specified */\r\nfunction getAttributeFromShortHand(\r\n  bufferLayouts: BufferLayout[],\r\n  name: string\r\n): BufferAttributeInfo | null {\r\n  for (const bufferLayout of bufferLayouts) {\r\n    if (bufferLayout.format && bufferLayout.name === name) {\r\n      return {\r\n        attributeName: bufferLayout.name,\r\n        bufferName: name,\r\n        stepMode: bufferLayout.stepMode,\r\n        vertexFormat: bufferLayout.format,\r\n        // If offset is needed, use `attributes` field.\r\n        byteOffset: 0,\r\n        byteStride: bufferLayout.byteStride || 0\r\n      };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Search attribute mappings (e.g. interleaved attributes) for buffer mapping.\r\n * Not the name of the buffer might be the same as one of the interleaved attributes.\r\n */\r\nfunction getAttributeFromAttributesList(\r\n  bufferLayouts: BufferLayout[],\r\n  name: string\r\n): BufferAttributeInfo | null {\r\n  for (const bufferLayout of bufferLayouts) {\r\n    let byteStride: number | undefined = bufferLayout.byteStride;\r\n\r\n    // Calculate a default byte stride if not provided\r\n    if (typeof bufferLayout.byteStride !== 'number') {\r\n      for (const attributeMapping of bufferLayout.attributes || []) {\r\n        const info = decodeVertexFormat(attributeMapping.format);\r\n        // @ts-ignore\r\n        byteStride += info.byteLength;\r\n      }\r\n    }\r\n\r\n    const attributeMapping = bufferLayout.attributes?.find(mapping => mapping.attribute === name);\r\n    if (attributeMapping) {\r\n      return {\r\n        attributeName: attributeMapping.attribute,\r\n        bufferName: bufferLayout.name,\r\n        stepMode: bufferLayout.stepMode,\r\n        vertexFormat: attributeMapping.format,\r\n        byteOffset: attributeMapping.byteOffset,\r\n        // @ts-ignore\r\n        byteStride\r\n      };\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2601, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2607, "column": 0}, "map": {"version":3,"file":"vertex-array.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/vertex-array.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {TypedArray} from '../../types';\r\nimport {\r\n  AttributeInfo,\r\n  getAttributeInfosByLocation\r\n} from '../../adapter-utils/get-attribute-from-layouts';\r\nimport type {Device} from '../device';\r\nimport type {Buffer} from './buffer';\r\nimport type {RenderPass} from './render-pass';\r\nimport type {RenderPipeline} from './render-pipeline';\r\nimport {Resource, ResourceProps} from './resource';\r\n\r\n/** Properties for initializing a VertexArray */\r\nexport type VertexArrayProps = ResourceProps & {\r\n  renderPipeline: RenderPipeline | null;\r\n};\r\n\r\n/**\r\n * Stores attribute bindings.\r\n * Makes it easy to share a render pipeline and use separate vertex arrays.\r\n * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance\r\n * reducing the number of WebGL calls per draw call.\r\n * @note On WebGPU this is just a convenience class that collects the bindings.\r\n */\r\nexport abstract class VertexArray extends Resource<VertexArrayProps> {\r\n  static override defaultProps: Required<VertexArrayProps> = {\r\n    ...Resource.defaultProps,\r\n    renderPipeline: null\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'VertexArray';\r\n  }\r\n\r\n  /** Max number of vertex attributes */\r\n  readonly maxVertexAttributes: number;\r\n  /** Attribute infos indexed by location - TODO only needed by webgl module? */\r\n  protected readonly attributeInfos: AttributeInfo[];\r\n\r\n  /** Index buffer */\r\n  indexBuffer: Buffer | null = null;\r\n  /** Attributes indexed by buffer slot */\r\n  attributes: (Buffer | TypedArray | null)[];\r\n\r\n  constructor(device: Device, props: VertexArrayProps) {\r\n    super(device, props, VertexArray.defaultProps);\r\n    this.maxVertexAttributes = device.limits.maxVertexAttributes;\r\n    this.attributes = new Array(this.maxVertexAttributes).fill(null);\r\n    const {shaderLayout, bufferLayout} = props.renderPipeline || {};\r\n    if (!shaderLayout || !bufferLayout) {\r\n      throw new Error('VertexArray');\r\n    }\r\n    this.attributeInfos = getAttributeInfosByLocation(\r\n      shaderLayout,\r\n      bufferLayout,\r\n      this.maxVertexAttributes\r\n    );\r\n  }\r\n\r\n  /** Set attributes (stored on pipeline and set before each call) */\r\n  abstract setIndexBuffer(indices: Buffer | null): void;\r\n  /** Set attributes (stored on pipeline and set before each call) */\r\n  abstract setBuffer(bufferSlot: number, buffer: Buffer | null): void;\r\n\r\n  abstract bindBeforeRender(renderPass: RenderPass): void;\r\n  abstract unbindAfterRender(renderPass: RenderPass): void;\r\n\r\n  // DEPRECATED METHODS\r\n\r\n  /** @deprecated Set constant attributes (WebGL only) */\r\n  setConstantWebGL(location: number, value: TypedArray | null): void {\r\n    throw new Error('constant attributes not supported');\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAWpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;AARnD,OAAO,EAEL,2BAA2B,EAC5B,0DAAuD;;;AAmBlD,MAAgB,WAAY,6LAAQ,WAA0B;IAClE,MAAM,CAAU,YAAY,GAA+B;QACzD,uLAAG,WAAQ,CAAC,YAAY;QACxB,cAAc,EAAE,IAAI;KACrB,CAAC;IAEF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,oCAAA,EAAsC,CAC7B,mBAAmB,CAAS;IACrC,4EAAA,EAA8E,CAC3D,cAAc,CAAkB;IAEnD,iBAAA,EAAmB,CACnB,WAAW,GAAkB,IAAI,CAAC;IAClC,sCAAA,EAAwC,CACxC,UAAU,CAAiC;IAE3C,YAAY,MAAc,EAAE,KAAuB,CAAA;QACjD,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC;QAC7D,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,EAAC,YAAY,EAAE,YAAY,EAAC,GAAG,KAAK,CAAC,cAAc,IAAI,CAAA,CAAE,CAAC;QAChE,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QACD,IAAI,CAAC,cAAc,kNAAG,8BAAA,AAA2B,EAC/C,YAAY,EACZ,YAAY,EACZ,IAAI,CAAC,mBAAmB,CACzB,CAAC;IACJ,CAAC;IAUD,qBAAqB;IAErB,qDAAA,EAAuD,CACvD,gBAAgB,CAAC,QAAgB,EAAE,KAAwB,EAAA;QACzD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACvD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2644, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2650, "column": 0}, "map": {"version":3,"file":"transform-feedback.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/transform-feedback.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport {PrimitiveTopology} from '../types/parameters';\r\nimport {ShaderLayout} from '../types/shader-layout';\r\nimport type {Buffer} from './buffer';\r\nimport {Resource, ResourceProps} from './resource';\r\n\r\n/** For bindRange */\r\nexport type BufferRange = {\r\n  buffer: Buffer;\r\n  byteOffset?: number;\r\n  byteLength?: number;\r\n};\r\n\r\n/** Configures a set of output buffers for pipeline (WebGL only) */\r\nexport type TransformFeedbackProps = ResourceProps & {\r\n  /** Layout of shader (for varyings) */\r\n  layout: ShaderLayout;\r\n  /** Buffer bindings (for varyings) */\r\n  buffers: Record<string, Buffer | BufferRange>;\r\n};\r\n\r\n/** Holds a set of output buffers for pipeline (WebGL only) */\r\nexport abstract class TransformFeedback extends Resource<TransformFeedbackProps> {\r\n  static override defaultProps: Required<TransformFeedbackProps> = {\r\n    ...Resource.defaultProps,\r\n    layout: undefined!,\r\n    buffers: {}\r\n  };\r\n\r\n  get [Symbol.toStringTag](): string {\r\n    return 'TransformFeedback';\r\n  }\r\n\r\n  constructor(device: Device, props: TransformFeedbackProps) {\r\n    super(device, props, TransformFeedback.defaultProps);\r\n  }\r\n\r\n  abstract begin(topology?: PrimitiveTopology): void;\r\n  abstract end(): void;\r\n\r\n  abstract setBuffers(buffers: Record<string, Buffer | BufferRange>): void;\r\n  abstract setBuffer(locationOrName: string | number, bufferOrRange: Buffer | BufferRange): void;\r\n  abstract getBuffer(locationOrName: string | number): Buffer | BufferRange | null;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAMpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAkB7C,MAAgB,iBAAkB,6LAAQ,WAAgC;IAC9E,MAAM,CAAU,YAAY,GAAqC;QAC/D,uLAAG,WAAQ,CAAC,YAAY;QACxB,MAAM,EAAE,SAAU;QAClB,OAAO,EAAE,CAAA,CAAE;KACZ,CAAC;IAEF,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QACtB,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,YAAY,MAAc,EAAE,KAA6B,CAAA;QACvD,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2677, "column": 0}, "map": {"version":3,"file":"query-set.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/query-set.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport {Resource, ResourceProps} from './resource';\r\n\r\n/**\r\n * Properties for creating a QuerySet\r\n * - 'timestamp' - query the GPU timestamp counter at the start and end of render passes\r\n *   timestamp queries are available if the 'timestamp-query' feature is present.\r\n * - 'occlusion' - query the number of fragment samples that pass all per-fragment tests for a set of drawing commands\r\n *   including scissor, sample mask, alpha to coverage, stencil, and depth tests\r\n */\r\nexport type QuerySetProps = ResourceProps & {\r\n  /**\r\n   * The type of query set\r\n   * occlusion - query the number of fragment samples that pass all the per-fragment tests for a set of drawing commands, including scissor, sample mask, alpha to coverage, stencil, and depth tests\r\n   * timestamp - query the GPU timestamp counter at the start and end of render passes\r\n   */\r\n  type: 'occlusion' | 'timestamp';\r\n  /** The number of queries managed by the query set */\r\n  count: number;\r\n};\r\n\r\n/** Immutable QuerySet object */\r\nexport abstract class QuerySet extends Resource<QuerySetProps> {\r\n  static override defaultProps: Required<QuerySetProps> = {\r\n    ...Resource.defaultProps,\r\n    type: undefined!,\r\n    count: undefined!\r\n  };\r\n\r\n  get [Symbol.toStringTag](): string {\r\n    return 'QuerySet';\r\n  }\r\n\r\n  constructor(device: Device, props: QuerySetProps) {\r\n    super(device, props, QuerySet.defaultProps);\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAGpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAqB7C,MAAgB,QAAS,6LAAQ,WAAuB;IAC5D,MAAM,CAAU,YAAY,GAA4B;QACtD,uLAAG,WAAQ,CAAC,YAAY;QACxB,IAAI,EAAE,SAAU;QAChB,KAAK,EAAE,SAAU;KAClB,CAAC;IAEF,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QACtB,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,YAAY,MAAc,EAAE,KAAoB,CAAA;QAC9C,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2698, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2704, "column": 0}, "map": {"version":3,"file":"render-pipeline.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/render-pipeline.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Device} from '../device';\r\nimport type {UniformValue} from '../types/uniforms';\r\nimport type {PrimitiveTopology, RenderPipelineParameters} from '../types/parameters';\r\nimport type {ShaderLayout, Binding} from '../types/shader-layout';\r\nimport type {BufferLayout} from '../types/buffer-layout';\r\n// import {normalizeAttributeMap} from '../helpers/attribute-bindings';\r\nimport {Resource, ResourceProps} from './resource';\r\nimport type {Shader} from './shader';\r\nimport type {RenderPass} from './render-pass';\r\nimport {VertexArray} from './vertex-array';\r\nimport {TransformFeedback} from './transform-feedback';\r\n\r\nexport type RenderPipelineProps = ResourceProps & {\r\n  // Shaders and shader layout\r\n\r\n  /** Compiled vertex shader */\r\n  vs?: Shader | null;\r\n  /** Name of vertex shader stage main function (defaults to 'main'). WGSL only */\r\n  vertexEntryPoint?: string; //\r\n  /** Constant values to apply to compiled vertex shader. Do not require re-compilation. (WGSL only) */\r\n  vsConstants?: Record<string, number>; // WGSL only\r\n  /** Compiled fragment shader */\r\n  fs?: Shader | null;\r\n  /** Name of fragment shader stage main function (defaults to 'main'). WGSL only */\r\n  fragmentEntryPoint?: string; // WGSL only\r\n  /** Constant values to apply to compiled fragment shader. Do not require re-compilation. (WGSL only) */\r\n  fsConstants?: Record<string, number>;\r\n\r\n  /** Describes the attributes and bindings exposed by the pipeline shader(s). */\r\n  shaderLayout?: ShaderLayout | null;\r\n  /** Describes the buffers accepted by this pipeline and how they are mapped to shader attributes. */\r\n  bufferLayout?: BufferLayout[]; // Record<string, Omit<BufferLayout, 'name'>\r\n\r\n  /** Determines how vertices are read from the 'vertex' attributes */\r\n  topology?: PrimitiveTopology;\r\n  /** Parameters that are controlled by pipeline */\r\n  parameters?: RenderPipelineParameters;\r\n\r\n  // /** Use instanced rendering? */\r\n  // isInstanced?: boolean;\r\n  // /** Number of instances */\r\n  // instanceCount?: number;\r\n  // /** Number of vertices */\r\n  // vertexCount?: number;\r\n\r\n  /** Buffers, Textures, Samplers for the shader bindings */\r\n  bindings?: Record<string, Binding>;\r\n  /** @deprecated uniforms (WebGL only) */\r\n  uniforms?: Record<string, UniformValue>;\r\n};\r\n\r\n/**\r\n * A compiled and linked shader program\r\n */\r\nexport abstract class RenderPipeline extends Resource<RenderPipelineProps> {\r\n  static override defaultProps: Required<RenderPipelineProps> = {\r\n    ...Resource.defaultProps,\r\n\r\n    vs: null,\r\n    vertexEntryPoint: 'vertexMain',\r\n    vsConstants: {},\r\n\r\n    fs: null,\r\n    fragmentEntryPoint: 'fragmentMain',\r\n    fsConstants: {},\r\n\r\n    shaderLayout: null,\r\n    bufferLayout: [],\r\n    topology: 'triangle-list',\r\n    parameters: {},\r\n\r\n    // isInstanced: false,\r\n    // instanceCount: 0,\r\n    // vertexCount: 0,\r\n\r\n    bindings: {},\r\n    uniforms: {}\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'RenderPipeline';\r\n  }\r\n\r\n  abstract readonly vs: Shader;\r\n  abstract readonly fs: Shader | null;\r\n\r\n  /** The merged layout */\r\n  shaderLayout: ShaderLayout;\r\n  /** Buffer map describing buffer interleaving etc */\r\n  readonly bufferLayout: BufferLayout[];\r\n  /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */\r\n  linkStatus: 'pending' | 'success' | 'error' = 'pending';\r\n  /** The hash of the pipeline */\r\n  hash: string = '';\r\n\r\n  constructor(device: Device, props: RenderPipelineProps) {\r\n    super(device, props, RenderPipeline.defaultProps);\r\n    this.shaderLayout = this.props.shaderLayout!;\r\n    this.bufferLayout = this.props.bufferLayout || [];\r\n  }\r\n\r\n  /** Set bindings (stored on pipeline and set before each call) */\r\n  abstract setBindings(\r\n    bindings: Record<string, Binding>,\r\n    options?: {disableWarnings?: boolean}\r\n  ): void;\r\n\r\n  /** Draw call. Returns false if the draw call was aborted (due to resources still initializing) */\r\n  abstract draw(options: {\r\n    /** Render pass to draw into (targeting screen or framebuffer) */\r\n    renderPass?: RenderPass;\r\n    /** Parameters to be set during draw call. Note that most parameters can only be overridden in WebGL. */\r\n    parameters?: RenderPipelineParameters;\r\n    /** Topology. Note can only be overridden in WebGL. */\r\n    topology?: PrimitiveTopology;\r\n    /** vertex attributes */\r\n    vertexArray: VertexArray;\r\n    /** Use instanced rendering? */\r\n    isInstanced?: boolean;\r\n    /** Number of \"rows\" in 'instance' buffers */\r\n    instanceCount?: number;\r\n    /** Number of \"rows\" in 'vertex' buffers */\r\n    vertexCount?: number;\r\n    /** Number of \"rows\" in index buffer */\r\n    indexCount?: number;\r\n    /** First vertex to draw from */\r\n    firstVertex?: number;\r\n    /** First index to draw from */\r\n    firstIndex?: number;\r\n    /** First instance to draw from */\r\n    firstInstance?: number;\r\n    baseVertex?: number;\r\n    /** Transform feedback. WebGL only. */\r\n    transformFeedback?: TransformFeedback;\r\n  }): boolean;\r\n\r\n  // DEPRECATED METHODS\r\n\r\n  /**\r\n   * Uniforms\r\n   * @deprecated Use uniforms buffers\r\n   * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.\r\n   * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.\r\n   */\r\n  setUniformsWebGL(uniforms: Record<string, UniformValue>): void {\r\n    throw new Error('Use uniform blocks');\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAOpC,uEAAuE;;;;AACvE,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAgD7C,MAAgB,cAAe,6LAAQ,WAA6B;IACxE,MAAM,CAAU,YAAY,GAAkC;QAC5D,uLAAG,WAAQ,CAAC,YAAY;QAExB,EAAE,EAAE,IAAI;QACR,gBAAgB,EAAE,YAAY;QAC9B,WAAW,EAAE,CAAA,CAAE;QAEf,EAAE,EAAE,IAAI;QACR,kBAAkB,EAAE,cAAc;QAClC,WAAW,EAAE,CAAA,CAAE;QAEf,YAAY,EAAE,IAAI;QAClB,YAAY,EAAE,EAAE;QAChB,QAAQ,EAAE,eAAe;QACzB,UAAU,EAAE,CAAA,CAAE;QAEd,sBAAsB;QACtB,oBAAoB;QACpB,kBAAkB;QAElB,QAAQ,EAAE,CAAA,CAAE;QACZ,QAAQ,EAAE,CAAA,CAAE;KACb,CAAC;IAEF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAKD,sBAAA,EAAwB,CACxB,YAAY,CAAe;IAC3B,kDAAA,EAAoD,CAC3C,YAAY,CAAiB;IACtC,gGAAA,EAAkG,CAClG,UAAU,GAAoC,SAAS,CAAC;IACxD,6BAAA,EAA+B,CAC/B,IAAI,GAAW,EAAE,CAAC;IAElB,YAAY,MAAc,EAAE,KAA0B,CAAA;QACpD,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAa,CAAC;QAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,EAAE,CAAC;IACpD,CAAC;IAqCD,qBAAqB;IAErB;;;;;OAKG,CACH,gBAAgB,CAAC,QAAsC,EAAA;QACrD,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2754, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2760, "column": 0}, "map": {"version":3,"file":"render-pass.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/render-pass.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {NumberArray4, TypedArray} from '@math.gl/types';\r\nimport type {Device} from '../device';\r\nimport type {RenderPassParameters} from '../types/parameters';\r\n// import {Binding} from '../types/shader-layout';\r\nimport {Resource, ResourceProps} from './resource';\r\nimport {Framebuffer} from './framebuffer';\r\nimport {QuerySet} from './query-set';\r\n\r\n/**\r\n * Properties for a RenderPass instance is a required parameter to all draw calls.\r\n */\r\nexport type RenderPassProps = ResourceProps & {\r\n  /** Framebuffer specifies which textures to render into. Default gets framebuffer from canvas context. */\r\n  framebuffer?: Framebuffer | null;\r\n  /** Control viewport, scissor rect, blend constant and stencil ref */\r\n  parameters?: RenderPassParameters;\r\n\r\n  // TODO - API needs to be able to control multiple render targets\r\n\r\n  /** Clear value for color attachment, or false to preserve the previous value */\r\n  clearColor?: NumberArray4 | TypedArray | false;\r\n  /** Experimental: Clear color values for multiple color attachments. Must specify typed arrays. props.clearColor will be ignored. */\r\n  clearColors?: (TypedArray | false)[];\r\n  /** Clear value for depth attachment (true === `1`), or false to preserve the previous value. Must be between 0.0 (near) and 1.0 (far), inclusive. */\r\n  clearDepth?: number | false;\r\n  /** Clear value for stencil attachment (true === `0`), or false to preserve the previous value. Converted to the type and number of LSBs as the number of bits in the stencil aspect */\r\n  clearStencil?: number | false;\r\n\r\n  /** Indicates that the depth component is read only. */\r\n  depthReadOnly?: boolean;\r\n  /** Indicates that the stencil component is read only. */\r\n  stencilReadOnly?: boolean;\r\n\r\n  /** Whether to disable / discard the output of the rasterizer */\r\n  discard?: boolean;\r\n\r\n  /** QuerySet to write begin/end timestamps to */\r\n  occlusionQuerySet?: QuerySet;\r\n  /** QuerySet to write begin/end timestamps to */\r\n  timestampQuerySet?: QuerySet;\r\n  /** QuerySet index to write begin timestamp to. No timestamp is written if not provided. */\r\n  beginTimestampIndex?: number;\r\n  /** QuerySet index to write end timestamp to. No timestamp is written if not provided. */\r\n  endTimestampIndex?: number;\r\n};\r\n\r\n/**\r\n * A RenderPass instance is a required parameter to all draw calls.\r\n *\r\n * It holds a combination of\r\n * - render targets (specified via a framebuffer)\r\n * - clear colors, read/write, discard information for the framebuffer attachments\r\n * - a couple of mutable parameters ()\r\n */\r\nexport abstract class RenderPass extends Resource<RenderPassProps> {\r\n  /** TODO - should be [0, 0, 0, 0], update once deck.gl tests run clean */\r\n  static defaultClearColor: [number, number, number, number] = [0, 0, 0, 1];\r\n  /** Depth 1.0 represents the far plance */\r\n  static defaultClearDepth = 1;\r\n  /** Clears all stencil bits */\r\n  static defaultClearStencil = 0;\r\n\r\n  /** Default properties for RenderPass */\r\n  static override defaultProps: Required<RenderPassProps> = {\r\n    ...Resource.defaultProps,\r\n    framebuffer: null,\r\n    parameters: undefined!,\r\n    clearColor: RenderPass.defaultClearColor,\r\n    clearColors: undefined!,\r\n    clearDepth: RenderPass.defaultClearDepth,\r\n    clearStencil: RenderPass.defaultClearStencil,\r\n    depthReadOnly: false,\r\n    stencilReadOnly: false,\r\n    discard: false,\r\n\r\n    occlusionQuerySet: undefined!,\r\n    timestampQuerySet: undefined!,\r\n    beginTimestampIndex: undefined!,\r\n    endTimestampIndex: undefined!\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'RenderPass';\r\n  }\r\n\r\n  constructor(device: Device, props: RenderPassProps) {\r\n    props = RenderPass.normalizeProps(device, props);\r\n    super(device, props, RenderPass.defaultProps);\r\n  }\r\n\r\n  /** Call when rendering is done in this pass. */\r\n  abstract end(): void;\r\n\r\n  /** A few parameters can be changed at any time (viewport, scissorRect, blendColor, stencilReference) */\r\n  abstract setParameters(parameters: RenderPassParameters): void;\r\n\r\n  // executeBundles(bundles: Iterable<GPURenderBundle>): void;\r\n\r\n  /** Being an occlusion query. Value will be stored in the occlusionQuerySet at the index. Occlusion queries cannot be nested. */\r\n  abstract beginOcclusionQuery(queryIndex: number): void;\r\n  /** End an occlusion query. Stores result in the index specified in beginOcclusionQuery. */\r\n  abstract endOcclusionQuery(): void;\r\n\r\n  /** Begins a labeled debug group containing subsequent commands */\r\n  abstract pushDebugGroup(groupLabel: string): void;\r\n  /** Ends the labeled debug group most recently started by pushDebugGroup() */\r\n  abstract popDebugGroup(): void;\r\n  /** Marks a point in a stream of commands with a label */\r\n  abstract insertDebugMarker(markerLabel: string): void;\r\n\r\n  protected static normalizeProps(device: Device, props: RenderPassProps): RenderPassProps {\r\n    // Intended to override e.g. set default clear values to true\r\n    const overriddenDefaultProps = device.props._resourceDefaults?.renderPass;\r\n    const newProps = {...overriddenDefaultProps, ...props};\r\n    return newProps;\r\n  }\r\n}\r\n\r\n// TODO - Can we align WebGL implementation with WebGPU API?\r\n// In WebGPU the following methods are on the renderpass instead of the renderpipeline\r\n// luma.gl keeps them on the pipeline for now, but that has some issues.\r\n\r\n// abstract setPipeline(pipeline: RenderPipeline): void {}\r\n// abstract setIndexBuffer()\r\n// abstract setVertexBuffer(slot: number, buffer: Buffer, offset: number): void;\r\n// abstract setBindings(bindings: Record<string, Binding>): void;\r\n// abstract setParameters(parameters: RenderPassParameters);\r\n// abstract draw(options: {\r\n// abstract drawIndirect(indirectBuffer: GPUBuffer, indirectOffset: number): void;\r\n// abstract drawIndexedIndirect(indirectBuffer: GPUBuffer, indirectOffset: number): void;\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAKpC,kDAAkD;;;;AAClD,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAkD7C,MAAgB,UAAW,6LAAQ,WAAyB;IAChE,uEAAA,EAAyE,CACzE,MAAM,CAAC,iBAAiB,GAAqC;QAAC,CAAC;QAAE,CAAC;QAAE,CAAC;QAAE,CAAC;KAAC,CAAC;IAC1E,wCAAA,EAA0C,CAC1C,MAAM,CAAC,iBAAiB,GAAG,CAAC,CAAC;IAC7B,4BAAA,EAA8B,CAC9B,MAAM,CAAC,mBAAmB,GAAG,CAAC,CAAC;IAE/B,sCAAA,EAAwC,CACxC,MAAM,CAAU,YAAY,GAA8B;QACxD,uLAAG,WAAQ,CAAC,YAAY;QACxB,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,SAAU;QACtB,UAAU,EAAE,UAAU,CAAC,iBAAiB;QACxC,WAAW,EAAE,SAAU;QACvB,UAAU,EAAE,UAAU,CAAC,iBAAiB;QACxC,YAAY,EAAE,UAAU,CAAC,mBAAmB;QAC5C,aAAa,EAAE,KAAK;QACpB,eAAe,EAAE,KAAK;QACtB,OAAO,EAAE,KAAK;QAEd,iBAAiB,EAAE,SAAU;QAC7B,iBAAiB,EAAE,SAAU;QAC7B,mBAAmB,EAAE,SAAU;QAC/B,iBAAiB,EAAE,SAAU;KAC9B,CAAC;IAEF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,YAAY,MAAc,EAAE,KAAsB,CAAA;QAChD,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACjD,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;IAChD,CAAC;IAsBS,MAAM,CAAC,cAAc,CAAC,MAAc,EAAE,KAAsB,EAAA;QACpE,6DAA6D;QAC7D,MAAM,sBAAsB,GAAG,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,UAAU,CAAC;QAC1E,MAAM,QAAQ,GAAG;YAAC,GAAG,sBAAsB;YAAE,GAAG,KAAK;QAAA,CAAC,CAAC;QACvD,OAAO,QAAQ,CAAC;IAClB,CAAC;EAGH,4DAA4D;CAC5D,sFAAsF;CACtF,wEAAwE;CAExE,0DAA0D;CAC1D,4BAA4B;CAC5B,gFAAgF;CAChF,iEAAiE;CACjE,4DAA4D;CAC5D,2BAA2B;CAC3B,kFAAkF;CAClF,yFAAyF","ignoreList":[0]}},
    {"offset": {"line": 2822, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2828, "column": 0}, "map": {"version":3,"file":"command-buffer.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/command-buffer.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {Device} from '../device';\r\nimport {Resource, ResourceProps} from './resource';\r\n\r\n// interface Queue {\r\n//   submit(commandBuffers);\r\n\r\n//   // onSubmittedWorkDone(): Promise<undefined>;\r\n\r\n//   writeBuffer(options: WriteBufferOptions): void;\r\n//   writeTexture(options: WriteTextureOptions): void;\r\n\r\n//   // copyExternalImageToTexture(\r\n//   //   GPUImageCopyExternalImage source,\r\n//   //   GPUImageCopyTextureTagged destination,\r\n//   //   GPUExtent3D copySize\r\n//   // ): void;\r\n// }\r\n\r\nexport type CommandBufferProps = ResourceProps & {};\r\n\r\n/**\r\n * Encodes commands to queue that can be executed later\r\n */\r\nexport abstract class CommandBuffer extends Resource<CommandBufferProps> {\r\n  static override defaultProps: Required<CommandBufferProps> = {\r\n    ...Resource.defaultProps\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'CommandBuffer';\r\n  }\r\n\r\n  constructor(device: Device, props: CommandBufferProps) {\r\n    super(device, props, CommandBuffer.defaultProps);\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAGpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAsB7C,MAAgB,aAAc,6LAAQ,WAA4B;IACtE,MAAM,CAAU,YAAY,GAAiC;QAC3D,uLAAG,WAAQ,CAAC,YAAY;KACzB,CAAC;IAEF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,YAAY,MAAc,EAAE,KAAyB,CAAA;QACnD,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC;IACnD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2847, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2853, "column": 0}, "map": {"version":3,"file":"command-encoder.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/command-encoder.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\n// import type {TypedArray} from '@math.gl/types';\r\nimport {Device} from '../device';\r\nimport {Resource, ResourceProps} from './resource';\r\nimport {Buffer} from './buffer';\r\nimport {Texture} from './texture';\r\nimport {QuerySet} from './query-set';\r\n\r\n// WEBGPU COMMAND ENCODER OPERATIONS\r\n\r\nexport type CopyBufferToBufferOptions = {\r\n  sourceBuffer: Buffer;\r\n  sourceOffset?: number;\r\n  destinationBuffer: Buffer;\r\n  destinationOffset?: number;\r\n  size: number;\r\n};\r\n\r\nexport type CopyBufferToTextureOptions = {\r\n  sourceBuffer: Buffer;\r\n  byteOffset?: number;\r\n  destinationTexture: Texture;\r\n  mipLevel?: number; //  = 0;\r\n  origin?: [number, number, number] | number[];\r\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\r\n  bytesPerRow: number;\r\n  rowsPerImage: number;\r\n  size: [number, number, number] | number[];\r\n};\r\n\r\nexport type CopyTextureToBufferOptions = {\r\n  /** Texture to copy to/from. */\r\n  sourceTexture: Texture;\r\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\r\n  mipLevel?: number;\r\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from.\r\n   * Together with `copySize`, defines the full copy sub-region.\r\n   */\r\n  /** Defines which aspects of the texture to copy to/from. */\r\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\r\n\r\n  /** Width to copy */\r\n  width?: number;\r\n  height?: number;\r\n  depthOrArrayLayers?: number;\r\n  origin?: number[];\r\n\r\n  /** Destination buffer */\r\n  destinationBuffer: Buffer;\r\n  /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */\r\n  byteOffset?: number;\r\n  /**\r\n   * The stride, in bytes, between the beginning of each block row and the subsequent block row.\r\n   * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).\r\n   */\r\n  bytesPerRow?: number;\r\n  /**\r\n   * Number of block rows per single image of the texture.\r\n   * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.\r\n   * Required if there are multiple images (i.e. the copy depth is more than one).\r\n   */\r\n  rowsPerImage?: number;\r\n};\r\n\r\nexport type CopyTextureToTextureOptions = {\r\n  /** Texture to copy to/from. */\r\n  sourceTexture: Texture;\r\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\r\n  mipLevel?: number;\r\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */\r\n  origin?: number[];\r\n  /** Defines which aspects of the {@link GPUImageCopyTexture#texture} to copy to/from. */\r\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\r\n\r\n  /** Texture to copy to/from. */\r\n  destinationTexture: Texture;\r\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\r\n  destinationMipLevel?: number;\r\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */\r\n  destinationOrigin?: number[];\r\n  /** Defines which aspects of the {@link GPUImageCopyTexture#texture} to copy to/from. */\r\n  destinationAspect?: 'all' | 'stencil-only' | 'depth-only';\r\n\r\n  /** Width to copy */\r\n  width?: number;\r\n  height?: number;\r\n  depthOrArrayLayers?: number;\r\n};\r\n\r\n// ADDITIONAL COMMAND ENCODER OPERATIONS DEFINED BY LUMA.GL\r\n\r\n/** Options for clearing a texture mip level */\r\nexport type ClearTextureOptions = {\r\n  /** Texture to Clear. */\r\n  texture: Texture;\r\n  /**  Mip-map level of the texture clear. (Default 0) */\r\n  mipLevel?: number;\r\n  /** Defines which aspects of the Texture to clear. */\r\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\r\n};\r\n\r\n// export type WriteBufferOptions = {\r\n//   buffer: Buffer;\r\n//   bufferOffset?: number;\r\n//   data: BufferSource;\r\n//   dataOffset?: number;\r\n//   size?: number;\r\n// };\r\n\r\n// export type WriteTextureOptions = {\r\n//   destination: Texture;\r\n//   mipLevel?: number; //  = 0;\r\n//   origin?: [number, number, number] | number[];\r\n//   aspect?: 'all' | 'stencil-only' | 'depth-only';\r\n//   data: BufferSource;\r\n//   // dataLayout;\r\n//   offset: number;\r\n//   bytesPerRow: number;\r\n//   rowsPerImage: number;\r\n//   size: [number, number, number] | number[];\r\n// };\r\n\r\nexport type CommandEncoderProps = ResourceProps & {\r\n  measureExecutionTime?: boolean;\r\n};\r\n\r\n/**\r\n * Encodes commands to queue that can be executed later\r\n */\r\nexport abstract class CommandEncoder extends Resource<CommandEncoderProps> {\r\n  static override defaultProps: Required<CommandEncoderProps> = {\r\n    ...Resource.defaultProps,\r\n    measureExecutionTime: undefined!\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'CommandEncoder';\r\n  }\r\n\r\n  constructor(device: Device, props: CommandEncoderProps) {\r\n    super(device, props, CommandEncoder.defaultProps);\r\n  }\r\n\r\n  /** Completes recording of the commands sequence */\r\n  abstract finish(): void; // TODO - return the CommandBuffer?\r\n\r\n  /** Add a command that that copies data from a sub-region of a Buffer to a sub-region of another Buffer. */\r\n  abstract copyBufferToBuffer(options: CopyBufferToBufferOptions): void;\r\n\r\n  /** Add a command that copies data from a sub-region of a GPUBuffer to a sub-region of one or multiple continuous texture subresources. */\r\n  abstract copyBufferToTexture(options: CopyBufferToTextureOptions): void;\r\n\r\n  /** Add a command that copies data from a sub-region of one or multiple continuous texture subresources to a sub-region of a Buffer. */\r\n  abstract copyTextureToBuffer(options: CopyTextureToBufferOptions): void;\r\n\r\n  /** Add a command that copies data from a sub-region of one or multiple contiguous texture subresources to another sub-region of one or multiple continuous texture subresources. */\r\n  abstract copyTextureToTexture(options: CopyTextureToTextureOptions): void;\r\n\r\n  /** Add a command that clears a texture mip level. */\r\n  // abstract clearTexture(options: ClearTextureOptions): void;\r\n\r\n  // abstract readTexture(options: ReadTextureOptions): Promise<TypedArray>;\r\n\r\n  /** Reads results from a query set into a GPU buffer. Values are 64 bits so byteLength must be querySet.props.count * 8 */\r\n  abstract resolveQuerySet(\r\n    querySet: QuerySet,\r\n    destination: Buffer,\r\n    options?: {\r\n      firstQuery?: number;\r\n      queryCount?: number;\r\n      destinationOffset?: number;\r\n    }\r\n  ): void;\r\n\r\n  /** Begins a labeled debug group containing subsequent commands */\r\n  abstract pushDebugGroup(groupLabel: string): void;\r\n  /** Ends the labeled debug group most recently started by pushDebugGroup() */\r\n  abstract popDebugGroup(): void;\r\n  /** Marks a point in a stream of commands with a label */\r\n  abstract insertDebugMarker(markerLabel: string): void;\r\n\r\n  // TODO - luma.gl has these on the device, should we align with WebGPU API?\r\n  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;\r\n  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAIpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AA8H7C,MAAgB,cAAe,6LAAQ,WAA6B;IACxE,MAAM,CAAU,YAAY,GAAkC;QAC5D,uLAAG,WAAQ,CAAC,YAAY;QACxB,oBAAoB,EAAE,SAAU;KACjC,CAAC;IAEF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,YAAY,MAAc,EAAE,KAA0B,CAAA;QACpD,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC","ignoreList":[0]}},
    {"offset": {"line": 2873, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2879, "column": 0}, "map": {"version":3,"file":"adapter.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/adapter.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {Device, DeviceProps} from './device';\r\n\r\n/**\r\n * Create and attach devices for a specific backend.\r\n */\r\nexport abstract class Adapter {\r\n  // new (props: DeviceProps): Device; Constructor isn't used\r\n  abstract type: string;\r\n  abstract isSupported(): boolean;\r\n  abstract create(props: DeviceProps): Promise<Device>;\r\n  abstract attach?(handle: unknown): Promise<Device>;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAIpC;;GAEG;;;AACG,MAAgB,OAAO;CAM5B","ignoreList":[0]}},
    {"offset": {"line": 2889, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2895, "column": 0}, "map": {"version":3,"file":"luma.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/luma.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {Log} from '@probe.gl/log';\r\nimport {isBrowser} from '@probe.gl/env';\r\nimport type {DeviceProps} from './device';\r\nimport {Device} from './device';\r\nimport {Adapter} from './adapter';\r\nimport {StatsManager, lumaStats} from '../utils/stats-manager';\r\nimport {log} from '../utils/log';\r\n\r\nconst isPage: boolean = isBrowser() && typeof document !== 'undefined';\r\nconst isPageLoaded: () => boolean = () => isPage && document.readyState === 'complete';\r\n\r\ndeclare global {\r\n  // eslint-disable-next-line no-var\r\n  var luma: Luma;\r\n}\r\n\r\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\r\n\r\nconst ERROR_MESSAGE =\r\n  'No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.';\r\n\r\n/** Properties for creating a new device */\r\nexport type CreateDeviceProps = {\r\n  /** Selects the type of device. `best-available` uses webgpu if available, then webgl. */\r\n  type?: 'webgl' | 'webgpu' | 'unknown' | 'best-available';\r\n  /** List of adapters. Will also search any pre-registered adapters */\r\n  adapters?: Adapter[];\r\n  /** Whether to wait for page to be loaded */\r\n  waitForPageLoad?: boolean;\r\n} & DeviceProps;\r\n\r\n/** Properties for attaching an existing WebGL context or WebGPU device to a new luma Device */\r\nexport type AttachDeviceProps = {\r\n  type?: 'webgl' | 'webgpu' | 'unknown' | 'best-available';\r\n  /** Externally created WebGL context or WebGPU device */\r\n  handle: unknown; // WebGL2RenderingContext | GPUDevice | null;\r\n  /** List of adapters. Will also search any pre-registered adapters */\r\n  adapters?: Adapter[];\r\n} & DeviceProps;\r\n\r\n/**\r\n * Entry point to the luma.gl GPU abstraction\r\n * Register WebGPU and/or WebGL adapters (controls application bundle size)\r\n * Run-time selection of the first available Device\r\n */\r\nexport class Luma {\r\n  static defaultProps: Required<CreateDeviceProps> = {\r\n    ...Device.defaultProps,\r\n    type: 'best-available',\r\n    adapters: undefined!,\r\n    waitForPageLoad: true\r\n  };\r\n\r\n  /**\r\n   * Page load promise\r\n   * Get a 'lazy' promise that resolves when the DOM is loaded.\r\n   * @note Since there may be limitations on number of `load` event listeners,\r\n   * it is recommended avoid calling this function until actually needed.\r\n   * I.e. don't call it until you know that you will be looking up a string in the DOM.\r\n   */\r\n  static pageLoaded: Promise<void> = getPageLoadPromise().then(() => {\r\n    log.probe(2, 'DOM is loaded')();\r\n  });\r\n\r\n  /** Global stats for all devices */\r\n  readonly stats: StatsManager = lumaStats;\r\n\r\n  /**\r\n   * Global log\r\n   *\r\n   * Assign luma.log.level in console to control logging: \\\r\n   * 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\r\n   * luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\r\n   */\r\n  readonly log: Log = log;\r\n\r\n  /** Version of luma.gl */\r\n  readonly VERSION: string =\r\n    // Version detection using build plugin\r\n    // @ts-expect-error no-undef\r\n    typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'running from source';\r\n\r\n  spector: unknown;\r\n\r\n  protected preregisteredAdapters = new Map<string, Adapter>();\r\n\r\n  constructor() {\r\n    if (globalThis.luma) {\r\n      if (globalThis.luma.VERSION !== this.VERSION) {\r\n        log.error(`Found luma.gl ${globalThis.luma.VERSION} while initialzing ${this.VERSION}`)();\r\n        log.error(`'yarn why @luma.gl/core' can help identify the source of the conflict`)();\r\n        throw new Error(`luma.gl - multiple versions detected: see console log`);\r\n      }\r\n\r\n      log.error('This version of luma.gl has already been initialized')();\r\n    }\r\n\r\n    log.log(1, `${this.VERSION} - ${STARTUP_MESSAGE}`)();\r\n\r\n    globalThis.luma = this;\r\n  }\r\n\r\n  registerAdapters(adapters: Adapter[]): void {\r\n    for (const deviceClass of adapters) {\r\n      this.preregisteredAdapters.set(deviceClass.type, deviceClass);\r\n    }\r\n  }\r\n\r\n  /** Get type strings for supported Devices */\r\n  getSupportedAdapters(adapters: Adapter[] = []): string[] {\r\n    const adapterMap = this.getAdapterMap(adapters);\r\n    return Array.from(adapterMap)\r\n      .map(([, adapter]) => adapter)\r\n      .filter(adapter => adapter.isSupported?.())\r\n      .map(adapter => adapter.type);\r\n  }\r\n\r\n  /** Get type strings for best available Device */\r\n  getBestAvailableAdapter(adapters: Adapter[] = []): 'webgpu' | 'webgl' | null {\r\n    const adapterMap = this.getAdapterMap(adapters);\r\n    if (adapterMap.get('webgpu')?.isSupported?.()) {\r\n      return 'webgpu';\r\n    }\r\n    if (adapterMap.get('webgl')?.isSupported?.()) {\r\n      return 'webgl';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setDefaultDeviceProps(props: CreateDeviceProps): void {\r\n    Object.assign(Luma.defaultProps, props);\r\n  }\r\n\r\n  /** Creates a device. Asynchronously. */\r\n  async createDevice(props: CreateDeviceProps = {}): Promise<Device> {\r\n    props = {...Luma.defaultProps, ...props};\r\n\r\n    if (props.waitForPageLoad) {\r\n      // || props.createCanvasContext) {\r\n      await Luma.pageLoaded;\r\n    }\r\n\r\n    const adapterMap = this.getAdapterMap(props.adapters);\r\n\r\n    let type: string = props.type || '';\r\n    if (type === 'best-available') {\r\n      type = this.getBestAvailableAdapter(props.adapters) || type;\r\n    }\r\n\r\n    const adapters = this.getAdapterMap(props.adapters) || adapterMap;\r\n\r\n    const adapter = adapters.get(type);\r\n    const device = await adapter?.create?.(props);\r\n    if (device) {\r\n      return device;\r\n    }\r\n\r\n    throw new Error(ERROR_MESSAGE);\r\n  }\r\n\r\n  /** Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice). */\r\n  async attachDevice(props: AttachDeviceProps): Promise<Device> {\r\n    const adapters = this.getAdapterMap(props.adapters);\r\n\r\n    // WebGL\r\n    let type = '';\r\n    if (props.handle instanceof WebGL2RenderingContext) {\r\n      type = 'webgl';\r\n    }\r\n\r\n    if (props.createCanvasContext) {\r\n      await Luma.pageLoaded;\r\n    }\r\n\r\n    // TODO - WebGPU does not yet have a stable API\r\n    // if (props.handle instanceof GPUDevice) {\r\n    //   const WebGPUDevice = adapters.get('webgpu') as any;\r\n    //   if (WebGPUDevice) {\r\n    //     return (await WebGPUDevice.attach(props.handle)) as Device;\r\n    //   }\r\n    // }\r\n\r\n    // null\r\n    if (props.handle === null) {\r\n      type = 'unknown';\r\n    }\r\n\r\n    const adapter = adapters.get(type);\r\n    const device = await adapter?.attach?.(null);\r\n    if (device) {\r\n      return device;\r\n    }\r\n\r\n    throw new Error(ERROR_MESSAGE);\r\n  }\r\n\r\n  /**\r\n   * Override `HTMLCanvasContext.getCanvas()` to always create WebGL2 contexts with additional WebGL1 compatibility.\r\n   * Useful when attaching luma to a context from an external library does not support creating WebGL2 contexts.\r\n   */\r\n  enforceWebGL2(enforce: boolean = true, adapters: Adapter[] = []): void {\r\n    const adapterMap = this.getAdapterMap(adapters);\r\n    const webgl2Adapter = adapterMap.get('webgl');\r\n    if (!webgl2Adapter) {\r\n      log.warn('enforceWebGL2: webgl adapter not found')();\r\n    }\r\n    (webgl2Adapter as any)?.enforceWebGL2?.(enforce);\r\n  }\r\n\r\n  /** Convert a list of adapters to a map */\r\n  protected getAdapterMap(adapters: Adapter[] = []): Map<string, Adapter> {\r\n    const map = new Map(this.preregisteredAdapters);\r\n    for (const adapter of adapters) {\r\n      map.set(adapter.type, adapter);\r\n    }\r\n    return map;\r\n  }\r\n\r\n  // DEPRECATED\r\n\r\n  /** @deprecated Use registerAdapters */\r\n  registerDevices(deviceClasses: any[]): void {\r\n    log.warn('luma.registerDevices() is deprecated, use luma.registerAdapters() instead');\r\n    for (const deviceClass of deviceClasses) {\r\n      const adapter = deviceClass.adapter as Adapter;\r\n      if (adapter) {\r\n        this.preregisteredAdapters.set(adapter.type, adapter);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Entry point to the luma.gl GPU abstraction\r\n * Register WebGPU and/or WebGL adapters (controls application bundle size)\r\n * Run-time selection of the first available Device\r\n */\r\nexport const luma = new Luma();\r\n\r\n// HELPER FUNCTIONS\r\n\r\n/** Returns a promise that resolves when the page is loaded */\r\nfunction getPageLoadPromise(): Promise<void> {\r\n  if (isPageLoaded() || typeof window === 'undefined') {\r\n    return Promise.resolve();\r\n  }\r\n  return new Promise(resolve => {\r\n    window.addEventListener('load', () => resolve());\r\n  });\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3066, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3072, "column": 0}, "map": {"version":3,"file":"compute-pipeline.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter/resources/compute-pipeline.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {Resource, ResourceProps} from './resource';\r\nimport type {ComputeShaderLayout, Binding} from '../types/shader-layout';\r\nimport type {Device} from '../device';\r\nimport type {Shader} from './shader';\r\n\r\n/**\r\n * Properties for a compute pipeline\r\n */\r\nexport type ComputePipelineProps = ResourceProps & {\r\n  handle?: unknown;\r\n  /** Compiled shader object */\r\n  shader: Shader;\r\n  /** The entry point, defaults to main */\r\n  entryPoint?: string;\r\n  /** These are WGSL constant values - different from GLSL defines in that shader does not need to be recompiled */\r\n  constants?: Record<string, number>;\r\n  /** Describes the attributes and bindings exposed by the pipeline shader(s). */\r\n  shaderLayout?: ComputeShaderLayout | null;\r\n};\r\n\r\n/**\r\n * A compiled and linked shader program for compute\r\n */\r\nexport abstract class ComputePipeline extends Resource<ComputePipelineProps> {\r\n  static override defaultProps: Required<ComputePipelineProps> = {\r\n    ...Resource.defaultProps,\r\n    shader: undefined!,\r\n    entryPoint: undefined!,\r\n    constants: {},\r\n    shaderLayout: undefined!\r\n  };\r\n\r\n  override get [Symbol.toStringTag](): string {\r\n    return 'ComputePipeline';\r\n  }\r\n\r\n  hash: string = '';\r\n  /** The merged shader layout */\r\n  shaderLayout: ComputeShaderLayout;\r\n\r\n  constructor(device: Device, props: ComputePipelineProps) {\r\n    super(device, props, ComputePipeline.defaultProps);\r\n    this.shaderLayout = props.shaderLayout!;\r\n  }\r\n\r\n  /**\r\n   * @todo Use renderpass.setBindings() ?\r\n   * @todo Do we want to expose BindGroups in the API and remove this?\r\n   */\r\n  abstract setBindings(bindings: Record<string, Binding>): void;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AAEpC,OAAO,EAAC,QAAQ,EAAgB,sBAAmB;;AAuB7C,MAAgB,eAAgB,6LAAQ,WAA8B;IAC1E,MAAM,CAAU,YAAY,GAAmC;QAC7D,uLAAG,WAAQ,CAAC,YAAY;QACxB,MAAM,EAAE,SAAU;QAClB,UAAU,EAAE,SAAU;QACtB,SAAS,EAAE,CAAA,CAAE;QACb,YAAY,EAAE,SAAU;KACzB,CAAC;IAEF,IAAa,CAAC,MAAM,CAAC,WAAW,CAAC,GAAA;QAC/B,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,IAAI,GAAW,EAAE,CAAC;IAClB,6BAAA,EAA+B,CAC/B,YAAY,CAAsB;IAElC,YAAY,MAAc,EAAE,KAA2B,CAAA;QACrD,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,YAAa,CAAC;IAC1C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3098, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3104, "column": 0}, "map": {"version":3,"file":"vertex-format-from-attribute.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/vertex-format-from-attribute.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {TypedArray, TypedArrayConstructor} from '../types';\r\nimport {VertexFormat} from './vertex-formats';\r\n\r\n// import {DataType} from '../types/vertex-formats';\r\n// type Omit<DataType, 'float16'> unfortunately breaks Typescript inferance\r\ntype DataType = 'uint8' | 'sint8' | 'uint16' | 'sint16' | 'uint32' | 'sint32' | 'float32';\r\ntype DataTypeNorm = 'unorm8' | 'snorm8' | 'unorm16' | 'snorm16';\r\n\r\nexport function getDataTypeFromTypedArray(\r\n  arrayOrType: TypedArray | TypedArrayConstructor\r\n): DataType {\r\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\r\n  switch (type) {\r\n    case Float32Array:\r\n      return 'float32';\r\n    case Uint16Array:\r\n      return 'uint16';\r\n    case Uint32Array:\r\n      return 'uint32';\r\n    case Uint8Array:\r\n    case Uint8ClampedArray:\r\n      return 'uint8';\r\n    case Int8Array:\r\n      return 'sint8';\r\n    case Int16Array:\r\n      return 'sint16';\r\n    case Int32Array:\r\n      return 'sint32';\r\n    default:\r\n      // Failed to deduce data type from typed array\r\n      throw new Error(type.constructor.name);\r\n  }\r\n}\r\n\r\nexport function getTypedArrayFromDataType(\r\n  dataType: DataType | DataTypeNorm\r\n): TypedArrayConstructor {\r\n  switch (dataType) {\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'sint32':\r\n      return Int32Array;\r\n    case 'uint16':\r\n    case 'unorm16':\r\n      return Uint16Array;\r\n    case 'sint16':\r\n    case 'snorm16':\r\n      return Int16Array;\r\n    case 'uint8':\r\n    case 'unorm8':\r\n      return Uint8Array;\r\n    case 'sint8':\r\n    case 'snorm8':\r\n      return Int8Array;\r\n    default:\r\n      // Failed to deduce typed array from data type\r\n      throw new Error(dataType);\r\n  }\r\n}\r\n\r\n/** Get the vertex format for an attribute with TypedArray and size */\r\nexport function getVertexFormatFromAttribute(\r\n  typedArray: TypedArray,\r\n  size: number,\r\n  normalized?: boolean\r\n): VertexFormat {\r\n  if (!size || size > 4) {\r\n    throw new Error(`size ${size}`);\r\n  }\r\n\r\n  const components = size as 1 | 2 | 3 | 4;\r\n  let dataType: DataType | DataTypeNorm = getDataTypeFromTypedArray(typedArray);\r\n\r\n  // TODO - Special cases for WebGL (not supported on WebGPU), overrides the check below\r\n  if (dataType === 'uint8' && normalized && components === 1) {\r\n    return 'unorm8-webgl';\r\n  }\r\n  if (dataType === 'uint8' && normalized && components === 3) {\r\n    return 'unorm8x3-webgl';\r\n  }\r\n\r\n  if (dataType === 'uint8' || dataType === 'sint8') {\r\n    if (components === 1 || components === 3) {\r\n      // WebGPU 8 bit formats must be aligned to 16 bit boundaries');\r\n      throw new Error(`size: ${size}`);\r\n    }\r\n    if (normalized) {\r\n      dataType = dataType.replace('int', 'norm') as 'unorm8' | 'snorm8';\r\n    }\r\n    return `${dataType}x${components}`;\r\n  }\r\n  if (dataType === 'uint16' || dataType === 'sint16') {\r\n    if (components === 1 || components === 3) {\r\n      // WebGPU 16 bit formats must be aligned to 32 bit boundaries\r\n      throw new Error(`size: ${size}`);\r\n    }\r\n    if (normalized) {\r\n      dataType = dataType.replace('int', 'norm') as 'unorm16' | 'snorm16';\r\n    }\r\n    return `${dataType}x${components}`;\r\n  }\r\n\r\n  if (components === 1) {\r\n    return dataType;\r\n  }\r\n\r\n  return `${dataType}x${components}`;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;;;AAU9B,SAAU,yBAAyB,CACvC,WAA+C;IAE/C,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC;IACrF,OAAQ,IAAI,EAAE,CAAC;QACb,KAAK,YAAY;YACf,OAAO,SAAS,CAAC;QACnB,KAAK,WAAW;YACd,OAAO,QAAQ,CAAC;QAClB,KAAK,WAAW;YACd,OAAO,QAAQ,CAAC;QAClB,KAAK,UAAU,CAAC;QAChB,KAAK,iBAAiB;YACpB,OAAO,OAAO,CAAC;QACjB,KAAK,SAAS;YACZ,OAAO,OAAO,CAAC;QACjB,KAAK,UAAU;YACb,OAAO,QAAQ,CAAC;QAClB,KAAK,UAAU;YACb,OAAO,QAAQ,CAAC;QAClB;YACE,8CAA8C;YAC9C,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;AACH,CAAC;AAEK,SAAU,yBAAyB,CACvC,QAAiC;IAEjC,OAAQ,QAAQ,EAAE,CAAC;QACjB,KAAK,SAAS;YACZ,OAAO,YAAY,CAAC;QACtB,KAAK,QAAQ;YACX,OAAO,WAAW,CAAC;QACrB,KAAK,QAAQ;YACX,OAAO,UAAU,CAAC;QACpB,KAAK,QAAQ,CAAC;QACd,KAAK,SAAS;YACZ,OAAO,WAAW,CAAC;QACrB,KAAK,QAAQ,CAAC;QACd,KAAK,SAAS;YACZ,OAAO,UAAU,CAAC;QACpB,KAAK,OAAO,CAAC;QACb,KAAK,QAAQ;YACX,OAAO,UAAU,CAAC;QACpB,KAAK,OAAO,CAAC;QACb,KAAK,QAAQ;YACX,OAAO,SAAS,CAAC;QACnB;YACE,8CAA8C;YAC9C,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;AACH,CAAC;AAGK,SAAU,4BAA4B,CAC1C,UAAsB,EACtB,IAAY,EACZ,UAAoB;IAEpB,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,CAAA,KAAA,EAAQ,IAAI,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,UAAU,GAAG,IAAqB,CAAC;IACzC,IAAI,QAAQ,GAA4B,yBAAyB,CAAC,UAAU,CAAC,CAAC;IAE9E,sFAAsF;IACtF,IAAI,QAAQ,KAAK,OAAO,IAAI,UAAU,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;QAC3D,OAAO,cAAc,CAAC;IACxB,CAAC;IACD,IAAI,QAAQ,KAAK,OAAO,IAAI,UAAU,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;QAC3D,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,IAAI,QAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;QACjD,IAAI,UAAU,KAAK,CAAC,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;YACzC,+DAA+D;YAC/D,MAAM,IAAI,KAAK,CAAC,CAAA,MAAA,EAAS,IAAI,EAAE,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,UAAU,EAAE,CAAC;YACf,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAwB,CAAC;QACpE,CAAC;QACD,OAAO,GAAG,QAAQ,CAAA,CAAA,EAAI,UAAU,EAAE,CAAC;IACrC,CAAC;IACD,IAAI,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;QACnD,IAAI,UAAU,KAAK,CAAC,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;YACzC,6DAA6D;YAC7D,MAAM,IAAI,KAAK,CAAC,CAAA,MAAA,EAAS,IAAI,EAAE,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,UAAU,EAAE,CAAC;YACf,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAA0B,CAAC;QACtE,CAAC;QACD,OAAO,GAAG,QAAQ,CAAA,CAAA,EAAI,UAAU,EAAE,CAAC;IACrC,CAAC;IAED,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;QACrB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,OAAO,GAAG,QAAQ,CAAA,CAAA,EAAI,UAAU,EAAE,CAAC;AACrC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3204, "column": 0}, "map": {"version":3,"file":"buffer-layout-helper.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/adapter-utils/buffer-layout-helper.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {BufferLayout} from '../adapter/types/buffer-layout';\r\n\r\n/** BufferLayoutHelper is a helper class that should not be used directly by applications */\r\nexport class BufferLayoutHelper {\r\n  bufferLayouts: BufferLayout[];\r\n\r\n  constructor(bufferLayouts: BufferLayout[]) {\r\n    this.bufferLayouts = bufferLayouts;\r\n  }\r\n\r\n  getBufferLayout(name: string): BufferLayout | null {\r\n    return this.bufferLayouts.find(layout => layout.name === name) || null;\r\n  }\r\n\r\n  /** Get attribute names from a BufferLayout */\r\n  getAttributeNamesForBuffer(bufferLayout: BufferLayout): string[] {\r\n    return bufferLayout.attributes\r\n      ? bufferLayout.attributes?.map(layout => layout.attribute)\r\n      : [bufferLayout.name];\r\n  }\r\n\r\n  mergeBufferLayouts(\r\n    bufferLayouts1: BufferLayout[],\r\n    bufferLayouts2: BufferLayout[]\r\n  ): BufferLayout[] {\r\n    const mergedLayouts = [...bufferLayouts1];\r\n    for (const attribute of bufferLayouts2) {\r\n      const index = mergedLayouts.findIndex(attribute2 => attribute2.name === attribute.name);\r\n      if (index < 0) {\r\n        mergedLayouts.push(attribute);\r\n      } else {\r\n        mergedLayouts[index] = attribute;\r\n      }\r\n    }\r\n    return mergedLayouts;\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAIpC,0FAAA,EAA4F;;;AACtF,MAAO,kBAAkB;IAC7B,aAAa,CAAiB;IAE9B,YAAY,aAA6B,CAAA;QACvC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,eAAe,CAAC,IAAY,EAAA;QAC1B,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAC,MAAM,CAAC,EAAE,AAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC;IACzE,CAAC;IAED,4CAAA,EAA8C,CAC9C,0BAA0B,CAAC,YAA0B,EAAA;QACnD,OAAO,YAAY,CAAC,UAAU,GAC1B,YAAY,CAAC,UAAU,EAAE,GAAG,EAAC,MAAM,CAAC,EAAE,AAAC,MAAM,CAAC,SAAS,CAAC,GACxD;YAAC,YAAY,CAAC,IAAI;SAAC,CAAC;IAC1B,CAAC;IAED,kBAAkB,CAChB,cAA8B,EAC9B,cAA8B,EAAA;QAE9B,MAAM,aAAa,GAAG,CAAC;eAAG,cAAc;SAAC,CAAC;QAC1C,KAAK,MAAM,SAAS,IAAI,cAAc,CAAE,CAAC;YACvC,MAAM,KAAK,GAAG,aAAa,CAAC,SAAS,EAAC,UAAU,CAAC,EAAE,AAAC,UAAU,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC;YACxF,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;gBACd,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChC,CAAC,MAAM,CAAC;gBACN,aAAa,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;YACnC,CAAC;QACH,CAAC;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 3238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3254, "column": 0}, "map": {"version":3,"file":"decode-shader-types.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/gpu-type-utils/decode-shader-types.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {ShaderUniformType, ShaderDataType} from './shader-types';\r\n\r\nconst UNIFORM_FORMATS: Record<ShaderUniformType, {type: ShaderDataType; components: number}> = {\r\n  f32: {type: 'f32', components: 1},\r\n  i32: {type: 'i32', components: 1},\r\n  u32: {type: 'u32', components: 1},\r\n  // 'bool-webgl': {type: 'bool-webgl', components: 1},\r\n  'vec2<f32>': {type: 'f32', components: 2},\r\n  'vec3<f32>': {type: 'f32', components: 3},\r\n  'vec4<f32>': {type: 'f32', components: 4},\r\n  'vec2<i32>': {type: 'i32', components: 2},\r\n  'vec3<i32>': {type: 'i32', components: 3},\r\n  'vec4<i32>': {type: 'i32', components: 4},\r\n  'vec2<u32>': {type: 'u32', components: 2},\r\n  'vec3<u32>': {type: 'u32', components: 3},\r\n  'vec4<u32>': {type: 'u32', components: 4},\r\n  'mat2x2<f32>': {type: 'f32', components: 4},\r\n  'mat2x3<f32>': {type: 'f32', components: 6},\r\n  'mat2x4<f32>': {type: 'f32', components: 8},\r\n  'mat3x2<f32>': {type: 'f32', components: 6},\r\n  'mat3x3<f32>': {type: 'f32', components: 9},\r\n  'mat3x4<f32>': {type: 'f32', components: 12},\r\n  'mat4x2<f32>': {type: 'f32', components: 8},\r\n  'mat4x3<f32>': {type: 'f32', components: 12},\r\n  'mat4x4<f32>': {type: 'f32', components: 16}\r\n};\r\n\r\n/** Split a uniform type string into type and components */\r\nexport function decodeShaderUniformType(format: ShaderUniformType): {\r\n  type: ShaderDataType;\r\n  components: number;\r\n} {\r\n  const decoded = UNIFORM_FORMATS[format];\r\n  return decoded;\r\n}\r\n\r\n/** Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes) */\r\nexport function alignTo(size: number, count: number): number {\r\n  // prettier-ignore\r\n  switch (count) {\r\n    case 1: return size; // Pad upwards to even multiple of 2\r\n    case 2: return size + (size % 2); // Pad upwards to even multiple of 2\r\n    default: return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;;AAIpC,MAAM,eAAe,GAA0E;IAC7F,GAAG,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACjC,GAAG,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACjC,GAAG,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACjC,qDAAqD;IACrD,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,WAAW,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IACzC,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IAC3C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IAC3C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IAC3C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IAC3C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IAC3C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,EAAE;IAAA,CAAC;IAC5C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,CAAC;IAAA,CAAC;IAC3C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,EAAE;IAAA,CAAC;IAC5C,aAAa,EAAE;QAAC,IAAI,EAAE,KAAK;QAAE,UAAU,EAAE,EAAE;IAAA,CAAC;CAC7C,CAAC;AAGI,SAAU,uBAAuB,CAAC,MAAyB;IAI/D,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IACxC,OAAO,OAAO,CAAC;AACjB,CAAC;AAGK,SAAU,OAAO,CAAC,IAAY,EAAE,KAAa;IACjD,kBAAkB;IAClB,OAAQ,KAAK,EAAE,CAAC;QACd,KAAK,CAAC,CAAC;YAAC,OAAO,IAAI,CAAC,CAAC,oCAAoC;QACzD,KAAK,CAAC,CAAC;YAAC,OAAO,IAAI,GAAG,AAAC,IAAI,GAAG,CAAC,CAAC,CAAC,AAAC,oCAAoC;QACtE,OAAO,CAAC;YAAC,OAAO,IAAI,GAAG,AAAC,CAAC,CAAC,GAAG,AAAC,IAAI,GAAG,CAAC,AAAC,CAAC,GAAG,CAAC,CAAC,CAAC,AAAC,oCAAoC;IACrF,CAAC;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3363, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3369, "column": 0}, "map": {"version":3,"file":"is-array.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/utils/is-array.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {TypedArray, NumberArray} from '../types';\r\n\r\n/**\r\n * Check is an array is a typed array\r\n * @param value value to be tested\r\n * @returns input as TypedArray, or null\r\n * @todo this should be provided by @math.gl/types\r\n */\r\nexport function isTypedArray(value: unknown): value is TypedArray {\r\n  return ArrayBuffer.isView(value) && !(value instanceof DataView);\r\n}\r\n\r\n/**\r\n * Check is an array is a numeric array (typed array or array of numbers)\r\n * @param value value to be tested\r\n * @returns input as NumberArray, or null\r\n * @todo this should be provided by @math.gl/types\r\n */\r\nexport function isNumberArray(value: unknown): value is NumberArray {\r\n  if (Array.isArray(value)) {\r\n    return value.length === 0 || typeof value[0] === 'number';\r\n  }\r\n  return isTypedArray(value);\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AAIpC;;;;;GAKG;;;;AACG,SAAU,YAAY,CAAC,KAAc;IACzC,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,YAAY,QAAQ,CAAC,CAAC;AACnE,CAAC;AAQK,SAAU,aAAa,CAAC,KAAc;IAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACzB,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC;IAC5D,CAAC;IACD,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3390, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3396, "column": 0}, "map": {"version":3,"file":"uniform-buffer-layout.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/portable/uniform-buffer-layout.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {ShaderUniformType, ShaderDataType} from '../gpu-type-utils/shader-types';\r\nimport {decodeShaderUniformType, alignTo} from '../gpu-type-utils/decode-shader-types';\r\n\r\nimport type {UniformValue} from '../adapter/types/uniforms';\r\nimport {getScratchArrayBuffer} from '../utils/array-utils-flat';\r\nimport {isNumberArray} from '../utils/is-array';\r\nimport {log} from '../utils/log';\r\n\r\n/**\r\n * Smallest buffer size that can be used for uniform buffers.\r\n * TODO - does this depend on device?\r\n */\r\nconst minBufferSize: number = 1024;\r\n\r\n/**\r\n * Std140 layout for uniform buffers\r\n * Supports manual listing of uniforms\r\n */\r\nexport class UniformBufferLayout {\r\n  readonly layout: Record<string, {offset: number; size: number; type: ShaderDataType}> = {};\r\n\r\n  /** number of bytes needed for buffer allocation */\r\n  readonly byteLength: number;\r\n\r\n  /** Create a new UniformBufferLayout given a map of attributes. */\r\n  constructor(uniformTypes: Record<string, ShaderUniformType>) {\r\n    /** number of 4 byte slots taken */\r\n    let size: number = 0;\r\n\r\n    // Add layout (type, size and offset) definitions for each uniform in the layout\r\n    for (const [key, uniformType] of Object.entries(uniformTypes)) {\r\n      const typeAndComponents = decodeShaderUniformType(uniformType);\r\n      const {type, components: count} = typeAndComponents;\r\n      // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\r\n      size = alignTo(size, count);\r\n      // Use the aligned size as the offset of the current uniform.\r\n      const offset = size;\r\n      // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\r\n      size += count;\r\n      this.layout[key] = {type, size: count, offset};\r\n    }\r\n    size += (4 - (size % 4)) % 4;\r\n\r\n    const actualByteLength = size * 4;\r\n    this.byteLength = Math.max(actualByteLength, minBufferSize);\r\n  }\r\n\r\n  /** Get the data for the complete buffer */\r\n  getData(uniformValues: Record<string, UniformValue>): Uint8Array {\r\n    const bufferSize = Math.max(this.byteLength, minBufferSize);\r\n\r\n    // Allocate three typed arrays pointing at same memory\r\n    const arrayBuffer = getScratchArrayBuffer(bufferSize);\r\n    const typedArrays = {\r\n      i32: new Int32Array(arrayBuffer),\r\n      u32: new Uint32Array(arrayBuffer),\r\n      f32: new Float32Array(arrayBuffer),\r\n      // TODO not implemented\r\n      f16: new Uint16Array(arrayBuffer)\r\n    };\r\n    // TODO is this needed?\r\n    // typedArrays.i32.fill(0);\r\n\r\n    for (const [name, value] of Object.entries(uniformValues)) {\r\n      const uniformLayout = this.layout[name];\r\n      if (!uniformLayout) {\r\n        log.warn(`Supplied uniform value ${name} not present in uniform block layout`)();\r\n        // eslint-disable-next-line no-continue\r\n        continue;\r\n      }\r\n\r\n      const {type, size, offset} = uniformLayout;\r\n      const typedArray = typedArrays[type];\r\n      if (size === 1) {\r\n        if (typeof value !== 'number' && typeof value !== 'boolean') {\r\n          log.warn(\r\n            `Supplied value for single component uniform ${name} is not a number: ${value}`\r\n          )();\r\n          // eslint-disable-next-line no-continue\r\n          continue;\r\n        }\r\n        // single value -> just set it\r\n        typedArray[offset] = Number(value);\r\n      } else {\r\n        if (!isNumberArray(value)) {\r\n          log.warn(\r\n            `Supplied value for multi component / array uniform ${name} is not a numeric array: ${value}`\r\n          )();\r\n          // eslint-disable-next-line no-continue\r\n          continue;\r\n        }\r\n        // vector/matrix -> copy the supplied (typed) array, starting from offset\r\n        // TODO: we should limit or check size in case the supplied data overflows\r\n        typedArray.set(value, offset);\r\n      }\r\n    }\r\n\r\n    return new Uint8Array(arrayBuffer);\r\n  }\r\n\r\n  /** Does this layout have a field with specified name */\r\n  has(name: string) {\r\n    return Boolean(this.layout[name]);\r\n  }\r\n\r\n  /** Get offset and size for a field with specified name */\r\n  get(name: string): {offset: number; size: number} | undefined {\r\n    const layout = this.layout[name];\r\n    return layout;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3487, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3493, "column": 0}, "map": {"version":3,"file":"array-equal.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/utils/array-equal.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport {isNumberArray} from './is-array';\r\n\r\n/** Test if two arrays are deep equal, with a length limit that defaults to 16 */\r\nexport function arrayEqual(a: unknown, b: unknown, limit: number = 16) {\r\n  if (a !== b) {\r\n    return false;\r\n  }\r\n  const arrayA = a;\r\n  const arrayB = b;\r\n  if (!isNumberArray(arrayA)) {\r\n    return false;\r\n  }\r\n  if (isNumberArray(arrayB) && arrayA.length === arrayB.length) {\r\n    for (let i = 0; i < arrayA.length; ++i) {\r\n      if (arrayB[i] !== arrayA[i]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Copy a value */\r\nexport function arrayCopy<T>(a: T): T {\r\n  if (isNumberArray(a)) {\r\n    return a.slice() as T;\r\n  }\r\n  return a;\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;;AAEpC,OAAO,EAAC,aAAa,EAAC,sBAAmB;;AAGnC,SAAU,UAAU,CAAC,CAAU,EAAE,CAAU,EAAE,QAAgB,EAAE;IACnE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACZ,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,MAAM,GAAG,CAAC,CAAC;IACjB,MAAM,MAAM,GAAG,CAAC,CAAC;IACjB,IAAI,6KAAC,gBAAA,AAAa,EAAC,MAAM,CAAC,EAAE,CAAC;QAC3B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,gLAAI,gBAAA,AAAa,EAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE,CAAC;QAC7D,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE,CAAC;YACvC,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC5B,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAGK,SAAU,SAAS,CAAI,CAAI;IAC/B,gLAAI,gBAAA,AAAa,EAAC,CAAC,CAAC,EAAE,CAAC;QACrB,OAAO,CAAC,CAAC,KAAK,EAAO,CAAC;IACxB,CAAC;IACD,OAAO,CAAC,CAAC;AACX,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3526, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3532, "column": 0}, "map": {"version":3,"file":"uniform-block.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/portable/uniform-block.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {ShaderUniformType} from '../gpu-type-utils/shader-types';\r\nimport type {UniformValue} from '../adapter/types/uniforms';\r\nimport {\r\n  ShaderLayout,\r\n  UniformInfo,\r\n  UniformBufferBindingLayout\r\n} from '../adapter/types/shader-layout';\r\nimport {arrayEqual, arrayCopy} from '../utils/array-equal';\r\n\r\n/**\r\n * A uniform block holds values of the of uniform values for one uniform block / buffer.\r\n * It also does some book keeping on what has changed, to minimize unnecessary writes to uniform buffers.\r\n */\r\nexport class UniformBlock<\r\n  TUniforms extends Record<string, UniformValue> = Record<string, UniformValue>\r\n> {\r\n  name: string;\r\n\r\n  uniforms: Record<keyof TUniforms, UniformValue> = {} as Record<keyof TUniforms, UniformValue>;\r\n  modifiedUniforms: Record<keyof TUniforms, boolean> = {} as Record<keyof TUniforms, boolean>;\r\n  modified: boolean = true;\r\n\r\n  readonly bindingLayout: Record<string, UniformInfo> = {};\r\n  needsRedraw: string | false = 'initialized';\r\n\r\n  constructor(props?: {\r\n    name?: string;\r\n    shaderLayout?: ShaderLayout;\r\n    uniformTypes?: Record<keyof TUniforms, Record<string, ShaderUniformType>>;\r\n  }) {\r\n    this.name = props?.name || 'unnamed';\r\n\r\n    // TODO - Extract uniform layout from the shaderLayout object\r\n    if (props?.name && props?.shaderLayout) {\r\n      const binding = props?.shaderLayout.bindings?.find(\r\n        binding_ => binding_.type === 'uniform' && binding_.name === props?.name\r\n      );\r\n      if (!binding) {\r\n        throw new Error(props?.name);\r\n      }\r\n\r\n      const uniformBlock = binding as UniformBufferBindingLayout;\r\n      for (const uniform of uniformBlock.uniforms || []) {\r\n        this.bindingLayout[uniform.name] = uniform;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Set a map of uniforms */\r\n  setUniforms(uniforms: Partial<TUniforms>): void {\r\n    for (const [key, value] of Object.entries(uniforms)) {\r\n      this._setUniform(key, value);\r\n      if (!this.needsRedraw) {\r\n        this.setNeedsRedraw(`${this.name}.${key}=${value}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  setNeedsRedraw(reason: string): void {\r\n    this.needsRedraw = this.needsRedraw || reason;\r\n  }\r\n\r\n  /** Returns all uniforms */\r\n  getAllUniforms(): Record<string, UniformValue> {\r\n    // @ts-expect-error\r\n    this.modifiedUniforms = {};\r\n    this.needsRedraw = false;\r\n    return (this.uniforms || {}) as Record<string, UniformValue>;\r\n  }\r\n\r\n  /** Set a single uniform */\r\n  private _setUniform(key: keyof TUniforms, value: UniformValue) {\r\n    if (arrayEqual(this.uniforms[key], value)) {\r\n      return;\r\n    }\r\n    this.uniforms[key] = arrayCopy(value);\r\n    this.modifiedUniforms[key] = true;\r\n    this.modified = true;\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;;;;AASpC,OAAO,EAAC,UAAU,EAAE,SAAS,EAAC,gCAA6B;;AAMrD,MAAO,YAAY;IAGvB,IAAI,CAAS;IAEb,QAAQ,GAA0C,CAAA,CAA2C,CAAC;IAC9F,gBAAgB,GAAqC,CAAA,CAAsC,CAAC;IAC5F,QAAQ,GAAY,IAAI,CAAC;IAEhB,aAAa,GAAgC,CAAA,CAAE,CAAC;IACzD,WAAW,GAAmB,aAAa,CAAC;IAE5C,YAAY,KAIX,CAAA;QACC,IAAI,CAAC,IAAI,GAAG,KAAK,EAAE,IAAI,IAAI,SAAS,CAAC;QAErC,6DAA6D;QAC7D,IAAI,KAAK,EAAE,IAAI,IAAI,KAAK,EAAE,YAAY,EAAE,CAAC;YACvC,MAAM,OAAO,GAAG,KAAK,EAAE,YAAY,CAAC,QAAQ,EAAE,IAAI,EAChD,QAAQ,CAAC,EAAE,AAAC,QAAQ,CAAC,IAAI,KAAK,SAAS,IAAI,QAAQ,CAAC,IAAI,KAAK,KAAK,EAAE,IAAI,CACzE,CAAC;YACF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC/B,CAAC;YAED,MAAM,YAAY,GAAG,OAAqC,CAAC;YAC3D,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,QAAQ,IAAI,EAAE,CAAE,CAAC;gBAClD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;YAC7C,CAAC;QACH,CAAC;IACH,CAAC;IAED,0BAAA,EAA4B,CAC5B,WAAW,CAAC,QAA4B,EAAA;QACtC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAE,CAAC;YACpD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC7B,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,IAAI,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA,EAAI,KAAK,EAAE,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;IACH,CAAC;IAED,cAAc,CAAC,MAAc,EAAA;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC;IAChD,CAAC;IAED,yBAAA,EAA2B,CAC3B,cAAc,GAAA;QACZ,mBAAmB;QACnB,IAAI,CAAC,gBAAgB,GAAG,CAAA,CAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,OAAO,AAAC,IAAI,CAAC,QAAQ,IAAI,CAAA,CAAE,CAAiC,CAAC;IAC/D,CAAC;IAED,yBAAA,EAA2B,CACnB,WAAW,CAAC,GAAoB,EAAE,KAAmB,EAAA;QAC3D,mLAAI,aAAA,AAAU,EAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;YAC1C,OAAO;QACT,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kLAAG,YAAA,AAAS,EAAC,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 3587, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3593, "column": 0}, "map": {"version":3,"file":"uniform-store.js","sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/%40luma.gl/core/src/portable/uniform-store.ts"],"sourcesContent":["// luma.gl\r\n// SPDX-License-Identifier: MIT\r\n// Copyright (c) vis.gl contributors\r\n\r\nimport type {ShaderUniformType} from '../gpu-type-utils/shader-types';\r\nimport type {UniformValue} from '../adapter/types/uniforms';\r\nimport type {Device} from '../adapter/device';\r\nimport {Buffer} from '../adapter/resources/buffer';\r\nimport {log} from '../utils/log';\r\nimport {UniformBlock} from './uniform-block';\r\nimport {UniformBufferLayout} from './uniform-buffer-layout';\r\n\r\n/**\r\n * A uniform store holds a uniform values for one or more uniform blocks,\r\n * - It can generate binary data for any uniform buffer\r\n * - It can manage a uniform buffer for each block\r\n * - It can update managed uniform buffers with a single call\r\n * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.\r\n */\r\nexport class UniformStore<\r\n  TPropGroups extends Record<string, Record<string, unknown>> = Record<\r\n    string,\r\n    Record<string, unknown>\r\n  >\r\n> {\r\n  /** Stores the uniform values for each uniform block */\r\n  uniformBlocks = new Map<keyof TPropGroups, UniformBlock>();\r\n  /** Can generate data for a uniform buffer for each block from data */\r\n  uniformBufferLayouts = new Map<keyof TPropGroups, UniformBufferLayout>();\r\n  /** Actual buffer for the blocks */\r\n  uniformBuffers = new Map<keyof TPropGroups, Buffer>();\r\n\r\n  /**\r\n   * Create a new UniformStore instance\r\n   * @param blocks\r\n   */\r\n  constructor(\r\n    blocks: Record<\r\n      keyof TPropGroups,\r\n      {\r\n        uniformTypes?: Record<string, ShaderUniformType>;\r\n        defaultProps?: Record<string, unknown>;\r\n        defaultUniforms?: Record<string, UniformValue>;\r\n      }\r\n    >\r\n  ) {\r\n    for (const [bufferName, block] of Object.entries(blocks)) {\r\n      const uniformBufferName = bufferName as keyof TPropGroups;\r\n\r\n      // Create a layout object to help us generate correctly formatted binary uniform buffers\r\n      const uniformBufferLayout = new UniformBufferLayout(block.uniformTypes || {});\r\n      this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);\r\n\r\n      // Create a Uniform block to store the uniforms for each buffer.\r\n      const uniformBlock = new UniformBlock({name: bufferName});\r\n      uniformBlock.setUniforms(block.defaultUniforms || {});\r\n      this.uniformBlocks.set(uniformBufferName, uniformBlock);\r\n    }\r\n  }\r\n\r\n  /** Destroy any managed uniform buffers */\r\n  destroy(): void {\r\n    for (const uniformBuffer of this.uniformBuffers.values()) {\r\n      uniformBuffer.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set uniforms\r\n   * Makes all properties partial\r\n   */\r\n  setUniforms(\r\n    uniforms: Partial<{[group in keyof TPropGroups]: Partial<TPropGroups[group]>}>\r\n  ): void {\r\n    for (const [blockName, uniformValues] of Object.entries(uniforms)) {\r\n      this.uniformBlocks.get(blockName)?.setUniforms(uniformValues);\r\n      // We leverage logging in updateUniformBuffers(), even though slightly less efficient\r\n      // this.updateUniformBuffer(blockName);\r\n    }\r\n\r\n    this.updateUniformBuffers();\r\n  }\r\n\r\n  /** Get the required minimum length of the uniform buffer */\r\n  getUniformBufferByteLength(uniformBufferName: keyof TPropGroups): number {\r\n    return this.uniformBufferLayouts.get(uniformBufferName)?.byteLength || 0;\r\n  }\r\n\r\n  /** Get formatted binary memory that can be uploaded to a buffer */\r\n  getUniformBufferData(uniformBufferName: keyof TPropGroups): Uint8Array {\r\n    const uniformValues = this.uniformBlocks.get(uniformBufferName)?.getAllUniforms() || {};\r\n    // @ts-ignore\r\n    return this.uniformBufferLayouts.get(uniformBufferName)?.getData(uniformValues);\r\n  }\r\n\r\n  /**\r\n   * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)\r\n   * The new buffer is initialized with current / supplied values\r\n   */\r\n  createUniformBuffer(\r\n    device: Device,\r\n    uniformBufferName: keyof TPropGroups,\r\n    uniforms?: Partial<{[group in keyof TPropGroups]: Partial<TPropGroups[group]>}>\r\n  ): Buffer {\r\n    if (uniforms) {\r\n      this.setUniforms(uniforms);\r\n    }\r\n    const byteLength = this.getUniformBufferByteLength(uniformBufferName);\r\n    const uniformBuffer = device.createBuffer({\r\n      usage: Buffer.UNIFORM | Buffer.COPY_DST,\r\n      byteLength\r\n    });\r\n    // Note that this clears the needs redraw flag\r\n    const uniformBufferData = this.getUniformBufferData(uniformBufferName);\r\n    uniformBuffer.write(uniformBufferData);\r\n    return uniformBuffer;\r\n  }\r\n\r\n  /** Get the managed uniform buffer. \"managed\" resources are destroyed when the uniformStore is destroyed. */\r\n  getManagedUniformBuffer(device: Device, uniformBufferName: keyof TPropGroups): Buffer {\r\n    if (!this.uniformBuffers.get(uniformBufferName)) {\r\n      const byteLength = this.getUniformBufferByteLength(uniformBufferName);\r\n      const uniformBuffer = device.createBuffer({\r\n        usage: Buffer.UNIFORM | Buffer.COPY_DST,\r\n        byteLength\r\n      });\r\n      this.uniformBuffers.set(uniformBufferName, uniformBuffer);\r\n    }\r\n    // this.updateUniformBuffers();\r\n    // @ts-ignore\r\n    return this.uniformBuffers.get(uniformBufferName);\r\n  }\r\n\r\n  /** Updates all uniform buffers where values have changed */\r\n  updateUniformBuffers(): false | string {\r\n    let reason: false | string = false;\r\n    for (const uniformBufferName of this.uniformBlocks.keys()) {\r\n      const bufferReason = this.updateUniformBuffer(uniformBufferName);\r\n      reason ||= bufferReason;\r\n    }\r\n    if (reason) {\r\n      log.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();\r\n    }\r\n    return reason;\r\n  }\r\n\r\n  /** Update one uniform buffer. Only updates if values have changed */\r\n  updateUniformBuffer(uniformBufferName: keyof TPropGroups): false | string {\r\n    const uniformBlock = this.uniformBlocks.get(uniformBufferName);\r\n    let uniformBuffer = this.uniformBuffers.get(uniformBufferName);\r\n\r\n    let reason: false | string = false;\r\n    if (uniformBuffer && uniformBlock?.needsRedraw) {\r\n      reason ||= uniformBlock.needsRedraw;\r\n      // This clears the needs redraw flag\r\n      const uniformBufferData = this.getUniformBufferData(uniformBufferName);\r\n\r\n      uniformBuffer = this.uniformBuffers.get(uniformBufferName);\r\n      uniformBuffer?.write(uniformBufferData);\r\n\r\n      // logging - TODO - don't query the values unnecessarily\r\n      const uniformValues = this.uniformBlocks.get(uniformBufferName)?.getAllUniforms();\r\n      log.log(\r\n        4,\r\n        `Writing to uniform buffer ${String(uniformBufferName)}`,\r\n        uniformBufferData,\r\n        uniformValues\r\n      )();\r\n    }\r\n    return reason;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3710, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}