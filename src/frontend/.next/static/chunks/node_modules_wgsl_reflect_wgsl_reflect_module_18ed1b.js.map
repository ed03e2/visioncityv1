{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/parcial2/visioncityv1/src/frontend/node_modules/wgsl_reflect/wgsl_reflect.module.js"],"sourcesContent":["class ParseContext {\r\n    constructor() {\r\n        this.constants = new Map();\r\n        this.aliases = new Map();\r\n        this.structs = new Map();\r\n    }\r\n}\r\n/**\r\n * @class Node\r\n * @category AST\r\n * Base class for AST nodes parsed from a WGSL shader.\r\n */\r\nclass Node {\r\n    constructor() { }\r\n    get isAstNode() {\r\n        return true;\r\n    }\r\n    get astNodeType() {\r\n        return \"\";\r\n    }\r\n    evaluate(context) {\r\n        throw new Error(\"Cannot evaluate node\");\r\n    }\r\n    evaluateString(context) {\r\n        return this.evaluate(context).toString();\r\n    }\r\n    search(callback) { }\r\n    searchBlock(block, callback) {\r\n        if (block) {\r\n            callback(_BlockStart.instance);\r\n            for (const node of block) {\r\n                if (node instanceof Array) {\r\n                    this.searchBlock(node, callback);\r\n                }\r\n                else {\r\n                    node.search(callback);\r\n                }\r\n            }\r\n            callback(_BlockEnd.instance);\r\n        }\r\n    }\r\n}\r\n// For internal use only\r\nclass _BlockStart extends Node {\r\n}\r\n_BlockStart.instance = new _BlockStart();\r\n// For internal use only\r\nclass _BlockEnd extends Node {\r\n}\r\n_BlockEnd.instance = new _BlockEnd();\r\n/**\r\n * @class Statement\r\n * @extends Node\r\n * @category AST\r\n */\r\nclass Statement extends Node {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n/**\r\n * @class Function\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Function extends Statement {\r\n    constructor(name, args, returnType, body, startLine, endLine) {\r\n        super();\r\n        this.calls = new Set();\r\n        this.name = name;\r\n        this.args = args;\r\n        this.returnType = returnType;\r\n        this.body = body;\r\n        this.startLine = startLine;\r\n        this.endLine = endLine;\r\n    }\r\n    get astNodeType() {\r\n        return \"function\";\r\n    }\r\n    search(callback) {\r\n        this.searchBlock(this.body, callback);\r\n    }\r\n}\r\n/**\r\n * @class StaticAssert\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass StaticAssert extends Statement {\r\n    constructor(expression) {\r\n        super();\r\n        this.expression = expression;\r\n    }\r\n    get astNodeType() {\r\n        return \"staticAssert\";\r\n    }\r\n    search(callback) {\r\n        this.expression.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class While\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass While extends Statement {\r\n    constructor(condition, body) {\r\n        super();\r\n        this.condition = condition;\r\n        this.body = body;\r\n    }\r\n    get astNodeType() {\r\n        return \"while\";\r\n    }\r\n    search(callback) {\r\n        this.condition.search(callback);\r\n        this.searchBlock(this.body, callback);\r\n    }\r\n}\r\n/**\r\n * @class Continuing\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Continuing extends Statement {\r\n    constructor(body) {\r\n        super();\r\n        this.body = body;\r\n    }\r\n    get astNodeType() {\r\n        return \"continuing\";\r\n    }\r\n    search(callback) {\r\n        this.searchBlock(this.body, callback);\r\n    }\r\n}\r\n/**\r\n * @class For\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass For extends Statement {\r\n    constructor(init, condition, increment, body) {\r\n        super();\r\n        this.init = init;\r\n        this.condition = condition;\r\n        this.increment = increment;\r\n        this.body = body;\r\n    }\r\n    get astNodeType() {\r\n        return \"for\";\r\n    }\r\n    search(callback) {\r\n        var _a, _b, _c;\r\n        (_a = this.init) === null || _a === void 0 ? void 0 : _a.search(callback);\r\n        (_b = this.condition) === null || _b === void 0 ? void 0 : _b.search(callback);\r\n        (_c = this.increment) === null || _c === void 0 ? void 0 : _c.search(callback);\r\n        this.searchBlock(this.body, callback);\r\n    }\r\n}\r\n/**\r\n * @class Var\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Var extends Statement {\r\n    constructor(name, type, storage, access, value) {\r\n        super();\r\n        this.name = name;\r\n        this.type = type;\r\n        this.storage = storage;\r\n        this.access = access;\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"var\";\r\n    }\r\n    search(callback) {\r\n        var _a;\r\n        callback(this);\r\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class Override\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Override extends Statement {\r\n    constructor(name, type, value) {\r\n        super();\r\n        this.name = name;\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"override\";\r\n    }\r\n    search(callback) {\r\n        var _a;\r\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class Let\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Let extends Statement {\r\n    constructor(name, type, storage, access, value) {\r\n        super();\r\n        this.name = name;\r\n        this.type = type;\r\n        this.storage = storage;\r\n        this.access = access;\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"let\";\r\n    }\r\n    search(callback) {\r\n        var _a;\r\n        callback(this);\r\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class Const\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Const extends Statement {\r\n    constructor(name, type, storage, access, value) {\r\n        super();\r\n        this.name = name;\r\n        this.type = type;\r\n        this.storage = storage;\r\n        this.access = access;\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"const\";\r\n    }\r\n    evaluate(context) {\r\n        return this.value.evaluate(context);\r\n    }\r\n    search(callback) {\r\n        var _a;\r\n        callback(this);\r\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\r\n    }\r\n}\r\nvar IncrementOperator;\r\n(function (IncrementOperator) {\r\n    IncrementOperator[\"increment\"] = \"++\";\r\n    IncrementOperator[\"decrement\"] = \"--\";\r\n})(IncrementOperator || (IncrementOperator = {}));\r\n(function (IncrementOperator) {\r\n    function parse(val) {\r\n        const key = val;\r\n        if (key == \"parse\")\r\n            throw new Error(\"Invalid value for IncrementOperator\");\r\n        return IncrementOperator[key];\r\n    }\r\n    IncrementOperator.parse = parse;\r\n})(IncrementOperator || (IncrementOperator = {}));\r\n/**\r\n * @class Increment\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Increment extends Statement {\r\n    constructor(operator, variable) {\r\n        super();\r\n        this.operator = operator;\r\n        this.variable = variable;\r\n    }\r\n    get astNodeType() {\r\n        return \"increment\";\r\n    }\r\n    search(callback) {\r\n        this.variable.search(callback);\r\n    }\r\n}\r\nvar AssignOperator;\r\n(function (AssignOperator) {\r\n    AssignOperator[\"assign\"] = \"=\";\r\n    AssignOperator[\"addAssign\"] = \"+=\";\r\n    AssignOperator[\"subtractAssin\"] = \"-=\";\r\n    AssignOperator[\"multiplyAssign\"] = \"*=\";\r\n    AssignOperator[\"divideAssign\"] = \"/=\";\r\n    AssignOperator[\"moduloAssign\"] = \"%=\";\r\n    AssignOperator[\"andAssign\"] = \"&=\";\r\n    AssignOperator[\"orAssign\"] = \"|=\";\r\n    AssignOperator[\"xorAssign\"] = \"^=\";\r\n    AssignOperator[\"shiftLeftAssign\"] = \"<<=\";\r\n    AssignOperator[\"shiftRightAssign\"] = \">>=\";\r\n})(AssignOperator || (AssignOperator = {}));\r\n(function (AssignOperator) {\r\n    function parse(val) {\r\n        const key = val;\r\n        if (key == \"parse\") {\r\n            throw new Error(\"Invalid value for AssignOperator\");\r\n        }\r\n        //return AssignOperator[key];\r\n        return key;\r\n    }\r\n    AssignOperator.parse = parse;\r\n})(AssignOperator || (AssignOperator = {}));\r\n/**\r\n * @class Assign\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Assign extends Statement {\r\n    constructor(operator, variable, value) {\r\n        super();\r\n        this.operator = operator;\r\n        this.variable = variable;\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"assign\";\r\n    }\r\n    search(callback) {\r\n        this.variable.search(callback);\r\n        this.value.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class Call\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Call extends Statement {\r\n    constructor(name, args) {\r\n        super();\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n    get astNodeType() {\r\n        return \"call\";\r\n    }\r\n    search(callback) {\r\n        for (const node of this.args) {\r\n            node.search(callback);\r\n        }\r\n        callback(this);\r\n    }\r\n}\r\n/**\r\n * @class Loop\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Loop extends Statement {\r\n    constructor(body, continuing) {\r\n        super();\r\n        this.body = body;\r\n        this.continuing = continuing;\r\n    }\r\n    get astNodeType() {\r\n        return \"loop\";\r\n    }\r\n}\r\n/**\r\n * @class Switch\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Switch extends Statement {\r\n    constructor(condition, body) {\r\n        super();\r\n        this.condition = condition;\r\n        this.body = body;\r\n    }\r\n    get astNodeType() {\r\n        return \"body\";\r\n    }\r\n}\r\n/**\r\n * @class If\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass If extends Statement {\r\n    constructor(condition, body, elseif, _else) {\r\n        super();\r\n        this.condition = condition;\r\n        this.body = body;\r\n        this.elseif = elseif;\r\n        this.else = _else;\r\n    }\r\n    get astNodeType() {\r\n        return \"if\";\r\n    }\r\n    search(callback) {\r\n        this.condition.search(callback);\r\n        this.searchBlock(this.body, callback);\r\n        this.searchBlock(this.elseif, callback);\r\n        this.searchBlock(this.else, callback);\r\n    }\r\n}\r\n/**\r\n * @class Return\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Return extends Statement {\r\n    constructor(value) {\r\n        super();\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"return\";\r\n    }\r\n    search(callback) {\r\n        var _a;\r\n        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class Enable\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Enable extends Statement {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n    get astNodeType() {\r\n        return \"enable\";\r\n    }\r\n}\r\n/**\r\n * @class Requires\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Requires extends Statement {\r\n    constructor(extensions) {\r\n        super();\r\n        this.extensions = extensions;\r\n    }\r\n    get astNodeType() {\r\n        return \"requires\";\r\n    }\r\n}\r\n/**\r\n * @class Diagnostic\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Diagnostic extends Statement {\r\n    constructor(severity, rule) {\r\n        super();\r\n        this.severity = severity;\r\n        this.rule = rule;\r\n    }\r\n    get astNodeType() {\r\n        return \"diagnostic\";\r\n    }\r\n}\r\n/**\r\n * @class Alias\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Alias extends Statement {\r\n    constructor(name, type) {\r\n        super();\r\n        this.name = name;\r\n        this.type = type;\r\n    }\r\n    get astNodeType() {\r\n        return \"alias\";\r\n    }\r\n}\r\n/**\r\n * @class Discard\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Discard extends Statement {\r\n    constructor() {\r\n        super();\r\n    }\r\n    get astNodeType() {\r\n        return \"discard\";\r\n    }\r\n}\r\n/**\r\n * @class Break\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Break extends Statement {\r\n    constructor() {\r\n        super();\r\n    }\r\n    get astNodeType() {\r\n        return \"break\";\r\n    }\r\n}\r\n/**\r\n * @class Continue\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Continue extends Statement {\r\n    constructor() {\r\n        super();\r\n    }\r\n    get astNodeType() {\r\n        return \"continue\";\r\n    }\r\n}\r\n/**\r\n * @class Type\r\n * @extends Statement\r\n * @category AST\r\n */\r\nclass Type extends Statement {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n    get astNodeType() {\r\n        return \"type\";\r\n    }\r\n    get isStruct() {\r\n        return false;\r\n    }\r\n    get isArray() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * @class StructType\r\n * @extends Type\r\n * @category AST\r\n */\r\nclass Struct extends Type {\r\n    constructor(name, members, startLine, endLine) {\r\n        super(name);\r\n        this.members = members;\r\n        this.startLine = startLine;\r\n        this.endLine = endLine;\r\n    }\r\n    get astNodeType() {\r\n        return \"struct\";\r\n    }\r\n    get isStruct() {\r\n        return true;\r\n    }\r\n    /// Return the index of the member with the given name, or -1 if not found.\r\n    getMemberIndex(name) {\r\n        for (let i = 0; i < this.members.length; i++) {\r\n            if (this.members[i].name == name)\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n/**\r\n * @class TemplateType\r\n * @extends Type\r\n * @category AST\r\n */\r\nclass TemplateType extends Type {\r\n    constructor(name, format, access) {\r\n        super(name);\r\n        this.format = format;\r\n        this.access = access;\r\n    }\r\n    get astNodeType() {\r\n        return \"template\";\r\n    }\r\n}\r\n/**\r\n * @class PointerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nclass PointerType extends Type {\r\n    constructor(name, storage, type, access) {\r\n        super(name);\r\n        this.storage = storage;\r\n        this.type = type;\r\n        this.access = access;\r\n    }\r\n    get astNodeType() {\r\n        return \"pointer\";\r\n    }\r\n}\r\n/**\r\n * @class ArrayType\r\n * @extends Type\r\n * @category AST\r\n */\r\nclass ArrayType extends Type {\r\n    constructor(name, attributes, format, count) {\r\n        super(name);\r\n        this.attributes = attributes;\r\n        this.format = format;\r\n        this.count = count;\r\n    }\r\n    get astNodeType() {\r\n        return \"array\";\r\n    }\r\n    get isArray() {\r\n        return true;\r\n    }\r\n}\r\n/**\r\n * @class SamplerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nclass SamplerType extends Type {\r\n    constructor(name, format, access) {\r\n        super(name);\r\n        this.format = format;\r\n        this.access = access;\r\n    }\r\n    get astNodeType() {\r\n        return \"sampler\";\r\n    }\r\n}\r\n/**\r\n * @class Expression\r\n * @extends Node\r\n * @category AST\r\n */\r\nclass Expression extends Node {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n/**\r\n * @class StringExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass StringExpr extends Expression {\r\n    constructor(value) {\r\n        super();\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"stringExpr\";\r\n    }\r\n    toString() {\r\n        return this.value;\r\n    }\r\n    evaluateString() {\r\n        return this.value;\r\n    }\r\n}\r\n/**\r\n * @class CreateExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass CreateExpr extends Expression {\r\n    constructor(type, args) {\r\n        super();\r\n        this.type = type;\r\n        this.args = args;\r\n    }\r\n    get astNodeType() {\r\n        return \"createExpr\";\r\n    }\r\n    search(callback) {\r\n        callback(this);\r\n        if (this.args) {\r\n            for (const node of this.args) {\r\n                node.search(callback);\r\n            }\r\n        }\r\n    }\r\n    evaluate(context) {\r\n        return this.args[0].evaluate(context);\r\n    }\r\n}\r\n/**\r\n * @class CallExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass CallExpr extends Expression {\r\n    constructor(name, args) {\r\n        super();\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n    get astNodeType() {\r\n        return \"callExpr\";\r\n    }\r\n    evaluate(context) {\r\n        switch (this.name) {\r\n            case \"abs\":\r\n                return Math.abs(this.args[0].evaluate(context));\r\n            case \"acos\":\r\n                return Math.acos(this.args[0].evaluate(context));\r\n            case \"acosh\":\r\n                return Math.acosh(this.args[0].evaluate(context));\r\n            case \"asin\":\r\n                return Math.asin(this.args[0].evaluate(context));\r\n            case \"asinh\":\r\n                return Math.asinh(this.args[0].evaluate(context));\r\n            case \"atan\":\r\n                return Math.atan(this.args[0].evaluate(context));\r\n            case \"atan2\":\r\n                return Math.atan2(this.args[0].evaluate(context), this.args[1].evaluate(context));\r\n            case \"atanh\":\r\n                return Math.atanh(this.args[0].evaluate(context));\r\n            case \"ceil\":\r\n                return Math.ceil(this.args[0].evaluate(context));\r\n            case \"clamp\":\r\n                return Math.min(Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context)), this.args[2].evaluate(context));\r\n            case \"cos\":\r\n                return Math.cos(this.args[0].evaluate(context));\r\n            //case \"cross\":\r\n            //TODO: (x[i] * y[j] - x[j] * y[i])\r\n            case \"degrees\":\r\n                return (this.args[0].evaluate(context) * 180) / Math.PI;\r\n            //case \"determinant\":\r\n            //TODO implement\r\n            case \"distance\":\r\n                return Math.sqrt(Math.pow(this.args[0].evaluate(context) - this.args[1].evaluate(context), 2));\r\n            case \"dot\":\r\n            //TODO: (x[i] * y[i])\r\n            case \"exp\":\r\n                return Math.exp(this.args[0].evaluate(context));\r\n            case \"exp2\":\r\n                return Math.pow(2, this.args[0].evaluate(context));\r\n            //case \"extractBits\":\r\n            //TODO: implement\r\n            //case \"firstLeadingBit\":\r\n            //TODO: implement\r\n            case \"floor\":\r\n                return Math.floor(this.args[0].evaluate(context));\r\n            case \"fma\":\r\n                return (this.args[0].evaluate(context) * this.args[1].evaluate(context) +\r\n                    this.args[2].evaluate(context));\r\n            case \"fract\":\r\n                return (this.args[0].evaluate(context) -\r\n                    Math.floor(this.args[0].evaluate(context)));\r\n            //case \"frexp\":\r\n            //TODO: implement\r\n            case \"inverseSqrt\":\r\n                return 1 / Math.sqrt(this.args[0].evaluate(context));\r\n            //case \"length\":\r\n            //TODO: implement\r\n            case \"log\":\r\n                return Math.log(this.args[0].evaluate(context));\r\n            case \"log2\":\r\n                return Math.log2(this.args[0].evaluate(context));\r\n            case \"max\":\r\n                return Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context));\r\n            case \"min\":\r\n                return Math.min(this.args[0].evaluate(context), this.args[1].evaluate(context));\r\n            case \"mix\":\r\n                return (this.args[0].evaluate(context) *\r\n                    (1 - this.args[2].evaluate(context)) +\r\n                    this.args[1].evaluate(context) * this.args[2].evaluate(context));\r\n            case \"modf\":\r\n                return (this.args[0].evaluate(context) -\r\n                    Math.floor(this.args[0].evaluate(context)));\r\n            case \"pow\":\r\n                return Math.pow(this.args[0].evaluate(context), this.args[1].evaluate(context));\r\n            case \"radians\":\r\n                return (this.args[0].evaluate(context) * Math.PI) / 180;\r\n            case \"round\":\r\n                return Math.round(this.args[0].evaluate(context));\r\n            case \"sign\":\r\n                return Math.sign(this.args[0].evaluate(context));\r\n            case \"sin\":\r\n                return Math.sin(this.args[0].evaluate(context));\r\n            case \"sinh\":\r\n                return Math.sinh(this.args[0].evaluate(context));\r\n            case \"saturate\":\r\n                return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);\r\n            case \"smoothstep\":\r\n                return (this.args[0].evaluate(context) *\r\n                    this.args[0].evaluate(context) *\r\n                    (3 - 2 * this.args[0].evaluate(context)));\r\n            case \"sqrt\":\r\n                return Math.sqrt(this.args[0].evaluate(context));\r\n            case \"step\":\r\n                return this.args[0].evaluate(context) < this.args[1].evaluate(context)\r\n                    ? 0\r\n                    : 1;\r\n            case \"tan\":\r\n                return Math.tan(this.args[0].evaluate(context));\r\n            case \"tanh\":\r\n                return Math.tanh(this.args[0].evaluate(context));\r\n            case \"trunc\":\r\n                return Math.trunc(this.args[0].evaluate(context));\r\n            default:\r\n                throw new Error(\"Non const function: \" + this.name);\r\n        }\r\n    }\r\n    search(callback) {\r\n        for (const node of this.args) {\r\n            node.search(callback);\r\n        }\r\n        callback(this);\r\n    }\r\n}\r\n/**\r\n * @class VariableExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass VariableExpr extends Expression {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n    get astNodeType() {\r\n        return \"varExpr\";\r\n    }\r\n    search(callback) {\r\n        callback(this);\r\n        if (this.postfix) {\r\n            this.postfix.search(callback);\r\n        }\r\n    }\r\n    evaluate(context) {\r\n        const constant = context.constants.get(this.name);\r\n        if (!constant) {\r\n            throw new Error(\"Cannot evaluate node\");\r\n        }\r\n        return constant.evaluate(context);\r\n    }\r\n}\r\n/**\r\n * @class ConstExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass ConstExpr extends Expression {\r\n    constructor(name, initializer) {\r\n        super();\r\n        this.name = name;\r\n        this.initializer = initializer;\r\n    }\r\n    get astNodeType() {\r\n        return \"constExpr\";\r\n    }\r\n    evaluate(context) {\r\n        var _a, _b;\r\n        if (this.initializer instanceof CreateExpr) {\r\n            // This is a struct constant\r\n            const property = (_a = this.postfix) === null || _a === void 0 ? void 0 : _a.evaluateString(context);\r\n            const type = (_b = this.initializer.type) === null || _b === void 0 ? void 0 : _b.name;\r\n            const struct = context.structs.get(type);\r\n            const memberIndex = struct === null || struct === void 0 ? void 0 : struct.getMemberIndex(property);\r\n            if (memberIndex !== undefined && memberIndex != -1) {\r\n                const value = this.initializer.args[memberIndex].evaluate(context);\r\n                return value;\r\n            }\r\n            else {\r\n                return this.initializer.evaluate(context);\r\n            }\r\n        }\r\n        return this.initializer.evaluate(context);\r\n    }\r\n    search(callback) {\r\n        this.initializer.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class LiteralExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass LiteralExpr extends Expression {\r\n    constructor(value) {\r\n        super();\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"literalExpr\";\r\n    }\r\n    evaluate() {\r\n        return this.value;\r\n    }\r\n}\r\n/**\r\n * @class BitcastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass BitcastExpr extends Expression {\r\n    constructor(type, value) {\r\n        super();\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"bitcastExpr\";\r\n    }\r\n    search(callback) {\r\n        this.value.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class TypecastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass TypecastExpr extends Expression {\r\n    constructor(type, args) {\r\n        super();\r\n        this.type = type;\r\n        this.args = args;\r\n    }\r\n    get astNodeType() {\r\n        return \"typecastExpr\";\r\n    }\r\n    evaluate(context) {\r\n        return this.args[0].evaluate(context);\r\n    }\r\n    search(callback) {\r\n        this.searchBlock(this.args, callback);\r\n    }\r\n}\r\n/**\r\n * @class GroupingExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass GroupingExpr extends Expression {\r\n    constructor(contents) {\r\n        super();\r\n        this.contents = contents;\r\n    }\r\n    get astNodeType() {\r\n        return \"groupExpr\";\r\n    }\r\n    evaluate(context) {\r\n        return this.contents[0].evaluate(context);\r\n    }\r\n    search(callback) {\r\n        this.searchBlock(this.contents, callback);\r\n    }\r\n}\r\n/**\r\n * @class ArrayIndex\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass ArrayIndex extends Expression {\r\n    constructor(index) {\r\n        super();\r\n        this.index = index;\r\n    }\r\n    search(callback) {\r\n        this.index.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class Operator\r\n * @extends Expression\r\n * @category AST\r\n */\r\nclass Operator extends Expression {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n/**\r\n * @class UnaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, !, ~\r\n */\r\nclass UnaryOperator extends Operator {\r\n    constructor(operator, right) {\r\n        super();\r\n        this.operator = operator;\r\n        this.right = right;\r\n    }\r\n    get astNodeType() {\r\n        return \"unaryOp\";\r\n    }\r\n    evaluate(context) {\r\n        switch (this.operator) {\r\n            case \"+\":\r\n                return this.right.evaluate(context);\r\n            case \"-\":\r\n                return -this.right.evaluate(context);\r\n            case \"!\":\r\n                return this.right.evaluate(context) ? 0 : 1;\r\n            case \"~\":\r\n                return ~this.right.evaluate(context);\r\n            default:\r\n                throw new Error(\"Unknown unary operator: \" + this.operator);\r\n        }\r\n    }\r\n    search(callback) {\r\n        this.right.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class BinaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\r\n */\r\nclass BinaryOperator extends Operator {\r\n    constructor(operator, left, right) {\r\n        super();\r\n        this.operator = operator;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    get astNodeType() {\r\n        return \"binaryOp\";\r\n    }\r\n    evaluate(context) {\r\n        switch (this.operator) {\r\n            case \"+\":\r\n                return this.left.evaluate(context) + this.right.evaluate(context);\r\n            case \"-\":\r\n                return this.left.evaluate(context) - this.right.evaluate(context);\r\n            case \"*\":\r\n                return this.left.evaluate(context) * this.right.evaluate(context);\r\n            case \"/\":\r\n                return this.left.evaluate(context) / this.right.evaluate(context);\r\n            case \"%\":\r\n                return this.left.evaluate(context) % this.right.evaluate(context);\r\n            case \"==\":\r\n                return this.left.evaluate(context) == this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            case \"!=\":\r\n                return this.left.evaluate(context) != this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            case \"<\":\r\n                return this.left.evaluate(context) < this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            case \">\":\r\n                return this.left.evaluate(context) > this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            case \"<=\":\r\n                return this.left.evaluate(context) <= this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            case \">=\":\r\n                return this.left.evaluate(context) >= this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            case \"&&\":\r\n                return this.left.evaluate(context) && this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            case \"||\":\r\n                return this.left.evaluate(context) || this.right.evaluate(context)\r\n                    ? 1\r\n                    : 0;\r\n            default:\r\n                throw new Error(`Unknown operator ${this.operator}`);\r\n        }\r\n    }\r\n    search(callback) {\r\n        this.left.search(callback);\r\n        this.right.search(callback);\r\n    }\r\n}\r\n/**\r\n * @class SwitchCase\r\n * @extends Node\r\n * @category AST\r\n */\r\nclass SwitchCase extends Node {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n/**\r\n * @class Case\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nclass Case extends SwitchCase {\r\n    constructor(selector, body) {\r\n        super();\r\n        this.selector = selector;\r\n        this.body = body;\r\n    }\r\n    get astNodeType() {\r\n        return \"case\";\r\n    }\r\n    search(callback) {\r\n        this.searchBlock(this.body, callback);\r\n    }\r\n}\r\n/**\r\n * @class Default\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nclass Default extends SwitchCase {\r\n    constructor(body) {\r\n        super();\r\n        this.body = body;\r\n    }\r\n    get astNodeType() {\r\n        return \"default\";\r\n    }\r\n    search(callback) {\r\n        this.searchBlock(this.body, callback);\r\n    }\r\n}\r\n/**\r\n * @class Argument\r\n * @extends Node\r\n * @category AST\r\n */\r\nclass Argument extends Node {\r\n    constructor(name, type, attributes) {\r\n        super();\r\n        this.name = name;\r\n        this.type = type;\r\n        this.attributes = attributes;\r\n    }\r\n    get astNodeType() {\r\n        return \"argument\";\r\n    }\r\n}\r\n/**\r\n * @class ElseIf\r\n * @extends Node\r\n * @category AST\r\n */\r\nclass ElseIf extends Node {\r\n    constructor(condition, body) {\r\n        super();\r\n        this.condition = condition;\r\n        this.body = body;\r\n    }\r\n    get astNodeType() {\r\n        return \"elseif\";\r\n    }\r\n    search(callback) {\r\n        this.condition.search(callback);\r\n        this.searchBlock(this.body, callback);\r\n    }\r\n}\r\n/**\r\n * @class Member\r\n * @extends Node\r\n * @category AST\r\n */\r\nclass Member extends Node {\r\n    constructor(name, type, attributes) {\r\n        super();\r\n        this.name = name;\r\n        this.type = type;\r\n        this.attributes = attributes;\r\n    }\r\n    get astNodeType() {\r\n        return \"member\";\r\n    }\r\n}\r\n/**\r\n * @class Attribute\r\n * @extends Node\r\n * @category AST\r\n */\r\nclass Attribute extends Node {\r\n    constructor(name, value) {\r\n        super();\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n    get astNodeType() {\r\n        return \"attribute\";\r\n    }\r\n}\r\n\r\nvar _a;\r\nvar TokenClass;\r\n(function (TokenClass) {\r\n    TokenClass[TokenClass[\"token\"] = 0] = \"token\";\r\n    TokenClass[TokenClass[\"keyword\"] = 1] = \"keyword\";\r\n    TokenClass[TokenClass[\"reserved\"] = 2] = \"reserved\";\r\n})(TokenClass || (TokenClass = {}));\r\nclass TokenType {\r\n    constructor(name, type, rule) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.rule = rule;\r\n    }\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\n/// Catalog of defined token types, keywords, and reserved words.\r\nclass TokenTypes {\r\n}\r\n_a = TokenTypes;\r\nTokenTypes.none = new TokenType(\"\", TokenClass.reserved, \"\");\r\nTokenTypes.eof = new TokenType(\"EOF\", TokenClass.token, \"\");\r\nTokenTypes.reserved = {\r\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\r\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\r\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\r\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\r\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\r\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\r\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\r\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\r\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\r\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\r\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\r\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\r\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\r\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\r\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\r\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\r\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\r\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\r\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\r\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\r\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\r\n};\r\nTokenTypes.keywords = {\r\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\r\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\r\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\r\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\r\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\r\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\r\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\r\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\r\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\r\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\r\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\r\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\r\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\r\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\r\n    sampler_comparison: new TokenType(\"sampler_comparison\", TokenClass.keyword, \"sampler_comparison\"),\r\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\r\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\r\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\r\n    texture_2d_array: new TokenType(\"texture_2d_array\", TokenClass.keyword, \"texture_2d_array\"),\r\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\r\n    texture_cube: new TokenType(\"texture_cube\", TokenClass.keyword, \"texture_cube\"),\r\n    texture_cube_array: new TokenType(\"texture_cube_array\", TokenClass.keyword, \"texture_cube_array\"),\r\n    texture_multisampled_2d: new TokenType(\"texture_multisampled_2d\", TokenClass.keyword, \"texture_multisampled_2d\"),\r\n    texture_storage_1d: new TokenType(\"texture_storage_1d\", TokenClass.keyword, \"texture_storage_1d\"),\r\n    texture_storage_2d: new TokenType(\"texture_storage_2d\", TokenClass.keyword, \"texture_storage_2d\"),\r\n    texture_storage_2d_array: new TokenType(\"texture_storage_2d_array\", TokenClass.keyword, \"texture_storage_2d_array\"),\r\n    texture_storage_3d: new TokenType(\"texture_storage_3d\", TokenClass.keyword, \"texture_storage_3d\"),\r\n    texture_depth_2d: new TokenType(\"texture_depth_2d\", TokenClass.keyword, \"texture_depth_2d\"),\r\n    texture_depth_2d_array: new TokenType(\"texture_depth_2d_array\", TokenClass.keyword, \"texture_depth_2d_array\"),\r\n    texture_depth_cube: new TokenType(\"texture_depth_cube\", TokenClass.keyword, \"texture_depth_cube\"),\r\n    texture_depth_cube_array: new TokenType(\"texture_depth_cube_array\", TokenClass.keyword, \"texture_depth_cube_array\"),\r\n    texture_depth_multisampled_2d: new TokenType(\"texture_depth_multisampled_2d\", TokenClass.keyword, \"texture_depth_multisampled_2d\"),\r\n    texture_external: new TokenType(\"texture_external\", TokenClass.keyword, \"texture_external\"),\r\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\r\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\r\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\r\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\r\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\r\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\r\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\r\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\r\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\r\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\r\n    diagnostic: new TokenType(\"diagnostic\", TokenClass.keyword, \"diagnostic\"),\r\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\r\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\r\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\r\n    fallthrough: new TokenType(\"fallthrough\", TokenClass.keyword, \"fallthrough\"),\r\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\r\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\r\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\r\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\r\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\r\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\r\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\r\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\r\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\r\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\r\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\r\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\r\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\r\n    requires: new TokenType(\"requires\", TokenClass.keyword, \"requires\"),\r\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\r\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\r\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\r\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\r\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\r\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\r\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\r\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\r\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\r\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\r\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\r\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\r\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\r\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\r\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\r\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\r\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\r\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\r\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\r\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\r\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\r\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\r\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\r\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\r\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\r\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\r\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\r\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\r\n    rgba8unorm_srgb: new TokenType(\"rgba8unorm_srgb\", TokenClass.keyword, \"rgba8unorm_srgb\"),\r\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\r\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\r\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\r\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\r\n    bgra8unorm_srgb: new TokenType(\"bgra8unorm_srgb\", TokenClass.keyword, \"bgra8unorm_srgb\"),\r\n    rgb10a2unorm: new TokenType(\"rgb10a2unorm\", TokenClass.keyword, \"rgb10a2unorm\"),\r\n    rg11b10float: new TokenType(\"rg11b10float\", TokenClass.keyword, \"rg11b10float\"),\r\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\r\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\r\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\r\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\r\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\r\n    rgba16float: new TokenType(\"rgba16float\", TokenClass.keyword, \"rgba16float\"),\r\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\r\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\r\n    rgba32float: new TokenType(\"rgba32float\", TokenClass.keyword, \"rgba32float\"),\r\n    static_assert: new TokenType(\"static_assert\", TokenClass.keyword, \"static_assert\"),\r\n    // WGSL grammar has a few keywords that have different token names than the strings they\r\n    // represent. Aliasing them here.\r\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\r\n};\r\nTokenTypes.tokens = {\r\n    decimal_float_literal: new TokenType(\"decimal_float_literal\", TokenClass.token, /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)|(-?[0-9]+f)/),\r\n    hex_float_literal: new TokenType(\"hex_float_literal\", TokenClass.token, /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/),\r\n    int_literal: new TokenType(\"int_literal\", TokenClass.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),\r\n    uint_literal: new TokenType(\"uint_literal\", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),\r\n    ident: new TokenType(\"ident\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\r\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\r\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\r\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\r\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\r\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\r\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\r\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\r\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\r\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\r\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\r\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\r\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\r\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\r\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\r\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\r\n    greater_than_equal: new TokenType(\"greater_than_equal\", TokenClass.token, \">=\"),\r\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\r\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\r\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\r\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\r\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\r\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\r\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\r\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\r\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\r\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\r\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\r\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\r\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\r\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\r\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\r\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\r\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\r\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\r\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\r\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\r\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\r\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\r\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\r\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\r\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\r\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\r\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\r\n    shift_right_equal: new TokenType(\"shift_right_equal\", TokenClass.token, \">>=\"),\r\n    shift_left_equal: new TokenType(\"shift_left_equal\", TokenClass.token, \"<<=\"),\r\n};\r\nTokenTypes.simpleTokens = {\r\n    \"@\": _a.tokens.attr,\r\n    \"{\": _a.tokens.brace_left,\r\n    \"}\": _a.tokens.brace_right,\r\n    \":\": _a.tokens.colon,\r\n    \",\": _a.tokens.comma,\r\n    \"(\": _a.tokens.paren_left,\r\n    \")\": _a.tokens.paren_right,\r\n    \";\": _a.tokens.semicolon,\r\n};\r\nTokenTypes.literalTokens = {\r\n    \"&\": _a.tokens.and,\r\n    \"&&\": _a.tokens.and_and,\r\n    \"->\": _a.tokens.arrow,\r\n    \"/\": _a.tokens.forward_slash,\r\n    \"!\": _a.tokens.bang,\r\n    \"[\": _a.tokens.bracket_left,\r\n    \"]\": _a.tokens.bracket_right,\r\n    \"=\": _a.tokens.equal,\r\n    \"==\": _a.tokens.equal_equal,\r\n    \"!=\": _a.tokens.not_equal,\r\n    \">\": _a.tokens.greater_than,\r\n    \">=\": _a.tokens.greater_than_equal,\r\n    \">>\": _a.tokens.shift_right,\r\n    \"<\": _a.tokens.less_than,\r\n    \"<=\": _a.tokens.less_than_equal,\r\n    \"<<\": _a.tokens.shift_left,\r\n    \"%\": _a.tokens.modulo,\r\n    \"-\": _a.tokens.minus,\r\n    \"--\": _a.tokens.minus_minus,\r\n    \".\": _a.tokens.period,\r\n    \"+\": _a.tokens.plus,\r\n    \"++\": _a.tokens.plus_plus,\r\n    \"|\": _a.tokens.or,\r\n    \"||\": _a.tokens.or_or,\r\n    \"*\": _a.tokens.star,\r\n    \"~\": _a.tokens.tilde,\r\n    \"_\": _a.tokens.underscore,\r\n    \"^\": _a.tokens.xor,\r\n    \"+=\": _a.tokens.plus_equal,\r\n    \"-=\": _a.tokens.minus_equal,\r\n    \"*=\": _a.tokens.times_equal,\r\n    \"/=\": _a.tokens.division_equal,\r\n    \"%=\": _a.tokens.modulo_equal,\r\n    \"&=\": _a.tokens.and_equal,\r\n    \"|=\": _a.tokens.or_equal,\r\n    \"^=\": _a.tokens.xor_equal,\r\n    \">>=\": _a.tokens.shift_right_equal,\r\n    \"<<=\": _a.tokens.shift_left_equal,\r\n};\r\nTokenTypes.regexTokens = {\r\n    decimal_float_literal: _a.tokens.decimal_float_literal,\r\n    hex_float_literal: _a.tokens.hex_float_literal,\r\n    int_literal: _a.tokens.int_literal,\r\n    uint_literal: _a.tokens.uint_literal,\r\n    ident: _a.tokens.ident,\r\n};\r\nTokenTypes.storage_class = [\r\n    _a.keywords.function,\r\n    _a.keywords.private,\r\n    _a.keywords.workgroup,\r\n    _a.keywords.uniform,\r\n    _a.keywords.storage,\r\n];\r\nTokenTypes.access_mode = [\r\n    _a.keywords.read,\r\n    _a.keywords.write,\r\n    _a.keywords.read_write,\r\n];\r\nTokenTypes.sampler_type = [\r\n    _a.keywords.sampler,\r\n    _a.keywords.sampler_comparison,\r\n];\r\nTokenTypes.sampled_texture_type = [\r\n    _a.keywords.texture_1d,\r\n    _a.keywords.texture_2d,\r\n    _a.keywords.texture_2d_array,\r\n    _a.keywords.texture_3d,\r\n    _a.keywords.texture_cube,\r\n    _a.keywords.texture_cube_array,\r\n];\r\nTokenTypes.multisampled_texture_type = [\r\n    _a.keywords.texture_multisampled_2d,\r\n];\r\nTokenTypes.storage_texture_type = [\r\n    _a.keywords.texture_storage_1d,\r\n    _a.keywords.texture_storage_2d,\r\n    _a.keywords.texture_storage_2d_array,\r\n    _a.keywords.texture_storage_3d,\r\n];\r\nTokenTypes.depth_texture_type = [\r\n    _a.keywords.texture_depth_2d,\r\n    _a.keywords.texture_depth_2d_array,\r\n    _a.keywords.texture_depth_cube,\r\n    _a.keywords.texture_depth_cube_array,\r\n    _a.keywords.texture_depth_multisampled_2d,\r\n];\r\nTokenTypes.texture_external_type = [_a.keywords.texture_external];\r\nTokenTypes.any_texture_type = [\r\n    ..._a.sampled_texture_type,\r\n    ..._a.multisampled_texture_type,\r\n    ..._a.storage_texture_type,\r\n    ..._a.depth_texture_type,\r\n    ..._a.texture_external_type,\r\n];\r\nTokenTypes.texel_format = [\r\n    _a.keywords.r8unorm,\r\n    _a.keywords.r8snorm,\r\n    _a.keywords.r8uint,\r\n    _a.keywords.r8sint,\r\n    _a.keywords.r16uint,\r\n    _a.keywords.r16sint,\r\n    _a.keywords.r16float,\r\n    _a.keywords.rg8unorm,\r\n    _a.keywords.rg8snorm,\r\n    _a.keywords.rg8uint,\r\n    _a.keywords.rg8sint,\r\n    _a.keywords.r32uint,\r\n    _a.keywords.r32sint,\r\n    _a.keywords.r32float,\r\n    _a.keywords.rg16uint,\r\n    _a.keywords.rg16sint,\r\n    _a.keywords.rg16float,\r\n    _a.keywords.rgba8unorm,\r\n    _a.keywords.rgba8unorm_srgb,\r\n    _a.keywords.rgba8snorm,\r\n    _a.keywords.rgba8uint,\r\n    _a.keywords.rgba8sint,\r\n    _a.keywords.bgra8unorm,\r\n    _a.keywords.bgra8unorm_srgb,\r\n    _a.keywords.rgb10a2unorm,\r\n    _a.keywords.rg11b10float,\r\n    _a.keywords.rg32uint,\r\n    _a.keywords.rg32sint,\r\n    _a.keywords.rg32float,\r\n    _a.keywords.rgba16uint,\r\n    _a.keywords.rgba16sint,\r\n    _a.keywords.rgba16float,\r\n    _a.keywords.rgba32uint,\r\n    _a.keywords.rgba32sint,\r\n    _a.keywords.rgba32float,\r\n];\r\nTokenTypes.const_literal = [\r\n    _a.tokens.int_literal,\r\n    _a.tokens.uint_literal,\r\n    _a.tokens.decimal_float_literal,\r\n    _a.tokens.hex_float_literal,\r\n    _a.keywords.true,\r\n    _a.keywords.false,\r\n];\r\nTokenTypes.literal_or_ident = [\r\n    _a.tokens.ident,\r\n    _a.tokens.int_literal,\r\n    _a.tokens.uint_literal,\r\n    _a.tokens.decimal_float_literal,\r\n    _a.tokens.hex_float_literal,\r\n];\r\nTokenTypes.element_count_expression = [\r\n    _a.tokens.int_literal,\r\n    _a.tokens.uint_literal,\r\n    _a.tokens.ident,\r\n];\r\nTokenTypes.template_types = [\r\n    _a.keywords.vec2,\r\n    _a.keywords.vec3,\r\n    _a.keywords.vec4,\r\n    _a.keywords.mat2x2,\r\n    _a.keywords.mat2x3,\r\n    _a.keywords.mat2x4,\r\n    _a.keywords.mat3x2,\r\n    _a.keywords.mat3x3,\r\n    _a.keywords.mat3x4,\r\n    _a.keywords.mat4x2,\r\n    _a.keywords.mat4x3,\r\n    _a.keywords.mat4x4,\r\n    _a.keywords.atomic,\r\n    _a.keywords.bitcast,\r\n    ..._a.any_texture_type,\r\n];\r\n// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\r\n// The attribute grammar should be ident | block.\r\nTokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block, _a.keywords.diagnostic];\r\nTokenTypes.assignment_operators = [\r\n    _a.tokens.equal,\r\n    _a.tokens.plus_equal,\r\n    _a.tokens.minus_equal,\r\n    _a.tokens.times_equal,\r\n    _a.tokens.division_equal,\r\n    _a.tokens.modulo_equal,\r\n    _a.tokens.and_equal,\r\n    _a.tokens.or_equal,\r\n    _a.tokens.xor_equal,\r\n    _a.tokens.shift_right_equal,\r\n    _a.tokens.shift_left_equal,\r\n];\r\nTokenTypes.increment_operators = [\r\n    _a.tokens.plus_plus,\r\n    _a.tokens.minus_minus,\r\n];\r\n/// A token parsed by the WgslScanner.\r\nclass Token {\r\n    constructor(type, lexeme, line) {\r\n        this.type = type;\r\n        this.lexeme = lexeme;\r\n        this.line = line;\r\n    }\r\n    toString() {\r\n        return this.lexeme;\r\n    }\r\n    isTemplateType() {\r\n        return TokenTypes.template_types.indexOf(this.type) != -1;\r\n    }\r\n    isArrayType() {\r\n        return this.type == TokenTypes.keywords.array;\r\n    }\r\n    isArrayOrTemplateType() {\r\n        return this.isArrayType() || this.isTemplateType();\r\n    }\r\n}\r\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\r\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\r\nclass WgslScanner {\r\n    constructor(source) {\r\n        this._tokens = [];\r\n        this._start = 0;\r\n        this._current = 0;\r\n        this._line = 1;\r\n        this._source = source !== null && source !== void 0 ? source : \"\";\r\n    }\r\n    /// Scan all tokens from the source.\r\n    scanTokens() {\r\n        while (!this._isAtEnd()) {\r\n            this._start = this._current;\r\n            if (!this.scanToken()) {\r\n                throw `Invalid syntax at line ${this._line}`;\r\n            }\r\n        }\r\n        this._tokens.push(new Token(TokenTypes.eof, \"\", this._line));\r\n        return this._tokens;\r\n    }\r\n    /// Scan a single token from the source.\r\n    scanToken() {\r\n        // Find the longest consecutive set of characters that match a rule.\r\n        let lexeme = this._advance();\r\n        // Skip line-feed, adding to the line counter.\r\n        if (lexeme == \"\\n\") {\r\n            this._line++;\r\n            return true;\r\n        }\r\n        // Skip whitespace\r\n        if (this._isWhitespace(lexeme)) {\r\n            return true;\r\n        }\r\n        if (lexeme == \"/\") {\r\n            // If it's a // comment, skip everything until the next line-feed.\r\n            if (this._peekAhead() == \"/\") {\r\n                while (lexeme != \"\\n\") {\r\n                    if (this._isAtEnd()) {\r\n                        return true;\r\n                    }\r\n                    lexeme = this._advance();\r\n                }\r\n                // skip the linefeed\r\n                this._line++;\r\n                return true;\r\n            }\r\n            else if (this._peekAhead() == \"*\") {\r\n                // If it's a / * block comment, skip everything until the matching * /,\r\n                // allowing for nested block comments.\r\n                this._advance();\r\n                let commentLevel = 1;\r\n                while (commentLevel > 0) {\r\n                    if (this._isAtEnd()) {\r\n                        return true;\r\n                    }\r\n                    lexeme = this._advance();\r\n                    if (lexeme == \"\\n\") {\r\n                        this._line++;\r\n                    }\r\n                    else if (lexeme == \"*\") {\r\n                        if (this._peekAhead() == \"/\") {\r\n                            this._advance();\r\n                            commentLevel--;\r\n                            if (commentLevel == 0) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (lexeme == \"/\") {\r\n                        if (this._peekAhead() == \"*\") {\r\n                            this._advance();\r\n                            commentLevel++;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        // Shortcut single character tokens\r\n        const simpleToken = TokenTypes.simpleTokens[lexeme];\r\n        if (simpleToken) {\r\n            this._addToken(simpleToken);\r\n            return true;\r\n        }\r\n        // Shortcut keywords and identifiers\r\n        let matchType = TokenTypes.none;\r\n        const isAlpha = this._isAlpha(lexeme);\r\n        const isUnderscore = lexeme === \"_\";\r\n        if (this._isAlphaNumeric(lexeme)) {\r\n            let nextChar = this._peekAhead();\r\n            while (this._isAlphaNumeric(nextChar)) {\r\n                lexeme += this._advance();\r\n                nextChar = this._peekAhead();\r\n            }\r\n        }\r\n        if (isAlpha) {\r\n            const matchedType = TokenTypes.keywords[lexeme];\r\n            if (matchedType) {\r\n                this._addToken(matchedType);\r\n                return true;\r\n            }\r\n        }\r\n        if (isAlpha || isUnderscore) {\r\n            this._addToken(TokenTypes.tokens.ident);\r\n            return true;\r\n        }\r\n        // Scan for the next valid token type\r\n        for (;;) {\r\n            let matchedType = this._findType(lexeme);\r\n            // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\r\n            // shift_right.\r\n            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\r\n            // and one to close the array).\r\n            // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\r\n            // it's a greather_than and an equal, not a greater_than_equal.\r\n            // Another ambiguity is '-'. In the case of a-2, it's a minus; in the case of a*-2, it's a -2;\r\n            // in the case of foo()->int, it's a ->; in the case of foo-- or --foo, it's a -- decrement.\r\n            // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\r\n            // are predicated on it the > either closing a template, or being part of an operator.\r\n            // The solution here is to check if there was a less_than up to some number of tokens\r\n            // previously, and the token prior to that is a keyword that requires a '<', then it will be\r\n            // split into two operators; otherwise it's a single operator.\r\n            const nextLexeme = this._peekAhead();\r\n            if (lexeme == \"-\" && this._tokens.length > 0) {\r\n                if (nextLexeme == \"=\") {\r\n                    this._current++;\r\n                    lexeme += nextLexeme;\r\n                    this._addToken(TokenTypes.tokens.minus_equal);\r\n                    return true;\r\n                }\r\n                if (nextLexeme == \"-\") {\r\n                    this._current++;\r\n                    lexeme += nextLexeme;\r\n                    this._addToken(TokenTypes.tokens.minus_minus);\r\n                    return true;\r\n                }\r\n                const ti = this._tokens.length - 1;\r\n                const isIdentOrLiteral = TokenTypes.literal_or_ident.indexOf(this._tokens[ti].type) != -1;\r\n                if ((isIdentOrLiteral || this._tokens[ti].type == TokenTypes.tokens.paren_right) && nextLexeme != \">\") {\r\n                    this._addToken(matchedType);\r\n                    return true;\r\n                }\r\n            }\r\n            if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\r\n                let foundLessThan = false;\r\n                let ti = this._tokens.length - 1;\r\n                for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\r\n                    if (TokenTypes.assignment_operators.indexOf(this._tokens[ti].type) !== -1) {\r\n                        break;\r\n                    }\r\n                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\r\n                        if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\r\n                            foundLessThan = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                // If there was a less_than in the recent token history, then this is probably a\r\n                // greater_than.\r\n                if (foundLessThan) {\r\n                    this._addToken(matchedType);\r\n                    return true;\r\n                }\r\n            }\r\n            // The current lexeme may not match any rule, but some token types may be invalid for\r\n            // part of the string but valid after a few more characters.\r\n            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\r\n            // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\r\n            // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\r\n            // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\r\n            // hex_float_literal. So that means if we hit an non-matching string, we should look\r\n            // ahead up to two characters to see if the string starts matching a valid rule again.\r\n            if (matchedType === TokenTypes.none) {\r\n                let lookAheadLexeme = lexeme;\r\n                let lookAhead = 0;\r\n                const maxLookAhead = 2;\r\n                for (let li = 0; li < maxLookAhead; ++li) {\r\n                    lookAheadLexeme += this._peekAhead(li);\r\n                    matchedType = this._findType(lookAheadLexeme);\r\n                    if (matchedType !== TokenTypes.none) {\r\n                        lookAhead = li;\r\n                        break;\r\n                    }\r\n                }\r\n                if (matchedType === TokenTypes.none) {\r\n                    if (matchType === TokenTypes.none) {\r\n                        return false;\r\n                    }\r\n                    this._current--;\r\n                    this._addToken(matchType);\r\n                    return true;\r\n                }\r\n                lexeme = lookAheadLexeme;\r\n                this._current += lookAhead + 1;\r\n            }\r\n            matchType = matchedType;\r\n            if (this._isAtEnd()) {\r\n                break;\r\n            }\r\n            lexeme += this._advance();\r\n        }\r\n        // We got to the end of the input stream. Then the token we've ready so far is it.\r\n        if (matchType === TokenTypes.none) {\r\n            return false;\r\n        }\r\n        this._addToken(matchType);\r\n        return true;\r\n    }\r\n    _findType(lexeme) {\r\n        for (const name in TokenTypes.regexTokens) {\r\n            const type = TokenTypes.regexTokens[name];\r\n            if (this._match(lexeme, type.rule)) {\r\n                return type;\r\n            }\r\n        }\r\n        const type = TokenTypes.literalTokens[lexeme];\r\n        if (type) {\r\n            return type;\r\n        }\r\n        return TokenTypes.none;\r\n    }\r\n    _match(lexeme, rule) {\r\n        const match = rule.exec(lexeme);\r\n        return match && match.index == 0 && match[0] == lexeme;\r\n    }\r\n    _isAtEnd() {\r\n        return this._current >= this._source.length;\r\n    }\r\n    _isAlpha(c) {\r\n        return (c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\");\r\n    }\r\n    _isAlphaNumeric(c) {\r\n        return (c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\") || c == \"_\" || (c >= \"0\" && c <= \"9\");\r\n    }\r\n    _isWhitespace(c) {\r\n        return c == \" \" || c == \"\\t\" || c == \"\\r\";\r\n    }\r\n    _advance(amount = 0) {\r\n        let c = this._source[this._current];\r\n        amount = amount || 0;\r\n        amount++;\r\n        this._current += amount;\r\n        return c;\r\n    }\r\n    _peekAhead(offset = 0) {\r\n        offset = offset || 0;\r\n        if (this._current + offset >= this._source.length) {\r\n            return \"\\0\";\r\n        }\r\n        return this._source[this._current + offset];\r\n    }\r\n    _addToken(type) {\r\n        const text = this._source.substring(this._start, this._current);\r\n        this._tokens.push(new Token(type, text, this._line));\r\n    }\r\n}\r\n\r\n/**\r\n * @author Brendan Duncan / https://github.com/brendan-duncan\r\n */\r\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\r\nclass WgslParser {\r\n    constructor() {\r\n        this._tokens = [];\r\n        this._current = 0;\r\n        this._currentLine = 0;\r\n        this._context = new ParseContext();\r\n        this._deferArrayCountEval = [];\r\n    }\r\n    parse(tokensOrCode) {\r\n        this._initialize(tokensOrCode);\r\n        this._deferArrayCountEval.length = 0;\r\n        const statements = [];\r\n        while (!this._isAtEnd()) {\r\n            const statement = this._global_decl_or_directive();\r\n            if (!statement) {\r\n                break;\r\n            }\r\n            statements.push(statement);\r\n        }\r\n        // Since constants can be declared after they are used, and\r\n        // constants can be used to size arrays, defer calculating the\r\n        // size until after the shader has finished parsing.\r\n        if (this._deferArrayCountEval.length > 0) {\r\n            for (const arrayDecl of this._deferArrayCountEval) {\r\n                const arrayType = arrayDecl[\"arrayType\"];\r\n                const countNode = arrayDecl[\"countNode\"];\r\n                if (countNode instanceof VariableExpr) {\r\n                    const variable = countNode;\r\n                    const name = variable.name;\r\n                    const constant = this._context.constants.get(name);\r\n                    if (constant) {\r\n                        try {\r\n                            const count = constant.evaluate(this._context);\r\n                            arrayType.count = count;\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this._deferArrayCountEval.length = 0;\r\n        }\r\n        return statements;\r\n    }\r\n    _initialize(tokensOrCode) {\r\n        if (tokensOrCode) {\r\n            if (typeof tokensOrCode == \"string\") {\r\n                const scanner = new WgslScanner(tokensOrCode);\r\n                this._tokens = scanner.scanTokens();\r\n            }\r\n            else {\r\n                this._tokens = tokensOrCode;\r\n            }\r\n        }\r\n        else {\r\n            this._tokens = [];\r\n        }\r\n        this._current = 0;\r\n    }\r\n    _error(token, message) {\r\n        return {\r\n            token,\r\n            message,\r\n            toString: function () {\r\n                return `${message}`;\r\n            },\r\n        };\r\n    }\r\n    _isAtEnd() {\r\n        return (this._current >= this._tokens.length ||\r\n            this._peek().type == TokenTypes.eof);\r\n    }\r\n    _match(types) {\r\n        if (types instanceof TokenType) {\r\n            if (this._check(types)) {\r\n                this._advance();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        for (let i = 0, l = types.length; i < l; ++i) {\r\n            const type = types[i];\r\n            if (this._check(type)) {\r\n                this._advance();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    _consume(types, message) {\r\n        if (this._check(types)) {\r\n            return this._advance();\r\n        }\r\n        throw this._error(this._peek(), message);\r\n    }\r\n    _check(types) {\r\n        if (this._isAtEnd()) {\r\n            return false;\r\n        }\r\n        const tk = this._peek();\r\n        if (types instanceof Array) {\r\n            const t = tk.type;\r\n            const index = types.indexOf(t);\r\n            return index != -1;\r\n        }\r\n        return tk.type == types;\r\n    }\r\n    _advance() {\r\n        var _a, _b;\r\n        this._currentLine = (_b = (_a = this._peek()) === null || _a === void 0 ? void 0 : _a.line) !== null && _b !== void 0 ? _b : -1;\r\n        if (!this._isAtEnd()) {\r\n            this._current++;\r\n        }\r\n        return this._previous();\r\n    }\r\n    _peek() {\r\n        return this._tokens[this._current];\r\n    }\r\n    _previous() {\r\n        return this._tokens[this._current - 1];\r\n    }\r\n    _global_decl_or_directive() {\r\n        // semicolon\r\n        // global_variable_decl semicolon\r\n        // global_constant_decl semicolon\r\n        // type_alias semicolon\r\n        // struct_decl\r\n        // function_decl\r\n        // enable_directive\r\n        // Ignore any stand-alone semicolons\r\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\r\n            ;\r\n        if (this._match(TokenTypes.keywords.alias)) {\r\n            const type = this._type_alias();\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n            return type;\r\n        }\r\n        if (this._match(TokenTypes.keywords.diagnostic)) {\r\n            const directive = this._diagnostic();\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n            return directive;\r\n        }\r\n        if (this._match(TokenTypes.keywords.requires)) {\r\n            const requires = this._requires_directive();\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n            return requires;\r\n        }\r\n        if (this._match(TokenTypes.keywords.enable)) {\r\n            const enable = this._enable_directive();\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n            return enable;\r\n        }\r\n        // The following statements have an optional attribute*\r\n        const attrs = this._attribute();\r\n        if (this._check(TokenTypes.keywords.var)) {\r\n            const _var = this._global_variable_decl();\r\n            if (_var != null) {\r\n                _var.attributes = attrs;\r\n            }\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n            return _var;\r\n        }\r\n        if (this._check(TokenTypes.keywords.override)) {\r\n            const _override = this._override_variable_decl();\r\n            if (_override != null) {\r\n                _override.attributes = attrs;\r\n            }\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n            return _override;\r\n        }\r\n        if (this._check(TokenTypes.keywords.let)) {\r\n            const _let = this._global_let_decl();\r\n            if (_let != null) {\r\n                _let.attributes = attrs;\r\n            }\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n            return _let;\r\n        }\r\n        if (this._check(TokenTypes.keywords.const)) {\r\n            const _const = this._global_const_decl();\r\n            if (_const != null) {\r\n                _const.attributes = attrs;\r\n            }\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n            return _const;\r\n        }\r\n        if (this._check(TokenTypes.keywords.struct)) {\r\n            const _struct = this._struct_decl();\r\n            if (_struct != null) {\r\n                _struct.attributes = attrs;\r\n            }\r\n            return _struct;\r\n        }\r\n        if (this._check(TokenTypes.keywords.fn)) {\r\n            const _fn = this._function_decl();\r\n            if (_fn != null) {\r\n                _fn.attributes = attrs;\r\n            }\r\n            return _fn;\r\n        }\r\n        return null;\r\n    }\r\n    _function_decl() {\r\n        // attribute* function_header compound_statement\r\n        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\r\n        if (!this._match(TokenTypes.keywords.fn)) {\r\n            return null;\r\n        }\r\n        const startLine = this._currentLine;\r\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\").toString();\r\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '(' for function arguments.\");\r\n        const args = [];\r\n        if (!this._check(TokenTypes.tokens.paren_right)) {\r\n            do {\r\n                if (this._check(TokenTypes.tokens.paren_right)) {\r\n                    break;\r\n                }\r\n                const argAttrs = this._attribute();\r\n                const name = this._consume(TokenTypes.tokens.ident, \"Expected argument name.\").toString();\r\n                this._consume(TokenTypes.tokens.colon, \"Expected ':' for argument type.\");\r\n                const typeAttrs = this._attribute();\r\n                const type = this._type_decl();\r\n                if (type != null) {\r\n                    type.attributes = typeAttrs;\r\n                    args.push(new Argument(name, type, argAttrs));\r\n                }\r\n            } while (this._match(TokenTypes.tokens.comma));\r\n        }\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' after function arguments.\");\r\n        let _return = null;\r\n        if (this._match(TokenTypes.tokens.arrow)) {\r\n            const attrs = this._attribute();\r\n            _return = this._type_decl();\r\n            if (_return != null) {\r\n                _return.attributes = attrs;\r\n            }\r\n        }\r\n        const body = this._compound_statement();\r\n        const endLine = this._currentLine;\r\n        return new Function(name, args, _return, body, startLine, endLine);\r\n    }\r\n    _compound_statement() {\r\n        // brace_left statement* brace_right\r\n        const statements = [];\r\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\r\n        while (!this._check(TokenTypes.tokens.brace_right)) {\r\n            const statement = this._statement();\r\n            if (statement !== null) {\r\n                statements.push(statement);\r\n            }\r\n        }\r\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\r\n        return statements;\r\n    }\r\n    _statement() {\r\n        // semicolon\r\n        // return_statement semicolon\r\n        // if_statement\r\n        // switch_statement\r\n        // loop_statement\r\n        // for_statement\r\n        // func_call_statement semicolon\r\n        // variable_statement semicolon\r\n        // break_statement semicolon\r\n        // continue_statement semicolon\r\n        // continuing_statement compound_statement\r\n        // discard semicolon\r\n        // assignment_statement semicolon\r\n        // compound_statement\r\n        // increment_statement semicolon\r\n        // decrement_statement semicolon\r\n        // static_assert_statement semicolon\r\n        // Ignore any stand-alone semicolons\r\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\r\n            ;\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n            this._attribute();\r\n        }\r\n        if (this._check(TokenTypes.keywords.if)) {\r\n            return this._if_statement();\r\n        }\r\n        if (this._check(TokenTypes.keywords.switch)) {\r\n            return this._switch_statement();\r\n        }\r\n        if (this._check(TokenTypes.keywords.loop)) {\r\n            return this._loop_statement();\r\n        }\r\n        if (this._check(TokenTypes.keywords.for)) {\r\n            return this._for_statement();\r\n        }\r\n        if (this._check(TokenTypes.keywords.while)) {\r\n            return this._while_statement();\r\n        }\r\n        if (this._check(TokenTypes.keywords.continuing)) {\r\n            return this._continuing_statement();\r\n        }\r\n        if (this._check(TokenTypes.keywords.static_assert)) {\r\n            return this._static_assert_statement();\r\n        }\r\n        if (this._check(TokenTypes.tokens.brace_left)) {\r\n            return this._compound_statement();\r\n        }\r\n        let result = null;\r\n        if (this._check(TokenTypes.keywords.return)) {\r\n            result = this._return_statement();\r\n        }\r\n        else if (this._check([\r\n            TokenTypes.keywords.var,\r\n            TokenTypes.keywords.let,\r\n            TokenTypes.keywords.const,\r\n        ])) {\r\n            result = this._variable_statement();\r\n        }\r\n        else if (this._match(TokenTypes.keywords.discard)) {\r\n            result = new Discard();\r\n        }\r\n        else if (this._match(TokenTypes.keywords.break)) {\r\n            result = new Break();\r\n        }\r\n        else if (this._match(TokenTypes.keywords.continue)) {\r\n            result = new Continue();\r\n        }\r\n        else {\r\n            result =\r\n                this._increment_decrement_statement() ||\r\n                    this._func_call_statement() ||\r\n                    this._assignment_statement();\r\n        }\r\n        if (result != null) {\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';' after statement.\");\r\n        }\r\n        return result;\r\n    }\r\n    _static_assert_statement() {\r\n        if (!this._match(TokenTypes.keywords.static_assert)) {\r\n            return null;\r\n        }\r\n        const expression = this._optional_paren_expression();\r\n        return new StaticAssert(expression);\r\n    }\r\n    _while_statement() {\r\n        if (!this._match(TokenTypes.keywords.while)) {\r\n            return null;\r\n        }\r\n        const condition = this._optional_paren_expression();\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n            this._attribute();\r\n        }\r\n        const block = this._compound_statement();\r\n        return new While(condition, block);\r\n    }\r\n    _continuing_statement() {\r\n        if (!this._match(TokenTypes.keywords.continuing)) {\r\n            return null;\r\n        }\r\n        const block = this._compound_statement();\r\n        return new Continuing(block);\r\n    }\r\n    _for_statement() {\r\n        // for paren_left for_header paren_right compound_statement\r\n        if (!this._match(TokenTypes.keywords.for)) {\r\n            return null;\r\n        }\r\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\r\n        const init = !this._check(TokenTypes.tokens.semicolon)\r\n            ? this._for_init()\r\n            : null;\r\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n        const condition = !this._check(TokenTypes.tokens.semicolon)\r\n            ? this._short_circuit_or_expression()\r\n            : null;\r\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n        const increment = !this._check(TokenTypes.tokens.paren_right)\r\n            ? this._for_increment()\r\n            : null;\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n            this._attribute();\r\n        }\r\n        const body = this._compound_statement();\r\n        return new For(init, condition, increment, body);\r\n    }\r\n    _for_init() {\r\n        // (variable_statement assignment_statement func_call_statement)?\r\n        return (this._variable_statement() ||\r\n            this._func_call_statement() ||\r\n            this._assignment_statement());\r\n    }\r\n    _for_increment() {\r\n        // (assignment_statement func_call_statement increment_statement)?\r\n        return (this._func_call_statement() ||\r\n            this._increment_decrement_statement() ||\r\n            this._assignment_statement());\r\n    }\r\n    _variable_statement() {\r\n        // variable_decl\r\n        // variable_decl equal short_circuit_or_expression\r\n        // let (ident variable_ident_decl) equal short_circuit_or_expression\r\n        // const (ident variable_ident_decl) equal short_circuit_or_expression\r\n        if (this._check(TokenTypes.keywords.var)) {\r\n            const _var = this._variable_decl();\r\n            if (_var === null) {\r\n                throw this._error(this._peek(), \"Variable declaration expected.\");\r\n            }\r\n            let value = null;\r\n            if (this._match(TokenTypes.tokens.equal)) {\r\n                value = this._short_circuit_or_expression();\r\n            }\r\n            return new Var(_var.name, _var.type, _var.storage, _var.access, value);\r\n        }\r\n        if (this._match(TokenTypes.keywords.let)) {\r\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for let.\").toString();\r\n            let type = null;\r\n            if (this._match(TokenTypes.tokens.colon)) {\r\n                const typeAttrs = this._attribute();\r\n                type = this._type_decl();\r\n                if (type != null) {\r\n                    type.attributes = typeAttrs;\r\n                }\r\n            }\r\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\r\n            const value = this._short_circuit_or_expression();\r\n            return new Let(name, type, null, null, value);\r\n        }\r\n        if (this._match(TokenTypes.keywords.const)) {\r\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for const.\").toString();\r\n            let type = null;\r\n            if (this._match(TokenTypes.tokens.colon)) {\r\n                const typeAttrs = this._attribute();\r\n                type = this._type_decl();\r\n                if (type != null) {\r\n                    type.attributes = typeAttrs;\r\n                }\r\n            }\r\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\r\n            const value = this._short_circuit_or_expression();\r\n            return new Const(name, type, null, null, value);\r\n        }\r\n        return null;\r\n    }\r\n    _increment_decrement_statement() {\r\n        const savedPos = this._current;\r\n        const _var = this._unary_expression();\r\n        if (_var == null) {\r\n            return null;\r\n        }\r\n        if (!this._check(TokenTypes.increment_operators)) {\r\n            this._current = savedPos;\r\n            return null;\r\n        }\r\n        const token = this._consume(TokenTypes.increment_operators, \"Expected increment operator\");\r\n        return new Increment(token.type === TokenTypes.tokens.plus_plus\r\n            ? IncrementOperator.increment\r\n            : IncrementOperator.decrement, _var);\r\n    }\r\n    _assignment_statement() {\r\n        // (unary_expression underscore) equal short_circuit_or_expression\r\n        let _var = null;\r\n        if (this._check(TokenTypes.tokens.brace_right)) {\r\n            return null;\r\n        }\r\n        let isUnderscore = this._match(TokenTypes.tokens.underscore);\r\n        if (!isUnderscore) {\r\n            _var = this._unary_expression();\r\n        }\r\n        if (!isUnderscore && _var == null) {\r\n            return null;\r\n        }\r\n        const type = this._consume(TokenTypes.assignment_operators, \"Expected assignment operator.\");\r\n        const value = this._short_circuit_or_expression();\r\n        return new Assign(AssignOperator.parse(type.lexeme), _var, value);\r\n    }\r\n    _func_call_statement() {\r\n        // ident argument_expression_list\r\n        if (!this._check(TokenTypes.tokens.ident)) {\r\n            return null;\r\n        }\r\n        const savedPos = this._current;\r\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\");\r\n        const args = this._argument_expression_list();\r\n        if (args === null) {\r\n            this._current = savedPos;\r\n            return null;\r\n        }\r\n        return new Call(name.lexeme, args);\r\n    }\r\n    _loop_statement() {\r\n        // loop brace_left statement* continuing_statement? brace_right\r\n        if (!this._match(TokenTypes.keywords.loop)) {\r\n            return null;\r\n        }\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n            this._attribute();\r\n        }\r\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\r\n        // statement*\r\n        const statements = [];\r\n        let statement = this._statement();\r\n        while (statement !== null) {\r\n            if (Array.isArray(statement)) {\r\n                for (let s of statement) {\r\n                    statements.push(s);\r\n                }\r\n            }\r\n            else {\r\n                statements.push(statement);\r\n            }\r\n            statement = this._statement();\r\n        }\r\n        // continuing_statement: continuing compound_statement\r\n        let continuing = null;\r\n        if (this._match(TokenTypes.keywords.continuing)) {\r\n            continuing = this._compound_statement();\r\n        }\r\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\r\n        return new Loop(statements, continuing);\r\n    }\r\n    _switch_statement() {\r\n        // switch optional_paren_expression brace_left switch_body+ brace_right\r\n        if (!this._match(TokenTypes.keywords.switch)) {\r\n            return null;\r\n        }\r\n        const condition = this._optional_paren_expression();\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n            this._attribute();\r\n        }\r\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\r\n        const body = this._switch_body();\r\n        if (body == null || body.length == 0) {\r\n            throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\r\n        }\r\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\r\n        return new Switch(condition, body);\r\n    }\r\n    _switch_body() {\r\n        // case case_selectors colon brace_left case_body? brace_right\r\n        // default colon brace_left case_body? brace_right\r\n        const cases = [];\r\n        if (this._match(TokenTypes.keywords.case)) {\r\n            const selector = this._case_selectors();\r\n            this._match(TokenTypes.tokens.colon); // colon is optional\r\n            if (this._check(TokenTypes.tokens.attr)) {\r\n                this._attribute();\r\n            }\r\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\r\n            const body = this._case_body();\r\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\r\n            cases.push(new Case(selector, body));\r\n        }\r\n        if (this._match(TokenTypes.keywords.default)) {\r\n            this._match(TokenTypes.tokens.colon); // colon is optional\r\n            if (this._check(TokenTypes.tokens.attr)) {\r\n                this._attribute();\r\n            }\r\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\r\n            const body = this._case_body();\r\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\r\n            cases.push(new Default(body));\r\n        }\r\n        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\r\n            const _cases = this._switch_body();\r\n            cases.push(_cases[0]);\r\n        }\r\n        return cases;\r\n    }\r\n    _case_selectors() {\r\n        // const_literal (comma const_literal)* comma?\r\n        const selectors = [\r\n            this._shift_expression(), //?.evaluate(this._context).toString() ?? \"\",\r\n        ];\r\n        while (this._match(TokenTypes.tokens.comma)) {\r\n            selectors.push(this._shift_expression());\r\n        }\r\n        return selectors;\r\n    }\r\n    _case_body() {\r\n        // statement case_body?\r\n        // fallthrough semicolon\r\n        if (this._match(TokenTypes.keywords.fallthrough)) {\r\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n            return [];\r\n        }\r\n        let statement = this._statement();\r\n        if (statement == null) {\r\n            return [];\r\n        }\r\n        if (!(statement instanceof Array)) {\r\n            statement = [statement];\r\n        }\r\n        const nextStatement = this._case_body();\r\n        if (nextStatement.length == 0) {\r\n            return statement;\r\n        }\r\n        return [...statement, nextStatement[0]];\r\n    }\r\n    _if_statement() {\r\n        // if optional_paren_expression compound_statement elseif_statement? else_statement?\r\n        if (!this._match(TokenTypes.keywords.if)) {\r\n            return null;\r\n        }\r\n        const condition = this._optional_paren_expression();\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n            this._attribute();\r\n        }\r\n        const block = this._compound_statement();\r\n        let elseif = [];\r\n        if (this._match_elseif()) {\r\n            if (this._check(TokenTypes.tokens.attr)) {\r\n                this._attribute();\r\n            }\r\n            elseif = this._elseif_statement(elseif);\r\n        }\r\n        let _else = null;\r\n        if (this._match(TokenTypes.keywords.else)) {\r\n            if (this._check(TokenTypes.tokens.attr)) {\r\n                this._attribute();\r\n            }\r\n            _else = this._compound_statement();\r\n        }\r\n        return new If(condition, block, elseif, _else);\r\n    }\r\n    _match_elseif() {\r\n        if (this._tokens[this._current].type === TokenTypes.keywords.else &&\r\n            this._tokens[this._current + 1].type === TokenTypes.keywords.if) {\r\n            this._advance();\r\n            this._advance();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    _elseif_statement(elseif = []) {\r\n        // else_if optional_paren_expression compound_statement elseif_statement?\r\n        const condition = this._optional_paren_expression();\r\n        const block = this._compound_statement();\r\n        elseif.push(new ElseIf(condition, block));\r\n        if (this._match_elseif()) {\r\n            if (this._check(TokenTypes.tokens.attr)) {\r\n                this._attribute();\r\n            }\r\n            this._elseif_statement(elseif);\r\n        }\r\n        return elseif;\r\n    }\r\n    _return_statement() {\r\n        // return short_circuit_or_expression?\r\n        if (!this._match(TokenTypes.keywords.return)) {\r\n            return null;\r\n        }\r\n        const value = this._short_circuit_or_expression();\r\n        return new Return(value);\r\n    }\r\n    _short_circuit_or_expression() {\r\n        // short_circuit_and_expression\r\n        // short_circuit_or_expression or_or short_circuit_and_expression\r\n        let expr = this._short_circuit_and_expr();\r\n        while (this._match(TokenTypes.tokens.or_or)) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());\r\n        }\r\n        return expr;\r\n    }\r\n    _short_circuit_and_expr() {\r\n        // inclusive_or_expression\r\n        // short_circuit_and_expression and_and inclusive_or_expression\r\n        let expr = this._inclusive_or_expression();\r\n        while (this._match(TokenTypes.tokens.and_and)) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _inclusive_or_expression() {\r\n        // exclusive_or_expression\r\n        // inclusive_or_expression or exclusive_or_expression\r\n        let expr = this._exclusive_or_expression();\r\n        while (this._match(TokenTypes.tokens.or)) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _exclusive_or_expression() {\r\n        // and_expression\r\n        // exclusive_or_expression xor and_expression\r\n        let expr = this._and_expression();\r\n        while (this._match(TokenTypes.tokens.xor)) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _and_expression() {\r\n        // equality_expression\r\n        // and_expression and equality_expression\r\n        let expr = this._equality_expression();\r\n        while (this._match(TokenTypes.tokens.and)) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _equality_expression() {\r\n        // relational_expression\r\n        // relational_expression equal_equal relational_expression\r\n        // relational_expression not_equal relational_expression\r\n        const expr = this._relational_expression();\r\n        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\r\n            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _relational_expression() {\r\n        // shift_expression\r\n        // relational_expression less_than shift_expression\r\n        // relational_expression greater_than shift_expression\r\n        // relational_expression less_than_equal shift_expression\r\n        // relational_expression greater_than_equal shift_expression\r\n        let expr = this._shift_expression();\r\n        while (this._match([\r\n            TokenTypes.tokens.less_than,\r\n            TokenTypes.tokens.greater_than,\r\n            TokenTypes.tokens.less_than_equal,\r\n            TokenTypes.tokens.greater_than_equal,\r\n        ])) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _shift_expression() {\r\n        // additive_expression\r\n        // shift_expression shift_left additive_expression\r\n        // shift_expression shift_right additive_expression\r\n        let expr = this._additive_expression();\r\n        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _additive_expression() {\r\n        // multiplicative_expression\r\n        // additive_expression plus multiplicative_expression\r\n        // additive_expression minus multiplicative_expression\r\n        let expr = this._multiplicative_expression();\r\n        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _multiplicative_expression() {\r\n        // unary_expression\r\n        // multiplicative_expression star unary_expression\r\n        // multiplicative_expression forward_slash unary_expression\r\n        // multiplicative_expression modulo unary_expression\r\n        let expr = this._unary_expression();\r\n        while (this._match([\r\n            TokenTypes.tokens.star,\r\n            TokenTypes.tokens.forward_slash,\r\n            TokenTypes.tokens.modulo,\r\n        ])) {\r\n            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());\r\n        }\r\n        return expr;\r\n    }\r\n    _unary_expression() {\r\n        // singular_expression\r\n        // minus unary_expression\r\n        // bang unary_expression\r\n        // tilde unary_expression\r\n        // star unary_expression\r\n        // and unary_expression\r\n        if (this._match([\r\n            TokenTypes.tokens.minus,\r\n            TokenTypes.tokens.bang,\r\n            TokenTypes.tokens.tilde,\r\n            TokenTypes.tokens.star,\r\n            TokenTypes.tokens.and,\r\n        ])) {\r\n            return new UnaryOperator(this._previous().toString(), this._unary_expression());\r\n        }\r\n        return this._singular_expression();\r\n    }\r\n    _singular_expression() {\r\n        // primary_expression postfix_expression ?\r\n        const expr = this._primary_expression();\r\n        const p = this._postfix_expression();\r\n        if (p) {\r\n            expr.postfix = p;\r\n        }\r\n        return expr;\r\n    }\r\n    _postfix_expression() {\r\n        // bracket_left short_circuit_or_expression bracket_right postfix_expression?\r\n        if (this._match(TokenTypes.tokens.bracket_left)) {\r\n            const expr = this._short_circuit_or_expression();\r\n            this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\r\n            const arrayIndex = new ArrayIndex(expr);\r\n            const p = this._postfix_expression();\r\n            if (p) {\r\n                arrayIndex.postfix = p;\r\n            }\r\n            return arrayIndex;\r\n        }\r\n        // period ident postfix_expression?\r\n        if (this._match(TokenTypes.tokens.period)) {\r\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected member name.\");\r\n            const p = this._postfix_expression();\r\n            const expr = new StringExpr(name.lexeme);\r\n            if (p) {\r\n                expr.postfix = p;\r\n            }\r\n            return expr;\r\n        }\r\n        return null;\r\n    }\r\n    _getStruct(name) {\r\n        if (this._context.aliases.has(name)) {\r\n            const alias = this._context.aliases.get(name).type;\r\n            return alias;\r\n        }\r\n        if (this._context.structs.has(name)) {\r\n            const struct = this._context.structs.get(name);\r\n            return struct;\r\n        }\r\n        return null;\r\n    }\r\n    _primary_expression() {\r\n        // ident argument_expression_list?\r\n        if (this._match(TokenTypes.tokens.ident)) {\r\n            const name = this._previous().toString();\r\n            if (this._check(TokenTypes.tokens.paren_left)) {\r\n                const args = this._argument_expression_list();\r\n                const struct = this._getStruct(name);\r\n                if (struct != null) {\r\n                    return new CreateExpr(struct, args);\r\n                }\r\n                return new CallExpr(name, args);\r\n            }\r\n            if (this._context.constants.has(name)) {\r\n                const c = this._context.constants.get(name);\r\n                return new ConstExpr(name, c.value);\r\n            }\r\n            return new VariableExpr(name);\r\n        }\r\n        // const_literal\r\n        if (this._match(TokenTypes.const_literal)) {\r\n            return new LiteralExpr(parseFloat(this._previous().toString()));\r\n        }\r\n        // paren_expression\r\n        if (this._check(TokenTypes.tokens.paren_left)) {\r\n            return this._paren_expression();\r\n        }\r\n        // bitcast less_than type_decl greater_than paren_expression\r\n        if (this._match(TokenTypes.keywords.bitcast)) {\r\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\r\n            const type = this._type_decl();\r\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n            const value = this._paren_expression();\r\n            return new BitcastExpr(type, value);\r\n        }\r\n        // type_decl argument_expression_list\r\n        const type = this._type_decl();\r\n        const args = this._argument_expression_list();\r\n        return new CreateExpr(type, args);\r\n    }\r\n    _argument_expression_list() {\r\n        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\r\n        if (!this._match(TokenTypes.tokens.paren_left)) {\r\n            return null;\r\n        }\r\n        const args = [];\r\n        do {\r\n            if (this._check(TokenTypes.tokens.paren_right)) {\r\n                break;\r\n            }\r\n            const arg = this._short_circuit_or_expression();\r\n            args.push(arg);\r\n        } while (this._match(TokenTypes.tokens.comma));\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' for agument list\");\r\n        return args;\r\n    }\r\n    _optional_paren_expression() {\r\n        // [paren_left] short_circuit_or_expression [paren_right]\r\n        this._match(TokenTypes.tokens.paren_left);\r\n        const expr = this._short_circuit_or_expression();\r\n        this._match(TokenTypes.tokens.paren_right);\r\n        return new GroupingExpr([expr]);\r\n    }\r\n    _paren_expression() {\r\n        // paren_left short_circuit_or_expression paren_right\r\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n        const expr = this._short_circuit_or_expression();\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n        return new GroupingExpr([expr]);\r\n    }\r\n    _struct_decl() {\r\n        // attribute* struct ident struct_body_decl\r\n        if (!this._match(TokenTypes.keywords.struct)) {\r\n            return null;\r\n        }\r\n        const startLine = this._currentLine;\r\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\r\n        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\r\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\r\n        const members = [];\r\n        while (!this._check(TokenTypes.tokens.brace_right)) {\r\n            // struct_member: attribute* variable_ident_decl\r\n            const memberAttrs = this._attribute();\r\n            const memberName = this._consume(TokenTypes.tokens.ident, \"Expected variable name.\").toString();\r\n            this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\r\n            const typeAttrs = this._attribute();\r\n            const memberType = this._type_decl();\r\n            if (memberType != null) {\r\n                memberType.attributes = typeAttrs;\r\n            }\r\n            if (!this._check(TokenTypes.tokens.brace_right))\r\n                this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\r\n            else\r\n                this._match(TokenTypes.tokens.comma); // trailing comma optional.\r\n            members.push(new Member(memberName, memberType, memberAttrs));\r\n        }\r\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\r\n        const endLine = this._currentLine;\r\n        const structNode = new Struct(name, members, startLine, endLine);\r\n        this._context.structs.set(name, structNode);\r\n        return structNode;\r\n    }\r\n    _global_variable_decl() {\r\n        // attribute* variable_decl (equal const_expression)?\r\n        const _var = this._variable_decl();\r\n        if (_var && this._match(TokenTypes.tokens.equal)) {\r\n            _var.value = this._const_expression();\r\n        }\r\n        return _var;\r\n    }\r\n    _override_variable_decl() {\r\n        // attribute* override_decl (equal const_expression)?\r\n        const _override = this._override_decl();\r\n        if (_override && this._match(TokenTypes.tokens.equal)) {\r\n            _override.value = this._const_expression();\r\n        }\r\n        return _override;\r\n    }\r\n    _global_const_decl() {\r\n        // attribute* const (ident variable_ident_decl) global_const_initializer?\r\n        if (!this._match(TokenTypes.keywords.const)) {\r\n            return null;\r\n        }\r\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\r\n        let type = null;\r\n        if (this._match(TokenTypes.tokens.colon)) {\r\n            const attrs = this._attribute();\r\n            type = this._type_decl();\r\n            if (type != null) {\r\n                type.attributes = attrs;\r\n            }\r\n        }\r\n        let value = null;\r\n        if (this._match(TokenTypes.tokens.equal)) {\r\n            const valueExpr = this._short_circuit_or_expression();\r\n            if (valueExpr instanceof CreateExpr) {\r\n                value = valueExpr;\r\n            }\r\n            else if (valueExpr instanceof ConstExpr &&\r\n                valueExpr.initializer instanceof CreateExpr) {\r\n                value = valueExpr.initializer;\r\n            }\r\n            else {\r\n                try {\r\n                    const constValue = valueExpr.evaluate(this._context);\r\n                    value = new LiteralExpr(constValue);\r\n                }\r\n                catch (_a) {\r\n                    value = valueExpr;\r\n                }\r\n            }\r\n        }\r\n        const c = new Const(name.toString(), type, \"\", \"\", value);\r\n        this._context.constants.set(c.name, c);\r\n        return c;\r\n    }\r\n    _global_let_decl() {\r\n        // attribute* let (ident variable_ident_decl) global_const_initializer?\r\n        if (!this._match(TokenTypes.keywords.let)) {\r\n            return null;\r\n        }\r\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\r\n        let type = null;\r\n        if (this._match(TokenTypes.tokens.colon)) {\r\n            const attrs = this._attribute();\r\n            type = this._type_decl();\r\n            if (type != null) {\r\n                type.attributes = attrs;\r\n            }\r\n        }\r\n        let value = null;\r\n        if (this._match(TokenTypes.tokens.equal)) {\r\n            value = this._const_expression();\r\n        }\r\n        return new Let(name.toString(), type, \"\", \"\", value);\r\n    }\r\n    _const_expression() {\r\n        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\r\n        // const_literal\r\n        return this._short_circuit_or_expression();\r\n    }\r\n    _variable_decl() {\r\n        // var variable_qualifier? (ident variable_ident_decl)\r\n        if (!this._match(TokenTypes.keywords.var)) {\r\n            return null;\r\n        }\r\n        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\r\n        let storage = \"\";\r\n        let access = \"\";\r\n        if (this._match(TokenTypes.tokens.less_than)) {\r\n            storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\r\n            if (this._match(TokenTypes.tokens.comma))\r\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\r\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n        }\r\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\r\n        let type = null;\r\n        if (this._match(TokenTypes.tokens.colon)) {\r\n            const attrs = this._attribute();\r\n            type = this._type_decl();\r\n            if (type != null) {\r\n                type.attributes = attrs;\r\n            }\r\n        }\r\n        return new Var(name.toString(), type, storage, access, null);\r\n    }\r\n    _override_decl() {\r\n        // override (ident variable_ident_decl)\r\n        if (!this._match(TokenTypes.keywords.override)) {\r\n            return null;\r\n        }\r\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\r\n        let type = null;\r\n        if (this._match(TokenTypes.tokens.colon)) {\r\n            const attrs = this._attribute();\r\n            type = this._type_decl();\r\n            if (type != null) {\r\n                type.attributes = attrs;\r\n            }\r\n        }\r\n        return new Override(name.toString(), type, null);\r\n    }\r\n    _diagnostic() {\r\n        // diagnostic(severity_control_name, diagnostic_rule_name)\r\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('\");\r\n        const severity = this._consume(TokenTypes.tokens.ident, \"Expected severity control name.\");\r\n        this._consume(TokenTypes.tokens.comma, \"Expected ','\");\r\n        const rule = this._consume(TokenTypes.tokens.ident, \"Expected diagnostic rule name.\");\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n        return new Diagnostic(severity.toString(), rule.toString());\r\n    }\r\n    _enable_directive() {\r\n        // enable ident semicolon\r\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n        return new Enable(name.toString());\r\n    }\r\n    _requires_directive() {\r\n        // requires extension [, extension]* semicolon\r\n        const extensions = [this._consume(TokenTypes.tokens.ident, \"identity expected.\").toString()];\r\n        while (this._match(TokenTypes.tokens.comma)) {\r\n            const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n            extensions.push(name.toString());\r\n        }\r\n        return new Requires(extensions);\r\n    }\r\n    _type_alias() {\r\n        // type ident equal type_decl\r\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n        this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\r\n        let aliasType = this._type_decl();\r\n        if (aliasType === null) {\r\n            throw this._error(this._peek(), \"Expected Type for Alias.\");\r\n        }\r\n        if (this._context.aliases.has(aliasType.name)) {\r\n            aliasType = this._context.aliases.get(aliasType.name).type;\r\n        }\r\n        const aliasNode = new Alias(name.toString(), aliasType);\r\n        this._context.aliases.set(aliasNode.name, aliasNode);\r\n        return aliasNode;\r\n    }\r\n    _type_decl() {\r\n        // ident\r\n        // bool\r\n        // float32\r\n        // int32\r\n        // uint32\r\n        // vec2 less_than type_decl greater_than\r\n        // vec3 less_than type_decl greater_than\r\n        // vec4 less_than type_decl greater_than\r\n        // mat2x2 less_than type_decl greater_than\r\n        // mat2x3 less_than type_decl greater_than\r\n        // mat2x4 less_than type_decl greater_than\r\n        // mat3x2 less_than type_decl greater_than\r\n        // mat3x3 less_than type_decl greater_than\r\n        // mat3x4 less_than type_decl greater_than\r\n        // mat4x2 less_than type_decl greater_than\r\n        // mat4x3 less_than type_decl greater_than\r\n        // mat4x4 less_than type_decl greater_than\r\n        // atomic less_than type_decl greater_than\r\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n        // array_type_decl\r\n        // texture_sampler_types\r\n        if (this._check([\r\n            TokenTypes.tokens.ident,\r\n            ...TokenTypes.texel_format,\r\n            TokenTypes.keywords.bool,\r\n            TokenTypes.keywords.f32,\r\n            TokenTypes.keywords.i32,\r\n            TokenTypes.keywords.u32,\r\n        ])) {\r\n            const type = this._advance();\r\n            const typeName = type.toString();\r\n            if (this._context.structs.has(typeName)) {\r\n                return this._context.structs.get(typeName);\r\n            }\r\n            if (this._context.aliases.has(typeName)) {\r\n                return this._context.aliases.get(typeName).type;\r\n            }\r\n            return new Type(type.toString());\r\n        }\r\n        // texture_sampler_types\r\n        let type = this._texture_sampler_types();\r\n        if (type) {\r\n            return type;\r\n        }\r\n        if (this._check(TokenTypes.template_types)) {\r\n            let type = this._advance().toString();\r\n            let format = null;\r\n            let access = null;\r\n            if (this._match(TokenTypes.tokens.less_than)) {\r\n                format = this._type_decl();\r\n                access = null;\r\n                if (this._match(TokenTypes.tokens.comma)) {\r\n                    access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n                }\r\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\r\n            }\r\n            return new TemplateType(type, format, access);\r\n        }\r\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n        if (this._match(TokenTypes.keywords.ptr)) {\r\n            let pointer = this._previous().toString();\r\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\r\n            const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\r\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\r\n            const decl = this._type_decl();\r\n            let access = null;\r\n            if (this._match(TokenTypes.tokens.comma)) {\r\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n            }\r\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\r\n            return new PointerType(pointer, storage.toString(), decl, access);\r\n        }\r\n        // The following type_decl's have an optional attribyte_list*\r\n        const attrs = this._attribute();\r\n        // attribute* array\r\n        // attribute* array less_than type_decl (comma element_count_expression)? greater_than\r\n        if (this._match(TokenTypes.keywords.array)) {\r\n            let format = null;\r\n            let countInt = -1;\r\n            const array = this._previous();\r\n            let countNode = null;\r\n            if (this._match(TokenTypes.tokens.less_than)) {\r\n                format = this._type_decl();\r\n                if (this._context.aliases.has(format.name)) {\r\n                    format = this._context.aliases.get(format.name).type;\r\n                }\r\n                let count = \"\";\r\n                if (this._match(TokenTypes.tokens.comma)) {\r\n                    countNode = this._shift_expression();\r\n                    // If we can't evaluate the node, defer evaluating it until after the shader has\r\n                    // finished being parsed, because const statements can be declared **after** they\r\n                    // are used.\r\n                    try {\r\n                        count = countNode.evaluate(this._context).toString();\r\n                        countNode = null;\r\n                    }\r\n                    catch (e) {\r\n                        count = \"1\";\r\n                    }\r\n                }\r\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\r\n                countInt = count ? parseInt(count) : 0;\r\n            }\r\n            const arrayType = new ArrayType(array.toString(), attrs, format, countInt);\r\n            if (countNode) {\r\n                this._deferArrayCountEval.push({ arrayType, countNode });\r\n            }\r\n            return arrayType;\r\n        }\r\n        return null;\r\n    }\r\n    _texture_sampler_types() {\r\n        // sampler_type\r\n        if (this._match(TokenTypes.sampler_type)) {\r\n            return new SamplerType(this._previous().toString(), null, null);\r\n        }\r\n        // depth_texture_type\r\n        if (this._match(TokenTypes.depth_texture_type)) {\r\n            return new SamplerType(this._previous().toString(), null, null);\r\n        }\r\n        // sampled_texture_type less_than type_decl greater_than\r\n        // multisampled_texture_type less_than type_decl greater_than\r\n        if (this._match(TokenTypes.sampled_texture_type) ||\r\n            this._match(TokenTypes.multisampled_texture_type)) {\r\n            const sampler = this._previous();\r\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\r\n            const format = this._type_decl();\r\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n            return new SamplerType(sampler.toString(), format, null);\r\n        }\r\n        // storage_texture_type less_than texel_format comma access_mode greater_than\r\n        if (this._match(TokenTypes.storage_texture_type)) {\r\n            const sampler = this._previous();\r\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\r\n            const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\r\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\r\n            const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\r\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n            return new SamplerType(sampler.toString(), format, access);\r\n        }\r\n        return null;\r\n    }\r\n    _attribute() {\r\n        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\r\n        // attr ident\r\n        let attributes = [];\r\n        while (this._match(TokenTypes.tokens.attr)) {\r\n            const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\r\n            const attr = new Attribute(name.toString(), null);\r\n            if (this._match(TokenTypes.tokens.paren_left)) {\r\n                // literal_or_ident\r\n                attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n                if (this._check(TokenTypes.tokens.comma)) {\r\n                    this._advance();\r\n                    do {\r\n                        const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n                        if (!(attr.value instanceof Array)) {\r\n                            attr.value = [attr.value];\r\n                        }\r\n                        attr.value.push(v);\r\n                    } while (this._match(TokenTypes.tokens.comma));\r\n                }\r\n                this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n            }\r\n            attributes.push(attr);\r\n        }\r\n        if (attributes.length == 0) {\r\n            return null;\r\n        }\r\n        return attributes;\r\n    }\r\n}\r\n\r\n/**\r\n * @author Brendan Duncan / https://github.com/brendan-duncan\r\n */\r\nclass TypeInfo {\r\n    constructor(name, attributes) {\r\n        this.name = name;\r\n        this.attributes = attributes;\r\n        this.size = 0;\r\n    }\r\n    get isArray() {\r\n        return false;\r\n    }\r\n    get isStruct() {\r\n        return false;\r\n    }\r\n    get isTemplate() {\r\n        return false;\r\n    }\r\n}\r\nclass MemberInfo {\r\n    constructor(name, type, attributes) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.attributes = attributes;\r\n        this.offset = 0;\r\n        this.size = 0;\r\n    }\r\n    get isArray() {\r\n        return this.type.isArray;\r\n    }\r\n    get isStruct() {\r\n        return this.type.isStruct;\r\n    }\r\n    get isTemplate() {\r\n        return this.type.isTemplate;\r\n    }\r\n    get align() {\r\n        return this.type.isStruct ? this.type.align : 0;\r\n    }\r\n    get members() {\r\n        return this.type.isStruct ? this.type.members : null;\r\n    }\r\n    get format() {\r\n        return this.type.isArray\r\n            ? this.type.format\r\n            : this.type.isTemplate\r\n                ? this.type.format\r\n                : null;\r\n    }\r\n    get count() {\r\n        return this.type.isArray ? this.type.count : 0;\r\n    }\r\n    get stride() {\r\n        return this.type.isArray ? this.type.stride : this.size;\r\n    }\r\n}\r\nclass StructInfo extends TypeInfo {\r\n    constructor(name, attributes) {\r\n        super(name, attributes);\r\n        this.members = [];\r\n        this.align = 0;\r\n        this.startLine = -1;\r\n        this.endLine = -1;\r\n        this.inUse = false;\r\n    }\r\n    get isStruct() {\r\n        return true;\r\n    }\r\n}\r\nclass ArrayInfo extends TypeInfo {\r\n    constructor(name, attributes) {\r\n        super(name, attributes);\r\n        this.count = 0;\r\n        this.stride = 0;\r\n    }\r\n    get isArray() {\r\n        return true;\r\n    }\r\n}\r\nclass TemplateInfo extends TypeInfo {\r\n    constructor(name, format, attributes, access) {\r\n        super(name, attributes);\r\n        this.format = format;\r\n        this.access = access;\r\n    }\r\n    get isTemplate() {\r\n        return true;\r\n    }\r\n}\r\nvar ResourceType;\r\n(function (ResourceType) {\r\n    ResourceType[ResourceType[\"Uniform\"] = 0] = \"Uniform\";\r\n    ResourceType[ResourceType[\"Storage\"] = 1] = \"Storage\";\r\n    ResourceType[ResourceType[\"Texture\"] = 2] = \"Texture\";\r\n    ResourceType[ResourceType[\"Sampler\"] = 3] = \"Sampler\";\r\n    ResourceType[ResourceType[\"StorageTexture\"] = 4] = \"StorageTexture\";\r\n})(ResourceType || (ResourceType = {}));\r\nclass VariableInfo {\r\n    constructor(name, type, group, binding, attributes, resourceType, access) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.group = group;\r\n        this.binding = binding;\r\n        this.attributes = attributes;\r\n        this.resourceType = resourceType;\r\n        this.access = access;\r\n    }\r\n    get isArray() {\r\n        return this.type.isArray;\r\n    }\r\n    get isStruct() {\r\n        return this.type.isStruct;\r\n    }\r\n    get isTemplate() {\r\n        return this.type.isTemplate;\r\n    }\r\n    get size() {\r\n        return this.type.size;\r\n    }\r\n    get align() {\r\n        return this.type.isStruct ? this.type.align : 0;\r\n    }\r\n    get members() {\r\n        return this.type.isStruct ? this.type.members : null;\r\n    }\r\n    get format() {\r\n        return this.type.isArray\r\n            ? this.type.format\r\n            : this.type.isTemplate\r\n                ? this.type.format\r\n                : null;\r\n    }\r\n    get count() {\r\n        return this.type.isArray ? this.type.count : 0;\r\n    }\r\n    get stride() {\r\n        return this.type.isArray ? this.type.stride : this.size;\r\n    }\r\n}\r\nclass AliasInfo {\r\n    constructor(name, type) {\r\n        this.name = name;\r\n        this.type = type;\r\n    }\r\n}\r\nclass _TypeSize {\r\n    constructor(align, size) {\r\n        this.align = align;\r\n        this.size = size;\r\n    }\r\n}\r\nclass InputInfo {\r\n    constructor(name, type, locationType, location) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.locationType = locationType;\r\n        this.location = location;\r\n        this.interpolation = null;\r\n    }\r\n}\r\nclass OutputInfo {\r\n    constructor(name, type, locationType, location) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.locationType = locationType;\r\n        this.location = location;\r\n    }\r\n}\r\nclass OverrideInfo {\r\n    constructor(name, type, attributes, id) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.attributes = attributes;\r\n        this.id = id;\r\n    }\r\n}\r\nclass ArgumentInfo {\r\n    constructor(name, type) {\r\n        this.name = name;\r\n        this.type = type;\r\n    }\r\n}\r\nclass FunctionInfo {\r\n    constructor(name, stage = null) {\r\n        this.stage = null;\r\n        this.inputs = [];\r\n        this.outputs = [];\r\n        this.arguments = [];\r\n        this.returnType = null;\r\n        this.resources = [];\r\n        this.overrides = [];\r\n        this.startLine = -1;\r\n        this.endLine = -1;\r\n        this.inUse = false;\r\n        this.calls = new Set();\r\n        this.name = name;\r\n        this.stage = stage;\r\n    }\r\n}\r\nclass EntryFunctions {\r\n    constructor() {\r\n        this.vertex = [];\r\n        this.fragment = [];\r\n        this.compute = [];\r\n    }\r\n}\r\nclass _FunctionResources {\r\n    constructor(node) {\r\n        this.resources = null;\r\n        this.inUse = false;\r\n        this.info = null;\r\n        this.node = node;\r\n    }\r\n}\r\nclass WgslReflect {\r\n    constructor(code) {\r\n        /// All top-level uniform vars in the shader.\r\n        this.uniforms = [];\r\n        /// All top-level storage vars in the shader.\r\n        this.storage = [];\r\n        /// All top-level texture vars in the shader;\r\n        this.textures = [];\r\n        // All top-level sampler vars in the shader.\r\n        this.samplers = [];\r\n        /// All top-level type aliases in the shader.\r\n        this.aliases = [];\r\n        /// All top-level overrides in the shader.\r\n        this.overrides = [];\r\n        /// All top-level structs in the shader.\r\n        this.structs = [];\r\n        /// All entry functions in the shader: vertex, fragment, and/or compute.\r\n        this.entry = new EntryFunctions();\r\n        /// All functions in the shader, including entry functions.\r\n        this.functions = [];\r\n        this._types = new Map();\r\n        this._functions = new Map();\r\n        if (code) {\r\n            this.update(code);\r\n        }\r\n    }\r\n    _isStorageTexture(type) {\r\n        return (type.name == \"texture_storage_1d\" ||\r\n            type.name == \"texture_storage_2d\" ||\r\n            type.name == \"texture_storage_2d_array\" ||\r\n            type.name == \"texture_storage_3d\");\r\n    }\r\n    update(code) {\r\n        const parser = new WgslParser();\r\n        const ast = parser.parse(code);\r\n        for (const node of ast) {\r\n            if (node instanceof Function) {\r\n                this._functions.set(node.name, new _FunctionResources(node));\r\n            }\r\n        }\r\n        for (const node of ast) {\r\n            if (node instanceof Struct) {\r\n                const info = this._getTypeInfo(node, null);\r\n                if (info instanceof StructInfo) {\r\n                    this.structs.push(info);\r\n                }\r\n            }\r\n        }\r\n        for (const node of ast) {\r\n            if (node instanceof Alias) {\r\n                this.aliases.push(this._getAliasInfo(node));\r\n                continue;\r\n            }\r\n            if (node instanceof Override) {\r\n                const v = node;\r\n                const id = this._getAttributeNum(v.attributes, \"id\", 0);\r\n                const type = v.type != null ? this._getTypeInfo(v.type, v.attributes) : null;\r\n                this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\r\n                continue;\r\n            }\r\n            if (this._isUniformVar(node)) {\r\n                const v = node;\r\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n                const type = this._getTypeInfo(v.type, v.attributes);\r\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);\r\n                this.uniforms.push(varInfo);\r\n                continue;\r\n            }\r\n            if (this._isStorageVar(node)) {\r\n                const v = node;\r\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n                const type = this._getTypeInfo(v.type, v.attributes);\r\n                const isStorageTexture = this._isStorageTexture(type);\r\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);\r\n                this.storage.push(varInfo);\r\n                continue;\r\n            }\r\n            if (this._isTextureVar(node)) {\r\n                const v = node;\r\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n                const type = this._getTypeInfo(v.type, v.attributes);\r\n                const isStorageTexture = this._isStorageTexture(type);\r\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);\r\n                if (isStorageTexture) {\r\n                    this.storage.push(varInfo);\r\n                }\r\n                else {\r\n                    this.textures.push(varInfo);\r\n                }\r\n                continue;\r\n            }\r\n            if (this._isSamplerVar(node)) {\r\n                const v = node;\r\n                const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n                const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n                const type = this._getTypeInfo(v.type, v.attributes);\r\n                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);\r\n                this.samplers.push(varInfo);\r\n                continue;\r\n            }\r\n            if (node instanceof Function) {\r\n                const vertexStage = this._getAttribute(node, \"vertex\");\r\n                const fragmentStage = this._getAttribute(node, \"fragment\");\r\n                const computeStage = this._getAttribute(node, \"compute\");\r\n                const stage = vertexStage || fragmentStage || computeStage;\r\n                const fn = new FunctionInfo(node.name, stage === null || stage === void 0 ? void 0 : stage.name);\r\n                fn.startLine = node.startLine;\r\n                fn.endLine = node.endLine;\r\n                this.functions.push(fn);\r\n                this._functions.get(node.name).info = fn;\r\n                if (stage) {\r\n                    this._functions.get(node.name).inUse = true;\r\n                    fn.inUse = true;\r\n                    fn.resources = this._findResources(node, !!stage);\r\n                    fn.inputs = this._getInputs(node.args);\r\n                    fn.outputs = this._getOutputs(node.returnType);\r\n                    this.entry[stage.name].push(fn);\r\n                }\r\n                fn.arguments = node.args.map((arg) => new ArgumentInfo(arg.name, this._getTypeInfo(arg.type, arg.attributes)));\r\n                fn.returnType = node.returnType\r\n                    ? this._getTypeInfo(node.returnType, node.attributes)\r\n                    : null;\r\n                continue;\r\n            }\r\n        }\r\n        for (const fn of this._functions.values()) {\r\n            if (fn.info) {\r\n                fn.info.inUse = fn.inUse;\r\n                this._addCalls(fn.node, fn.info.calls);\r\n            }\r\n        }\r\n        for (const fn of this._functions.values()) {\r\n            fn.node.search((node) => {\r\n                var _a;\r\n                if (node.astNodeType === \"varExpr\") {\r\n                    const v = node;\r\n                    for (const override of this.overrides) {\r\n                        if (v.name == override.name) {\r\n                            (_a = fn.info) === null || _a === void 0 ? void 0 : _a.overrides.push(override);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        for (const u of this.uniforms) {\r\n            this._markStructsInUse(u.type);\r\n        }\r\n        for (const s of this.storage) {\r\n            this._markStructsInUse(s.type);\r\n        }\r\n    }\r\n    _markStructsInUse(type) {\r\n        if (!type) {\r\n            return;\r\n        }\r\n        if (type.isStruct) {\r\n            type.inUse = true;\r\n            if (type.members) {\r\n                for (const m of type.members) {\r\n                    this._markStructsInUse(m.type);\r\n                }\r\n            }\r\n        }\r\n        else if (type.isArray) {\r\n            this._markStructsInUse(type.format);\r\n        }\r\n        else if (type.isTemplate) {\r\n            if (type.format) {\r\n                this._markStructsInUse(type.format);\r\n            }\r\n        }\r\n        else {\r\n            const alias = this._getAlias(type.name);\r\n            if (alias) {\r\n                this._markStructsInUse(alias);\r\n            }\r\n        }\r\n    }\r\n    _addCalls(fn, calls) {\r\n        var _a;\r\n        for (const call of fn.calls) {\r\n            const info = (_a = this._functions.get(call.name)) === null || _a === void 0 ? void 0 : _a.info;\r\n            if (info) {\r\n                calls.add(info);\r\n            }\r\n        }\r\n    }\r\n    /// Find a resource by its group and binding.\r\n    findResource(group, binding) {\r\n        for (const u of this.uniforms) {\r\n            if (u.group == group && u.binding == binding) {\r\n                return u;\r\n            }\r\n        }\r\n        for (const s of this.storage) {\r\n            if (s.group == group && s.binding == binding) {\r\n                return s;\r\n            }\r\n        }\r\n        for (const t of this.textures) {\r\n            if (t.group == group && t.binding == binding) {\r\n                return t;\r\n            }\r\n        }\r\n        for (const s of this.samplers) {\r\n            if (s.group == group && s.binding == binding) {\r\n                return s;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    _findResource(name) {\r\n        for (const u of this.uniforms) {\r\n            if (u.name == name) {\r\n                return u;\r\n            }\r\n        }\r\n        for (const s of this.storage) {\r\n            if (s.name == name) {\r\n                return s;\r\n            }\r\n        }\r\n        for (const t of this.textures) {\r\n            if (t.name == name) {\r\n                return t;\r\n            }\r\n        }\r\n        for (const s of this.samplers) {\r\n            if (s.name == name) {\r\n                return s;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    _markStructsFromAST(type) {\r\n        const info = this._getTypeInfo(type, null);\r\n        this._markStructsInUse(info);\r\n    }\r\n    _findResources(fn, isEntry) {\r\n        const resources = [];\r\n        const self = this;\r\n        const varStack = [];\r\n        fn.search((node) => {\r\n            if (node instanceof _BlockStart) {\r\n                varStack.push({});\r\n            }\r\n            else if (node instanceof _BlockEnd) {\r\n                varStack.pop();\r\n            }\r\n            else if (node instanceof Var) {\r\n                const v = node;\r\n                if (isEntry && v.type !== null) {\r\n                    this._markStructsFromAST(v.type);\r\n                }\r\n                if (varStack.length > 0) {\r\n                    varStack[varStack.length - 1][v.name] = v;\r\n                }\r\n            }\r\n            else if (node instanceof CreateExpr) {\r\n                const c = node;\r\n                if (isEntry && c.type !== null) {\r\n                    this._markStructsFromAST(c.type);\r\n                }\r\n            }\r\n            else if (node instanceof Let) {\r\n                const v = node;\r\n                if (isEntry && v.type !== null) {\r\n                    this._markStructsFromAST(v.type);\r\n                }\r\n                if (varStack.length > 0) {\r\n                    varStack[varStack.length - 1][v.name] = v;\r\n                }\r\n            }\r\n            else if (node instanceof VariableExpr) {\r\n                const v = node;\r\n                // Check to see if the variable is a local variable before checking to see if it's\r\n                // a resource.\r\n                if (varStack.length > 0) {\r\n                    const varInfo = varStack[varStack.length - 1][v.name];\r\n                    if (varInfo) {\r\n                        return;\r\n                    }\r\n                }\r\n                const varInfo = self._findResource(v.name);\r\n                if (varInfo) {\r\n                    resources.push(varInfo);\r\n                }\r\n            }\r\n            else if (node instanceof CallExpr) {\r\n                const c = node;\r\n                const callFn = self._functions.get(c.name);\r\n                if (callFn) {\r\n                    if (isEntry) {\r\n                        callFn.inUse = true;\r\n                    }\r\n                    fn.calls.add(callFn.node);\r\n                    if (callFn.resources === null) {\r\n                        callFn.resources = self._findResources(callFn.node, isEntry);\r\n                    }\r\n                    resources.push(...callFn.resources);\r\n                }\r\n            }\r\n            else if (node instanceof Call) {\r\n                const c = node;\r\n                const callFn = self._functions.get(c.name);\r\n                if (callFn) {\r\n                    if (isEntry) {\r\n                        callFn.inUse = true;\r\n                    }\r\n                    fn.calls.add(callFn.node);\r\n                    if (callFn.resources === null) {\r\n                        callFn.resources = self._findResources(callFn.node, isEntry);\r\n                    }\r\n                    resources.push(...callFn.resources);\r\n                }\r\n            }\r\n        });\r\n        return [...new Map(resources.map(r => [r.name, r])).values()];\r\n    }\r\n    getBindGroups() {\r\n        const groups = [];\r\n        function _makeRoom(group, binding) {\r\n            if (group >= groups.length) {\r\n                groups.length = group + 1;\r\n            }\r\n            if (groups[group] === undefined) {\r\n                groups[group] = [];\r\n            }\r\n            if (binding >= groups[group].length) {\r\n                groups[group].length = binding + 1;\r\n            }\r\n        }\r\n        for (const u of this.uniforms) {\r\n            _makeRoom(u.group, u.binding);\r\n            const group = groups[u.group];\r\n            group[u.binding] = u;\r\n        }\r\n        for (const u of this.storage) {\r\n            _makeRoom(u.group, u.binding);\r\n            const group = groups[u.group];\r\n            group[u.binding] = u;\r\n        }\r\n        for (const t of this.textures) {\r\n            _makeRoom(t.group, t.binding);\r\n            const group = groups[t.group];\r\n            group[t.binding] = t;\r\n        }\r\n        for (const t of this.samplers) {\r\n            _makeRoom(t.group, t.binding);\r\n            const group = groups[t.group];\r\n            group[t.binding] = t;\r\n        }\r\n        return groups;\r\n    }\r\n    _getOutputs(type, outputs = undefined) {\r\n        if (outputs === undefined) {\r\n            outputs = [];\r\n        }\r\n        if (type instanceof Struct) {\r\n            this._getStructOutputs(type, outputs);\r\n        }\r\n        else {\r\n            const output = this._getOutputInfo(type);\r\n            if (output !== null) {\r\n                outputs.push(output);\r\n            }\r\n        }\r\n        return outputs;\r\n    }\r\n    _getStructOutputs(struct, outputs) {\r\n        for (const m of struct.members) {\r\n            if (m.type instanceof Struct) {\r\n                this._getStructOutputs(m.type, outputs);\r\n            }\r\n            else {\r\n                const location = this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\r\n                if (location !== null) {\r\n                    const typeInfo = this._getTypeInfo(m.type, m.type.attributes);\r\n                    const locationValue = this._parseInt(location.value);\r\n                    const info = new OutputInfo(m.name, typeInfo, location.name, locationValue);\r\n                    outputs.push(info);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _getOutputInfo(type) {\r\n        const location = this._getAttribute(type, \"location\") ||\r\n            this._getAttribute(type, \"builtin\");\r\n        if (location !== null) {\r\n            const typeInfo = this._getTypeInfo(type, type.attributes);\r\n            const locationValue = this._parseInt(location.value);\r\n            const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\r\n            return info;\r\n        }\r\n        return null;\r\n    }\r\n    _getInputs(args, inputs = undefined) {\r\n        if (inputs === undefined) {\r\n            inputs = [];\r\n        }\r\n        for (const arg of args) {\r\n            if (arg.type instanceof Struct) {\r\n                this._getStructInputs(arg.type, inputs);\r\n            }\r\n            else {\r\n                const input = this._getInputInfo(arg);\r\n                if (input !== null) {\r\n                    inputs.push(input);\r\n                }\r\n            }\r\n        }\r\n        return inputs;\r\n    }\r\n    _getStructInputs(struct, inputs) {\r\n        for (const m of struct.members) {\r\n            if (m.type instanceof Struct) {\r\n                this._getStructInputs(m.type, inputs);\r\n            }\r\n            else {\r\n                const input = this._getInputInfo(m);\r\n                if (input !== null) {\r\n                    inputs.push(input);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _getInputInfo(node) {\r\n        const location = this._getAttribute(node, \"location\") ||\r\n            this._getAttribute(node, \"builtin\");\r\n        if (location !== null) {\r\n            const interpolation = this._getAttribute(node, \"interpolation\");\r\n            const type = this._getTypeInfo(node.type, node.attributes);\r\n            const locationValue = this._parseInt(location.value);\r\n            const info = new InputInfo(node.name, type, location.name, locationValue);\r\n            if (interpolation !== null) {\r\n                info.interpolation = this._parseString(interpolation.value);\r\n            }\r\n            return info;\r\n        }\r\n        return null;\r\n    }\r\n    _parseString(s) {\r\n        if (s instanceof Array) {\r\n            s = s[0];\r\n        }\r\n        return s;\r\n    }\r\n    _parseInt(s) {\r\n        if (s instanceof Array) {\r\n            s = s[0];\r\n        }\r\n        const n = parseInt(s);\r\n        return isNaN(n) ? s : n;\r\n    }\r\n    _getAlias(name) {\r\n        for (const a of this.aliases) {\r\n            if (a.name == name) {\r\n                return a.type;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    _getAliasInfo(node) {\r\n        return new AliasInfo(node.name, this._getTypeInfo(node.type, null));\r\n    }\r\n    _getTypeInfo(type, attributes) {\r\n        if (this._types.has(type)) {\r\n            return this._types.get(type);\r\n        }\r\n        if (type instanceof ArrayType) {\r\n            const a = type;\r\n            const t = a.format ? this._getTypeInfo(a.format, a.attributes) : null;\r\n            const info = new ArrayInfo(a.name, attributes);\r\n            info.format = t;\r\n            info.count = a.count;\r\n            this._types.set(type, info);\r\n            this._updateTypeInfo(info);\r\n            return info;\r\n        }\r\n        if (type instanceof Struct) {\r\n            const s = type;\r\n            const info = new StructInfo(s.name, attributes);\r\n            info.startLine = s.startLine;\r\n            info.endLine = s.endLine;\r\n            for (const m of s.members) {\r\n                const t = this._getTypeInfo(m.type, m.attributes);\r\n                info.members.push(new MemberInfo(m.name, t, m.attributes));\r\n            }\r\n            this._types.set(type, info);\r\n            this._updateTypeInfo(info);\r\n            return info;\r\n        }\r\n        if (type instanceof SamplerType) {\r\n            const s = type;\r\n            const formatIsType = s.format instanceof Type;\r\n            const format = s.format\r\n                ? formatIsType\r\n                    ? this._getTypeInfo(s.format, null)\r\n                    : new TypeInfo(s.format, null)\r\n                : null;\r\n            const info = new TemplateInfo(s.name, format, attributes, s.access);\r\n            this._types.set(type, info);\r\n            this._updateTypeInfo(info);\r\n            return info;\r\n        }\r\n        if (type instanceof TemplateType) {\r\n            const t = type;\r\n            const format = t.format ? this._getTypeInfo(t.format, null) : null;\r\n            const info = new TemplateInfo(t.name, format, attributes, t.access);\r\n            this._types.set(type, info);\r\n            this._updateTypeInfo(info);\r\n            return info;\r\n        }\r\n        const info = new TypeInfo(type.name, attributes);\r\n        this._types.set(type, info);\r\n        this._updateTypeInfo(info);\r\n        return info;\r\n    }\r\n    _updateTypeInfo(type) {\r\n        var _a, _b;\r\n        const typeSize = this._getTypeSize(type);\r\n        type.size = (_a = typeSize === null || typeSize === void 0 ? void 0 : typeSize.size) !== null && _a !== void 0 ? _a : 0;\r\n        if (type instanceof ArrayInfo) {\r\n            if (type[\"format\"]) {\r\n                const formatInfo = this._getTypeSize(type[\"format\"]);\r\n                type.stride = (_b = formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.size) !== null && _b !== void 0 ? _b : 0;\r\n                this._updateTypeInfo(type[\"format\"]);\r\n            }\r\n        }\r\n        if (type instanceof StructInfo) {\r\n            this._updateStructInfo(type);\r\n        }\r\n    }\r\n    _updateStructInfo(struct) {\r\n        var _a;\r\n        let offset = 0;\r\n        let lastSize = 0;\r\n        let lastOffset = 0;\r\n        let structAlign = 0;\r\n        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\r\n            const member = struct.members[mi];\r\n            const sizeInfo = this._getTypeSize(member);\r\n            if (!sizeInfo) {\r\n                continue;\r\n            }\r\n            (_a = this._getAlias(member.type.name)) !== null && _a !== void 0 ? _a : member.type;\r\n            const align = sizeInfo.align;\r\n            const size = sizeInfo.size;\r\n            offset = this._roundUp(align, offset + lastSize);\r\n            lastSize = size;\r\n            lastOffset = offset;\r\n            structAlign = Math.max(structAlign, align);\r\n            member.offset = offset;\r\n            member.size = size;\r\n            this._updateTypeInfo(member.type);\r\n        }\r\n        struct.size = this._roundUp(structAlign, lastOffset + lastSize);\r\n        struct.align = structAlign;\r\n    }\r\n    _getTypeSize(type) {\r\n        var _a, _b;\r\n        if (type === null || type === undefined) {\r\n            return null;\r\n        }\r\n        const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\r\n        const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\r\n        if (type instanceof MemberInfo) {\r\n            type = type.type;\r\n        }\r\n        if (type instanceof TypeInfo) {\r\n            const alias = this._getAlias(type.name);\r\n            if (alias !== null) {\r\n                type = alias;\r\n            }\r\n        }\r\n        {\r\n            const info = WgslReflect._typeInfo[type.name];\r\n            if (info !== undefined) {\r\n                const divisor = ((_a = type[\"format\"]) === null || _a === void 0 ? void 0 : _a.name) === \"f16\" ? 2 : 1;\r\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\r\n            }\r\n        }\r\n        {\r\n            const info = WgslReflect._typeInfo[type.name.substring(0, type.name.length - 1)];\r\n            if (info) {\r\n                const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\r\n                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\r\n            }\r\n        }\r\n        if (type instanceof ArrayInfo) {\r\n            let arrayType = type;\r\n            let align = 8;\r\n            let size = 8;\r\n            // Type                 AlignOf(T)          Sizeof(T)\r\n            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\r\n            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\r\n            //\r\n            // @stride(Q)\r\n            // array<E, N>          AlignOf(E)          N * Q\r\n            //\r\n            // @stride(Q)\r\n            // array<E>             AlignOf(E)          Nruntime * Q\r\n            //const E = type.format.name;\r\n            const E = this._getTypeSize(arrayType.format);\r\n            if (E !== null) {\r\n                size = E.size;\r\n                align = E.align;\r\n            }\r\n            const N = arrayType.count;\r\n            const stride = this._getAttributeNum((_b = type === null || type === void 0 ? void 0 : type.attributes) !== null && _b !== void 0 ? _b : null, \"stride\", this._roundUp(align, size));\r\n            size = N * stride;\r\n            if (explicitSize) {\r\n                size = explicitSize;\r\n            }\r\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\r\n        }\r\n        if (type instanceof StructInfo) {\r\n            let align = 0;\r\n            let size = 0;\r\n            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\r\n            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\r\n            //                          Where L is the last member of the structure\r\n            let offset = 0;\r\n            let lastSize = 0;\r\n            let lastOffset = 0;\r\n            for (const m of type.members) {\r\n                const mi = this._getTypeSize(m.type);\r\n                if (mi !== null) {\r\n                    align = Math.max(mi.align, align);\r\n                    offset = this._roundUp(mi.align, offset + lastSize);\r\n                    lastSize = mi.size;\r\n                    lastOffset = offset;\r\n                }\r\n            }\r\n            size = this._roundUp(align, lastOffset + lastSize);\r\n            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));\r\n        }\r\n        return null;\r\n    }\r\n    _isUniformVar(node) {\r\n        return node instanceof Var && node.storage == \"uniform\";\r\n    }\r\n    _isStorageVar(node) {\r\n        return node instanceof Var && node.storage == \"storage\";\r\n    }\r\n    _isTextureVar(node) {\r\n        return (node instanceof Var &&\r\n            node.type !== null &&\r\n            WgslReflect._textureTypes.indexOf(node.type.name) != -1);\r\n    }\r\n    _isSamplerVar(node) {\r\n        return (node instanceof Var &&\r\n            node.type !== null &&\r\n            WgslReflect._samplerTypes.indexOf(node.type.name) != -1);\r\n    }\r\n    _getAttribute(node, name) {\r\n        const obj = node;\r\n        if (!obj || !obj[\"attributes\"]) {\r\n            return null;\r\n        }\r\n        const attrs = obj[\"attributes\"];\r\n        for (let a of attrs) {\r\n            if (a.name == name) {\r\n                return a;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    _getAttributeNum(attributes, name, defaultValue) {\r\n        if (attributes === null) {\r\n            return defaultValue;\r\n        }\r\n        for (let a of attributes) {\r\n            if (a.name == name) {\r\n                let v = a !== null && a.value !== null ? a.value : defaultValue;\r\n                if (v instanceof Array) {\r\n                    v = v[0];\r\n                }\r\n                if (typeof v === \"number\") {\r\n                    return v;\r\n                }\r\n                if (typeof v === \"string\") {\r\n                    return parseInt(v);\r\n                }\r\n                return defaultValue;\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n    _roundUp(k, n) {\r\n        return Math.ceil(n / k) * k;\r\n    }\r\n}\r\n// Type                 AlignOf(T)          Sizeof(T)\r\n// i32, u32, or f32     4                   4\r\n// atomic<T>            4                   4\r\n// vec2<T>              8                   8\r\n// vec3<T>              16                  12\r\n// vec4<T>              16                  16\r\n// mat2x2<f32>          8                   16\r\n// mat3x2<f32>          8                   24\r\n// mat4x2<f32>          8                   32\r\n// mat2x3<f32>          16                  32\r\n// mat3x3<f32>          16                  48\r\n// mat4x3<f32>          16                  64\r\n// mat2x4<f32>          16                  32\r\n// mat3x4<f32>          16                  48\r\n// mat4x4<f32>          16                  64\r\nWgslReflect._typeInfo = {\r\n    f16: { align: 2, size: 2 },\r\n    i32: { align: 4, size: 4 },\r\n    u32: { align: 4, size: 4 },\r\n    f32: { align: 4, size: 4 },\r\n    atomic: { align: 4, size: 4 },\r\n    vec2: { align: 8, size: 8 },\r\n    vec3: { align: 16, size: 12 },\r\n    vec4: { align: 16, size: 16 },\r\n    mat2x2: { align: 8, size: 16 },\r\n    mat3x2: { align: 8, size: 24 },\r\n    mat4x2: { align: 8, size: 32 },\r\n    mat2x3: { align: 16, size: 32 },\r\n    mat3x3: { align: 16, size: 48 },\r\n    mat4x3: { align: 16, size: 64 },\r\n    mat2x4: { align: 16, size: 32 },\r\n    mat3x4: { align: 16, size: 48 },\r\n    mat4x4: { align: 16, size: 64 },\r\n};\r\nWgslReflect._textureTypes = TokenTypes.any_texture_type.map((t) => {\r\n    return t.name;\r\n});\r\nWgslReflect._samplerTypes = TokenTypes.sampler_type.map((t) => {\r\n    return t.name;\r\n});\r\n\r\nexport { Alias, AliasInfo, Argument, ArgumentInfo, ArrayIndex, ArrayInfo, ArrayType, Assign, AssignOperator, Attribute, BinaryOperator, BitcastExpr, Break, Call, CallExpr, Case, Const, ConstExpr, Continue, Continuing, CreateExpr, Default, Diagnostic, Discard, ElseIf, Enable, EntryFunctions, Expression, For, Function, FunctionInfo, GroupingExpr, If, Increment, IncrementOperator, InputInfo, Let, LiteralExpr, Loop, Member, MemberInfo, Node, Operator, OutputInfo, Override, OverrideInfo, ParseContext, PointerType, Requires, ResourceType, Return, SamplerType, Statement, StaticAssert, StringExpr, Struct, StructInfo, Switch, SwitchCase, TemplateInfo, TemplateType, Token, TokenClass, TokenType, TokenTypes, Type, TypeInfo, TypecastExpr, UnaryOperator, Var, VariableExpr, VariableInfo, WgslParser, WgslReflect, WgslScanner, While, _BlockEnd, _BlockStart };\r\n//# sourceMappingURL=wgsl_reflect.module.js.map\r\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}